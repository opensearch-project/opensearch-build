pipeline {
    agent none
    triggers {
      parameterizedCron '''
        H */2 * * * %INPUT_MANIFEST=1.2.0/opensearch-dashboards-1.2.0.yml
      '''
    }
    options {
        buildDiscarder(logRotator(artifactNumToKeepStr: '1'))
    }
    stages {
        stage('parameters') {
            steps {
                script {
                    properties([
                            parameters([
                                    string(
                                            defaultValue: '',
                                            name: 'INPUT_MANIFEST',
                                            trim: true
                                    )
                            ])
                    ])
                }
            }
        }
        stage('detect Docker image + args to use for the build') {
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028'
                    alwaysPull true
                }
            }
            steps {
                script { 
                    git url: 'https://github.com/opensearch-project/opensearch-build.git', branch: 'main'
                    manifest = readYaml(file: "manifests/$INPUT_MANIFEST") 
                    
                    dockerImage = "${manifest.ci?.image?.name}" 
                    // If the 'image' key is not present, it is populated with "null" string 
                    if (dockerImage == null || dockerImage == "null") {
                        error("The Docker image for the build is required but was not provided in the manifest")
                    }

                    dockerArgs = "${manifest.ci?.image?.args}" 
                    // If the 'args' key is not present, it is populated with "null" string 
                    if (dockerArgs == null || dockerArgs == "null") {
                        dockerArgs = ''
                    }

                    echo "Using Docker image: " + dockerImage
                    echo "Using Docker container args: " + dockerArgs
                }
            }
        }
        stage('build') {
            parallel {
                stage('build-linux-x64') {
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                            image dockerImage
                            args dockerArgs
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            build("linux", "x64")
                            assemble()
                        }
                    }
                    post() {
                        always {
                            cleanWs disableDeferredWipeout: true, deleteDirs: true
                        }
                    }
                }
                stage('build-linux-arm64') {
                    agent none
                    stages {
                        stage('build (linux-arm64)') {
                            agent {
                                docker {
                                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                                    image dockerImage
                                    args dockerArgs
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    build("linux", "arm64")
                                    zip zipFile: 'buildArtifacts.zip', archive: false, dir: 'builds'
                                    archiveArtifacts artifacts: 'buildArtifacts.zip', fingerprint: true
                                }
                            }
                            post() {
                                always {
                                    cleanWs disableDeferredWipeout: true, deleteDirs: true
                                }
                            }
                        }
                        stage('post-build (linux-arm64)') {
                            agent {
                                docker {
                                    label 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
                                    image dockerImage
                                    args dockerArgs
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    copyArtifacts filter: 'buildArtifacts.zip', fingerprintArtifacts: true, projectName: env.JOB_NAME, selector: specific(env.BUILD_NUMBER)
                                    unzip zipFile: 'buildArtifacts.zip', dir: './builds'
                                    assemble()
                                }
                            }
                            post() {
                                always {
                                    cleanWs disableDeferredWipeout: true, deleteDirs: true
                                }
                            }
                        }
                    }
                }
            }
            post() {
                success {
                    node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                        publishNotification(":white_check_mark:", "Successful Build", "\n${getAllJenkinsMessages()}")
                    }
                }
                failure {
                    node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                        publishNotification(":warning:", "Failed Build", "")
                    }
                }
            }
        }
    }
}

void build(platform, architecture) {
    git url: 'https://github.com/opensearch-project/opensearch-build.git', branch: 'main'

    sh "./build.sh manifests/$INPUT_MANIFEST -p $platform -a $architecture"
}

void assemble() {
    git url: 'https://github.com/opensearch-project/opensearch-build.git', branch: 'main'

    script { manifest = readYaml(file: 'builds/manifest.yml') }

    def artifactPath = "${env.JOB_NAME}/${manifest.build.version}/${env.BUILD_NUMBER}/${manifest.build.platform}/${manifest.build.architecture}";
    def BASE_URL = "${PUBLIC_ARTIFACT_URL}/${artifactPath}";

    sh "./assemble.sh builds/manifest.yml --base-url ${BASE_URL}"

    withAWS(role: 'opensearch-bundle', roleAccount: "${AWS_ACCOUNT_PUBLIC}", duration: 900, roleSessionName: 'jenkins-session') {
        s3Upload(file: 'builds', bucket: "${ARTIFACT_BUCKET_NAME}", path: "${artifactPath}/builds")
        s3Upload(file: "dist", bucket: "${ARTIFACT_BUCKET_NAME}", path: "${artifactPath}/dist")
    }

    addJenkinsMessage("${BASE_URL}/builds/manifest.yml\n" +
                      "${BASE_URL}/dist/manifest.yml")
}

/** Publishes a notification to a slack instance*/
void publishNotification(icon, msg, extra) {
    withCredentials([string(credentialsId: 'BUILD_NOTICE_WEBHOOK', variable: 'TOKEN')]) {
        sh("""curl -XPOST --header "Content-Type: application/json" --data '{"result_text": "$icon ${env.JOB_NAME} [${env.BUILD_NUMBER}] $msg ${env.BUILD_URL}\nManifest: ${INPUT_MANIFEST} $extra"}' """ + "$TOKEN")
    }
}

/** Add a message to the jenkins queue */
void addJenkinsMessage(message) {
    writeFile(file: "notifications/${STAGE_NAME}.msg", text: message)
    stash(includes: "notifications/*" , name: "notifications-${STAGE_NAME}")
}

/** Load all message in the jenkins queue and append them with a leading newline into a mutli-line string */
String getAllJenkinsMessages() {
    script {
        // Stages must be explicitly added to prevent overwriting
        // See https://ryan.himmelwright.net/post/jenkins-parallel-stashing/
        def stages = ['build-linux-x64', 'post-build (linux-arm64)']
        for (stage in stages) {
            unstash "notifications-${stage}"
        }

        def files = findFiles(excludes: '', glob: 'notifications/*')
        def data = ""
        for (file in files) {
            data = data + "\n" + readFile (file: file.path)
        }

        // Delete all the notifications from the workspace
        dir('notifications') {
            deleteDir()
        }
        return data
    }
}

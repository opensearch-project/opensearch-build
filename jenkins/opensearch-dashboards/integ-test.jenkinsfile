lib = library(identifier: 'jenkins@1.0.0', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

pipeline {
    options {
        timeout(time: 3, unit: 'HOURS')
    }
    agent none
    environment {
        BUILD_MANIFEST = "build-manifest.yml"
        DEFAULT_BUILD_JOB_NAME = "distribution-build-opensearch-dashboards"
    }
    parameters {
        string(
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. 2.0.0/opensearch-dashboards-2.0.0-test.yml.',
            trim: true
        )
        string(
            name: 'BUILD_MANIFEST_URL',
            description: 'The build manifest URL, e.g. https://ci.opensearch.org/ci/dbc/distribution-build-opensearch-dashboards/2.0.0/98/linux/x64/tar/builds/opensearch-dashboards/manifest.yml',
            trim: true
        )
        string(
            name: 'AGENT_LABEL',
            description: 'The agent label where the tests should be executed. For x64 use Jenkins-Agent-AL2-X64-C54xlarge-Docker-Host,for arm64 use Jenkins-Agent-AL2-Arm64-C6g4xlarge-Docker-Host',
            trim: true
        )
    }
    stages {
        stage('verify-parameters') {
            agent { label AGENT_LABEL }
            steps {
                script {
                    currentBuild.description = BUILD_MANIFEST_URL
                    if (AGENT_LABEL == '') {
                        currentBuild.result = 'ABORTED'
                        error("Integration Tests failed to start. Missing parameter: AGENT_LABEL.")
                    }
                    if (TEST_MANIFEST == '' || !fileExists("manifests/${TEST_MANIFEST}")) {
                        currentBuild.result = 'ABORTED'
                        error("Integration Tests failed to start. Test manifest was not provided or not found in manifests/${TEST_MANIFEST}.")
                    }
                    /*
                    Rebuilding of this job will result in considering upstream build as self($JOB_NAME) See https://issues.jenkins.io/browse/JENKINS-61590 for bug
                    Either trigger from expected upstream job or run a new build
                    */                    
                    env.BUILD_JOB_NAME = currentBuild.upstreamBuilds ? 
                        currentBuild.upstreamBuilds[0].fullProjectName : 
                        env.DEFAULT_BUILD_JOB_NAME
                }
            }
        }
        stage('detect docker image + args') {
            agent {
                docker {
                    label AGENT_LABEL
                    image 'alpine:3'
                    alwaysPull true
                }
            }
            steps {
                script { 
                    DOCKER_AGENT = detectTestDockerAgent()
                }
            }
        }
        stage('integ-test') {
            agent {
                docker {
                    label AGENT_LABEL
                    image DOCKER_AGENT.image
                    args DOCKER_AGENT.args
                    alwaysPull true
                }
            }
            steps {
                script {
                    def buildManifestObj = downloadBuildManifest(
                        url: BUILD_MANIFEST_URL,
                        path: BUILD_MANIFEST
                    )
                    String buildId = buildManifestObj.getArtifactBuildId()
                    env.BUILD_ID = buildId
                    echo "BUILD_MANIFEST: ${BUILD_MANIFEST}"
                    echo "BUILD_ID: ${BUILD_ID}"

                    runIntegTestScript(
                        jobName: BUILD_JOB_NAME,
                        componentName: 'functionalTestDashboards',
                        buildManifest: BUILD_MANIFEST,
                        testManifest: "manifests/${TEST_MANIFEST}",
                    )
                }
            }
            post {
                always {
                    script {
                        uploadTestResults(
                            buildManifestFileName: BUILD_MANIFEST,
                            jobName: JOB_NAME
                        )
                    }
                    postCleanup()
                }
            }
        }
    }

    post {
        success {
            node(AGENT_LABEL) {
                script {
                    def stashed = lib.jenkins.Messages.new(this).get(['integ-test'])
                    publishNotification(
                        icon: ':white_check_mark:',
                        message: 'Integration Tests Successful',
                        extra: stashed,
                        credentialsId: 'jenkins-integ-test-webhook',
                        manifest: TEST_MANIFEST,
                    )

                    postCleanup()
                }
            }
        }
        failure {
            node(AGENT_LABEL) {
                script  {
                    def stashed = lib.jenkins.Messages.new(this).get(['integ-test'])
                    publishNotification(
                        icon: ':warning:',
                        message: 'Failed Integration Tests',
                        extra: stashed,
                        credentialsId: 'jenkins-integ-test-webhook',
                        manifest: TEST_MANIFEST,
                    )

                    postCleanup()
                }
            }
        }
    }
}

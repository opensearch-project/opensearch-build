lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    options {
        timeout(time: 3, unit: 'HOURS')
        copyArtifactPermission("${JOB_BASE_NAME}")
        buildDiscarder(logRotator(artifactNumToKeepStr: '1'))
    }
    agent none
    environment {
        AGENT_X64 = 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
        AGENT_ARM64 = 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'       
        INTEG_TEST_JOB_NAME = 'integ-test-opensearch-dashboards'
    }
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-dashboards-2.0.0.yml.',
            trim: true
        )
        string(
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. 2.0.0/opensearch-dashboards-2.0.0-test.yml.',
            trim: true
        )
    }
    stages {
        stage('detect docker image + args') {
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028'
                    alwaysPull true
                }
            }
            steps {
                script { 
                    currentBuild.description = "$INPUT_MANIFEST"
                    dockerAgent = detectDockerAgent()
                }
            }
        }
        stage('build') {
            parallel {
                stage('build-and-test-linux-x64') {
                    agent {
                        docker {
                            label AGENT_X64
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            def buildManifestObj = buildAssembleUpload(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                platform: 'linux',
                                architecture: 'x64'
                            )
                            String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                            env.ARTIFACT_URL_X64 = artifactUrl
                            echo "buildManifestUrl (x64): ${buildManifestUrl}"
                            echo "artifactUrl (x64): ${artifactUrl}"

                            def integTestResults = 
                                build job: INTEG_TEST_JOB_NAME,
                                propagate: false,
                                wait: true,
                                parameters: [
                                    string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                    string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                    string(name: 'AGENT_LABEL', value: AGENT_X64),
                                    string(name: 'CONTAINER_IMAGE', value: getTestDocker(testManifest: "manifests/${TEST_MANIFEST}")?.image ?: dockerAgent.image)
                                ]

                            String status = integTestResults.getResult()
                            String icon = status == 'SUCCESS' ? ':white_check_mark:' : ':warning:'
                            lib.jenkins.Messages.new(this).add(
                                STAGE_NAME,
                                lib.jenkins.Messages.new(this).get([STAGE_NAME]) + 
                                    "\nInteg Tests (x64): ${icon} ${status} ${integTestResults.getAbsoluteUrl()}"
                            )
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-and-test-linux-arm64') {
                    agent none
                    stages {
                        stage('build-archive-linux-arm64') {
                            agent {
                                docker {
                                    label AGENT_X64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    buildArchive(
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64'
                                    )
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                        stage('assemble-archive-and-test-linux-arm64') {
                            agent {
                                docker {
                                    label AGENT_ARM64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    def buildManifestObj = archiveAssembleUpload(
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64'
                                    )

                                    String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                                    String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                                    env.ARTIFACT_URL_ARM64 = artifactUrl
                                    echo "buildManifestUrl (arm64): ${buildManifestUrl}"
                                    echo "artifactUrl (arm64): ${artifactUrl}"

                                    def integTestResults = 
                                        build job: INTEG_TEST_JOB_NAME,
                                        propagate: false,
                                        wait: true,
                                        parameters: [
                                            string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                            string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                            string(name: 'AGENT_LABEL', value: AGENT_ARM64),
                                            string(name: 'CONTAINER_IMAGE', value: getTestDocker(testManifest: "manifests/${TEST_MANIFEST}")?.image ?: dockerAgent.image)
                                        ]

                                    String status = integTestResults.getResult()
                                    String icon = status == 'SUCCESS' ? ':white_check_mark:' : ':warning:'
                                    lib.jenkins.Messages.new(this).add(
                                        STAGE_NAME,
                                        lib.jenkins.Messages.new(this).get([STAGE_NAME]) + 
                                            "\nInteg Tests (arm64): ${icon} ${status} ${integTestResults.getAbsoluteUrl()}"
                                    )
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('docker build') {
            steps {
                node(AGENT_X64) {
                    script {
                        echo "env.ARTIFACT_URL_X64: ${env.ARTIFACT_URL_X64}"
                        echo "env.ARTIFACT_URL_ARM64: ${env.ARTIFACT_URL_ARM64}"
                        
                        buildDockerImage(
                            inputManifest: "manifests/${INPUT_MANIFEST}",
                            artifactUrlX64: env.ARTIFACT_URL_X64,
                            artifactUrlArm64: env.ARTIFACT_URL_ARM64
                        )
                    }
                }
            }
        }
    }
    post {
        success {
            node(AGENT_X64) {
                script {
                    def stashed = lib.jenkins.Messages.new(this).get([
                        'build-and-test-linux-x64',
                        'build-archive-linux-arm64',
                        'assemble-archive-and-test-linux-arm64'
                    ])

                    publishNotification(
                        icon: ':white_check_mark:',
                        message: 'Successful Build',
                        extra: stashed,
                        credentialsId: 'BUILD_NOTICE_WEBHOOK',
                        manifest: "${INPUT_MANIFEST}"
                    )

                    postCleanup()
                }
            }
        }
        failure {
            node(AGENT_X64) {
                script {
                    publishNotification(
                        icon: ':warning:',
                        message: 'Failed Build',
                        credentialsId: 'BUILD_NOTICE_WEBHOOK',
                        manifest: "${INPUT_MANIFEST}"
                    )

                    postCleanup()
                }
            }
        }
    }
}

lib = library(identifier: 'jenkins@1.0.0', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

pipeline {
    options {
        timeout(time: 4, unit: 'HOURS')
    }
    agent none
    environment {
        AGENT_X64 = 'Jenkins-Agent-AL2-X64-C54xlarge-Docker-Host'
        AGENT_ARM64 = 'Jenkins-Agent-AL2-Arm64-C6g4xlarge-Docker-Host'
        IMAGE_RPM = 'opensearchstaging/ci-runner:ci-runner-rockylinux8-opensearch-build-v2' // required for rpm to create digest sha256 correctly with rpm 4.12+
    }
    parameters {
        string(
            name: 'COMPONENT_NAME',
            description: 'If this field contains one or more component names (e.g. OpenSearch-Dashboards reportsDashboards ...), will build with "--component <COMPONENT_NAME> ...", else build everything in the INPUT_MANIFEST.',
            trim: true
        )
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-dashboards-2.0.0.yml.',
            trim: true
        )
        string(
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. 2.0.0/opensearch-dashboards-2.0.0-test.yml.',
            trim: true
        )
        string(
            name: 'INTEG_TEST_JOB_NAME',
            description: "Name of integration test job that will be triggered, e.g. Playground/integ-test-opensearch-dashboards.  A non-null empty value here will skip integration tests.",
            defaultValue: "integ-test-opensearch-dashboards",
            trim: true
        )
        string(
            name: 'BWC_TEST_JOB_NAME',
            description: "Name of backwards compatibility test job that will be triggered, e.g. Playground/bwc-test-opensearch-dashboards.  A non-null empty value here will skip BWC tests.",
            defaultValue: "bwc-test-opensearch-dashboards",
            trim: true
        )
        choice(
            name: 'BUILD_DOCKER',
            description: 'Build docker image or not with options.',
            choices: ['build_docker', 'build_docker_with_build_number_tag', 'do_not_build_docker'],
        )
        booleanParam(
            name: 'PUBLISH_NOTIFICATION',
            description: 'Publish the status of this build job or not.',
            defaultValue: true
        )
    }
    stages {
        stage('detect docker image + args') {
            agent {
                docker {
                    label AGENT_X64
                    image 'alpine:3'
                    alwaysPull true
                }
            }
            steps {
                script { 
                    currentBuild.description = "$INPUT_MANIFEST"
                    dockerAgent = detectDockerAgent()
                }
            }
        }
        stage('Initialize the job info yaml report') {
            agent {
                docker {
                    label AGENT_X64
                    image dockerAgent.image
                    alwaysPull true
                }
            }
            steps {
                script {
                    buildInfoYaml(
                        componentName: COMPONENT_NAME,
                        inputManifest: "manifests/$INPUT_MANIFEST",
                        status: "NOT_STARTED",
                        stage: "INITIALIZE_STAGE"
                    )
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
        stage('build') {
            parallel {
                stage('build-and-test-linux-x64-tar') {
                    agent {
                        docker {
                            label AGENT_X64
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            def buildManifestObj = buildAssembleUpload(
                                componentName: "${COMPONENT_NAME}",
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                platform: 'linux',
                                architecture: 'x64',
                                distribution: 'tar'
                            )
                            String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                            env.ARTIFACT_URL_X64_TAR = artifactUrl
                            env.INDEX_FILE_PATH = buildManifestObj.getIndexFileRoot("${JOB_NAME}")

                            echo "buildManifestUrl (x64, tar): ${buildManifestUrl}"
                            echo "artifactUrl (x64, tar): ${artifactUrl}"

                            parallel([
                                'integ-test': {
                                    Boolean skipIntegTests = INTEG_TEST_JOB_NAME == ''
                                    echo "${skipIntegTests ? 'Skipping integration tests' : 'Running integration tests'}"
                                    if (!skipIntegTests) {
                                        def integTestResults =
                                            build job: INTEG_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_X64)
                                            ]

                                        buildInfoYaml(
                                            componentName: COMPONENT_NAME,
                                            status: integTestResults.getId(),
                                            stage: "integ_test_x64"
                                        )

                                        env.ARTIFACT_URL_X64_TAR_INTEG_TEST_RESULT = createTestResultsMessage(
                                            testType: "Integ Tests (x64, tar)",
                                            status: integTestResults.getResult(),
                                            absoluteUrl: integTestResults.getAbsoluteUrl()
                                        )
                                    } 
                                },
                                'bwc-test': {
                                    Boolean skipBwcTests = BWC_TEST_JOB_NAME == ''
                                    echo "${skipBwcTests ? 'Skipping BWC tests' : 'Running BWC tests'}"
                                    if (!skipBwcTests) {
                                        def bwcTestResults =
                                            build job: BWC_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_X64)
                                            ]

                                        buildInfoYaml(
                                            componentName: COMPONENT_NAME,
                                            status: bwcTestResults.getId(),
                                            stage: "bwc_test_x64"
                                        )

                                        env.ARTIFACT_URL_X64_TAR_BWC_TEST_RESULT = createTestResultsMessage(
                                            testType: "BWC Tests (x64, tar)",
                                            status: bwcTestResults.getResult(),
                                            absoluteUrl: bwcTestResults.getAbsoluteUrl()
                                        )
                                    }
                                }
                            ])
                        }
                    }
                    post {
                        always {
                            script {
                                lib.jenkins.Messages.new(this).add(
                                    "${STAGE_NAME}",
                                    lib.jenkins.Messages.new(this).get(["${STAGE_NAME}"]) +
                                    "\n${env.ARTIFACT_URL_X64_TAR_INTEG_TEST_RESULT}" +
                                    "\n${env.ARTIFACT_URL_X64_TAR_BWC_TEST_RESULT}"
                                )

                                postCleanup()
                            }
                        }
                    }
                }
                stage('build-and-test-linux-x64-rpm') {
                    agent { label AGENT_X64 }
                    stages {
                        stage('build-archive-linux-x64-rpm') {
                            agent {
                                docker {
                                    label AGENT_X64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    buildArchive(
                                        componentName: "${COMPONENT_NAME}",
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'x64',
                                        distribution: 'rpm',
                                        stashName: "build-archive-linux-x64-rpm-${JOB_NAME}-${BUILD_NUMBER}"
                                    )
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                        stage('assemble-archive-and-test-linux-x64-rpm') {
                            agent {
                                docker {
                                    label AGENT_X64
                                    image IMAGE_RPM
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    def buildManifestObj = archiveAssembleUpload(
                                        componentName: "${COMPONENT_NAME}",
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'x64',
                                        distribution: 'rpm',
                                        stashName: "build-archive-linux-x64-rpm-${JOB_NAME}-${BUILD_NUMBER}"
                                    )
                                    String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                                    String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                                    env.ARTIFACT_URL_X64_RPM = artifactUrl

                                    echo "buildManifestUrl (x64, rpm): ${buildManifestUrl}"
                                    echo "artifactUrl (x64, rpm): ${artifactUrl}"

                                    String bundleManifestUrl = buildManifestObj.getBundleManifestUrl(JOB_NAME, BUILD_NUMBER)

                                    echo "Trigger rpm validation for x64 rpm ${bundleManifestUrl}"
                                    def rpmValidationResults =
                                        build job: 'rpm-validation',
                                        propagate: false,
                                        wait: true,
                                        parameters: [
                                            string(name: 'BUNDLE_MANIFEST_URL', value: bundleManifestUrl),
                                            string(name: 'AGENT_LABEL', value: AGENT_X64)
                                        ]

                                    env.RPM_VALIDATION_X64_RPM_TEST_RESULT = createTestResultsMessage(
                                        testType: "RPM Validation (x64, rpm)",
                                        status: rpmValidationResults.getResult(),
                                        absoluteUrl: rpmValidationResults.getAbsoluteUrl()
                                    )
                                }
                            }
                            post {
                                always {
                                    script {
                                        lib.jenkins.Messages.new(this).add(
                                            "${STAGE_NAME}",
                                            lib.jenkins.Messages.new(this).get(["${STAGE_NAME}"]) +
                                            "\n${env.RPM_VALIDATION_X64_RPM_TEST_RESULT}"
                                        )

                                        postCleanup()
                                    }
                                }
                            }
                        }
                    }
                }
                stage('build-and-test-linux-arm64-tar') {
                    agent { label AGENT_X64 }
                    stages {
                        stage('build-archive-linux-arm64-tar') {
                            agent {
                                docker {
                                    label AGENT_X64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    buildArchive(
                                        componentName: "${COMPONENT_NAME}",
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64',
                                        distribution: 'tar',
                                        stashName: "build-archive-linux-arm64-tar-${JOB_NAME}-${BUILD_NUMBER}"
                                    )
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                        stage('assemble-archive-and-test-linux-arm64-tar') {
                            agent {
                                docker {
                                    label AGENT_ARM64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    def buildManifestObj = archiveAssembleUpload(
                                        componentName: "${COMPONENT_NAME}",
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64',
                                        distribution: 'tar',
                                        stashName: "build-archive-linux-arm64-tar-${JOB_NAME}-${BUILD_NUMBER}"
                                    )

                                    String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                                    String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                                    env.ARTIFACT_URL_ARM64_TAR = artifactUrl
                                    echo "buildManifestUrl (arm64, tar): ${buildManifestUrl}"
                                    echo "artifactUrl (arm64, tar): ${artifactUrl}"

                                    parallel([
                                        'integ-test': {
                                            Boolean skipIntegTests = INTEG_TEST_JOB_NAME == ''
                                            echo "${skipIntegTests ? 'Skipping integration tests' : 'Running integration tests'}"
                                            if (!skipIntegTests) {
                                                def integTestResults = 
                                                    build job: INTEG_TEST_JOB_NAME,
                                                    propagate: false,
                                                    wait: true,
                                                    parameters: [
                                                        string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                        string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                        string(name: 'AGENT_LABEL', value: AGENT_ARM64)
                                                    ]

                                                buildInfoYaml(
                                                    componentName: COMPONENT_NAME,
                                                    status: integTestResults.getId(),
                                                    stage: "integ_test_arm64"
                                                )

                                                env.ARTIFACT_URL_ARM64_TAR_INTEG_TEST_RESULT = createTestResultsMessage(
                                                    testType: "Integ Tests (arm64, tar)",
                                                    status: integTestResults.getResult(),
                                                    absoluteUrl: integTestResults.getAbsoluteUrl()
                                                )
                                            }
                                        },
                                        'bwc-test': {
                                            Boolean skipBwcTests = BWC_TEST_JOB_NAME == ''
                                            echo "${skipBwcTests ? 'Skipping BWC tests' : 'Running BWC tests'}"
                                            if (!skipBwcTests) {
                                                def bwcTestResults =
                                                    build job: BWC_TEST_JOB_NAME,
                                                    propagate: false,
                                                    wait: true,
                                                    parameters: [
                                                        string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                        string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                        string(name: 'AGENT_LABEL', value: AGENT_ARM64)
                                                    ]

                                                buildInfoYaml(
                                                    componentName: COMPONENT_NAME,
                                                    status: bwcTestResults.getId(),
                                                    stage: "bwc_test_arm64"
                                                )

                                                env.ARTIFACT_URL_ARM64_TAR_BWC_TEST_RESULT = createTestResultsMessage(
                                                    testType: "BWC Tests (arm64, tar)",
                                                    status: bwcTestResults.getResult(),
                                                    absoluteUrl: bwcTestResults.getAbsoluteUrl()
                                                )
                                            }
                                        }
                                    ])
                                }
                            }
                            post {
                                always {
                                    script {
                                        lib.jenkins.Messages.new(this).add(
                                            "${STAGE_NAME}",
                                            lib.jenkins.Messages.new(this).get(["${STAGE_NAME}"]) +
                                            "\n${env.ARTIFACT_URL_ARM64_TAR_INTEG_TEST_RESULT}" +
                                            "\n${env.ARTIFACT_URL_ARM64_TAR_BWC_TEST_RESULT}"
                                        )

                                        postCleanup()
                                    }
                                }
                            }
                        }
                    }
                }
                stage('build-and-test-linux-arm64-rpm') {
                    agent { label AGENT_X64 }
                    stages {
                        stage('build-archive-linux-arm64-rpm') {
                            agent {
                                docker {
                                    label AGENT_X64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    buildArchive(
                                        componentName: "${COMPONENT_NAME}",
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64',
                                        distribution: 'rpm',
                                        stashName: "build-archive-linux-arm64-rpm-${JOB_NAME}-${BUILD_NUMBER}"
                                    )
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                        stage('assemble-archive-and-test-linux-arm64-rpm') {
                            agent {
                                docker {
                                    label AGENT_ARM64
                                    image IMAGE_RPM
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    def buildManifestObj = archiveAssembleUpload(
                                        componentName: "${COMPONENT_NAME}",
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64',
                                        distribution: 'rpm',
                                        stashName: "build-archive-linux-arm64-rpm-${JOB_NAME}-${BUILD_NUMBER}"
                                    )
                                    String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                                    String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                                    env.ARTIFACT_URL_ARM64_RPM = artifactUrl
                                    echo "buildManifestUrl (arm64, rpm): ${buildManifestUrl}"
                                    echo "artifactUrl (arm64, rpm): ${artifactUrl}"

                                    String bundleManifestUrl = buildManifestObj.getBundleManifestUrl(JOB_NAME, BUILD_NUMBER)

                                    echo "Trigger rpm validation for arm64 rpm ${bundleManifestUrl}"
                                    def rpmValidationResults =
                                        build job: 'rpm-validation',
                                        propagate: false,
                                        wait: true,
                                        parameters: [
                                            string(name: 'BUNDLE_MANIFEST_URL', value: bundleManifestUrl),
                                            string(name: 'AGENT_LABEL', value: AGENT_ARM64)
                                        ]

                                    env.RPM_VALIDATION_ARM64_RPM_TEST_RESULT = createTestResultsMessage(
                                        testType: "RPM Validation (arm64, rpm)",
                                        status: rpmValidationResults.getResult(),
                                        absoluteUrl: rpmValidationResults.getAbsoluteUrl()
                                    )
                                }
                            }
                            post {
                                always {
                                    script {
                                        lib.jenkins.Messages.new(this).add(
                                            "${STAGE_NAME}",
                                            lib.jenkins.Messages.new(this).get(["${STAGE_NAME}"]) +
                                            "\n${env.RPM_VALIDATION_ARM64_RPM_TEST_RESULT}"
                                        )

                                        postCleanup()
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('update index file') {
            agent {
                docker {
                    label AGENT_X64
                    image dockerAgent.image
                    args dockerAgent.args
                    alwaysPull true
                }
            }
            steps {
                script {
                    uploadIndexFile(
                        indexFilePath: env.INDEX_FILE_PATH
                    )
                }
            }
        }
        stage('docker build') {
            when {
                beforeAgent true
                expression { 
                    params.BUILD_DOCKER != 'do_not_build_docker'
                }
            }
            agent {
                docker {
                    label AGENT_X64
                    image dockerAgent.image
                    args dockerAgent.args
                    alwaysPull true
                }
            }
            steps {
                script {
                    echo "env.ARTIFACT_URL_X64_TAR: ${env.ARTIFACT_URL_X64_TAR}"
                    echo "env.ARTIFACT_URL_ARM64_TAR: ${env.ARTIFACT_URL_ARM64_TAR}"
                    
                    buildDockerImage(
                        inputManifest: "manifests/${INPUT_MANIFEST}",
                        buildNumber: "${BUILD_NUMBER}",
                        buildOption: "${BUILD_DOCKER}",
                        artifactUrlX64: env.ARTIFACT_URL_X64_TAR,
                        artifactUrlArm64: env.ARTIFACT_URL_ARM64_TAR
                    )
                }
            }
        }
    }
    post {
        always {
            node(AGENT_X64) {
                script {
                    buildInfoYaml(
                        componentName: COMPONENT_NAME,
                        status: currentBuild.result,
                        stage: "FINALIZE_STAGE"
                    )
                    unstash "buildInfo_yml"
                    archiveArtifacts artifacts: 'buildInfo.yml'
                    postCleanup()
                }
            }
        }
        success {
            node(AGENT_X64) {
                script {
                    if (params.PUBLISH_NOTIFICATION) { 
                        def stashed = lib.jenkins.Messages.new(this).get([
                            'build-and-test-linux-x64-tar',
                            'assemble-archive-and-test-linux-x64-rpm',
                            'assemble-archive-and-test-linux-arm64-tar',
                            'assemble-archive-and-test-linux-arm64-rpm',
                        ])

                        publishNotification(
                            icon: ':white_check_mark:',
                            message: 'Successful Build',
                            extra: stashed,
                            credentialsId: 'jenkins-build-notice-webhook',
                            manifest: "${INPUT_MANIFEST}"
                        )
                    }

                    postCleanup()
                }
            }
        }
        failure {
            node(AGENT_X64) {
                script {
                    if (params.PUBLISH_NOTIFICATION) { 
                        publishNotification(
                            icon: ':warning:',
                            message: 'Failed Build',
                            credentialsId: 'jenkins-build-notice-webhook',
                            manifest: "${INPUT_MANIFEST}"
                        )
                    }

                    postCleanup()
                }
            }
        }
    }
}


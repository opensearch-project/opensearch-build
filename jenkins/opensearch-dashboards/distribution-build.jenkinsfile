lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    agent none
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-dashboards-2.0.0.yml.',
            trim: true
        )
    }
    options {
        copyArtifactPermission("${JOB_NAME}")
        buildDiscarder(logRotator(artifactNumToKeepStr: '1'))
    }
    stages {
        stage('detect docker image + args') {
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028'
                    alwaysPull true
                }
            }
            steps {
                script { 
                    currentBuild.description = "$INPUT_MANIFEST"
                    dockerAgent = detectDockerAgent()
                }
            }
        }
        stage('build') {
            parallel {
                stage('build-linux-x64') {
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            def buildManifestObj = buildAssembleUpload(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                platform: 'linux',
                                architecture: 'x64'
                            )
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                            env.ARTIFACT_URL_X64 = artifactUrl
                            echo "artifactUrl (x64): ${artifactUrl}"
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-linux-arm64') {
                    agent none
                    stages {
                        stage('build-archive-linux-arm64') {
                            agent {
                                docker {
                                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    buildArchive(
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64'
                                    )
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                        stage('assemble-archive-linux-arm64') {
                            agent {
                                docker {
                                    label 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    def buildManifestObj = archiveAssembleUpload(
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64'
                                    )

                                    String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                                    env.ARTIFACT_URL_ARM64 = artifactUrl
                                    echo "artifactUrl (arm64): ${artifactUrl}"
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('docker build') {
            steps {
                node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                    script {
                        echo "env.ARTIFACT_URL_X64: ${env.ARTIFACT_URL_X64}"
                        echo "env.ARTIFACT_URL_ARM64: ${env.ARTIFACT_URL_ARM64}"
                        
                        buildDockerImage(
                            inputManifest: "manifests/${INPUT_MANIFEST}",
                            artifactUrlX64: env.ARTIFACT_URL_X64,
                            artifactUrlArm64: env.ARTIFACT_URL_ARM64
                        )
                    }
                }
            }
        }
    }
    post {
        success {
            node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                script {
                    def stashed = lib.jenkins.Messages.new(this).get([
                        'build-linux-x64',
                        'build-archive-linux-arm64',
                        'assemble-archive-linux-arm64'
                    ])

                    publishNotification(
                        icon: ':white_check_mark:',
                        message: 'Successful Build',
                        extra: stashed,
                        credentialsId: 'BUILD_NOTICE_WEBHOOK',
                        manifest: "${INPUT_MANIFEST}"
                    )

                    postCleanup()
                }
            }
        }
        failure {
            node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                script {
                    publishNotification(
                        icon: ':warning:',
                        message: 'Failed Build',
                        credentialsId: 'BUILD_NOTICE_WEBHOOK',
                        manifest: "${INPUT_MANIFEST}"
                    )

                    postCleanup()
                }
            }
        }
    }
}

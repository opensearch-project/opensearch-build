lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    options {
        timeout(time: 3, unit: 'HOURS')
        copyArtifactPermission("${JOB_BASE_NAME}")
        buildDiscarder(logRotator(artifactNumToKeepStr: '1'))
    }
    agent none
    environment {
        AGENT_X64 = 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
        AGENT_ARM64 = 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
    }
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-dashboards-2.0.0.yml.',
            trim: true
        )
        string(
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. 2.0.0/opensearch-dashboards-2.0.0-test.yml.',
            trim: true
        )
        string(
            name: 'INTEG_TEST_JOB_NAME',
            description: "Name of integration test job that will be triggered, e.g. Playground/integ-test-opensearch-dashboards.  A non-null empty value here will skip integration tests.",
            defaultValue: "integ-test-opensearch-dashboards",
            trim: true
        )
        string(
            name: 'BWC_TEST_JOB_NAME',
            description: "Name of backwards compatibility test job that will be triggered, e.g. Playground/bwc-test-opensearch-dashboards.  A non-null empty value here will skip BWC tests.",
            defaultValue: "bwc-test-opensearch-dashboards",
            trim: true
        )
        booleanParam(
            name: 'BUILD_DOCKER',
            description: 'Build docker image or not.',
            defaultValue: true
        )
        booleanParam(
            name: 'PUBLISH_NOTIFICATION',
            description: 'Publish the status of this build job or not.',
            defaultValue: true
        )
    }
    stages {
        stage('detect docker image + args') {
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028'
                    alwaysPull true
                }
            }
            steps {
                script { 
                    currentBuild.description = "$INPUT_MANIFEST"
                    dockerAgent = detectDockerAgent()
                }
            }
        }
        stage('build') {
            parallel {
                stage('build-and-test-linux-x64-tar') {
                    agent {
                        docker {
                            label AGENT_X64
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            def buildManifestObj = buildAssembleUpload(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                platform: 'linux',
                                architecture: 'x64',
                                distribution: 'tar'
                            )
                            String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                            env.ARTIFACT_URL_X64_TAR = artifactUrl
                            env.INDEX_FILE_PATH = buildManifestObj.getIndexFileRoot("${JOB_NAME}")

                            echo "buildManifestUrl (x64, tar): ${buildManifestUrl}"
                            echo "artifactUrl (x64, tar): ${artifactUrl}"

                            parallel([
                                'integ-test': {
                                    Boolean skipIntegTests = INTEG_TEST_JOB_NAME == ''
                                    echo "${skipIntegTests ? 'Skipping integration tests' : 'Running integration tests'}"
                                    if (!skipIntegTests) {
                                        def integTestResults =
                                            build job: INTEG_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_X64)
                                            ]

                                        env.ARTIFACT_URL_X64_TAR_INTEG_TEST_RESULT = createTestResultsMessage(
                                            testType: "Integ Tests (x64, tar)",
                                            status: integTestResults.getResult(),
                                            absoluteUrl: integTestResults.getAbsoluteUrl()
                                        )
                                    } 
                                },
                                'bwc-test': {
                                    Boolean skipBwcTests = BWC_TEST_JOB_NAME == ''
                                    echo "${skipBwcTests ? 'Skipping BWC tests' : 'Running BWC tests'}"
                                    if (!skipBwcTests) {
                                        def bwcTestResults =
                                            build job: BWC_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_X64)
                                            ]

                                        env.ARTIFACT_URL_X64_TAR_BWC_TEST_RESULT = createTestResultsMessage(
                                            testType: "BWC Tests (x64, tar)",
                                            status: bwcTestResults.getResult(),
                                            absoluteUrl: bwcTestResults.getAbsoluteUrl()
                                        )
                                    }
                                }
                            ])
                        }
                    }
                    post {
                        always {
                            script {
                                lib.jenkins.Messages.new(this).add(
                                    "${STAGE_NAME}",
                                    lib.jenkins.Messages.new(this).get(["${STAGE_NAME}"]) +
                                    "\n${env.ARTIFACT_URL_X64_TAR_INTEG_TEST_RESULT}" +
                                    "\n${env.ARTIFACT_URL_X64_TAR_BWC_TEST_RESULT}"
                                )

                                postCleanup()
                            }
                        }
                    }
                }
                stage('build-and-test-linux-x64-rpm') {
                    agent {
                        docker {
                            label AGENT_X64
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            def buildManifestObj = buildAssembleUpload(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                platform: 'linux',
                                architecture: 'x64',
                                distribution: 'rpm'
                            )
                            String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                            env.ARTIFACT_URL_X64_RPM = artifactUrl

                            echo "buildManifestUrl (x64, rpm): ${buildManifestUrl}"
                            echo "artifactUrl (x64, rpm): ${artifactUrl}"

                            parallel([
                                'integ-test': {
                                    Boolean skipIntegTests = INTEG_TEST_JOB_NAME == ''
                                    echo "${skipIntegTests ? 'Skipping integration tests' : 'Running integration tests'}"
                                    if (!skipIntegTests) {
                                        def integTestResults =
                                            build job: INTEG_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_X64)
                                            ]

                                        env.ARTIFACT_URL_X64_RPM_INTEG_TEST_RESULT = createTestResultsMessage(
                                            testType: "Integ Tests (x64, rpm)",
                                            status: integTestResults.getResult(),
                                            absoluteUrl: integTestResults.getAbsoluteUrl()
                                        )
                                    } 
                                },
                                'bwc-test': {
                                    Boolean skipBwcTests = BWC_TEST_JOB_NAME == ''
                                    echo "${skipBwcTests ? 'Skipping BWC tests' : 'Running BWC tests'}"
                                    if (!skipBwcTests) {
                                        def bwcTestResults =
                                            build job: BWC_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_X64)
                                            ]

                                        env.ARTIFACT_URL_X64_RPM_BWC_TEST_RESULT = createTestResultsMessage(
                                            testType: "BWC Tests (x64, rpm)",
                                            status: bwcTestResults.getResult(),
                                            absoluteUrl: bwcTestResults.getAbsoluteUrl()
                                        )
                                    }
                                }
                            ])
                        }
                    }
                    post {
                        always {
                            script {
                                lib.jenkins.Messages.new(this).add(
                                    "${STAGE_NAME}",
                                    lib.jenkins.Messages.new(this).get(["${STAGE_NAME}"]) +
                                    "\n${env.ARTIFACT_URL_X64_RPM_INTEG_TEST_RESULT}" +
                                    "\n${env.ARTIFACT_URL_X64_RPM_BWC_TEST_RESULT}"
                                )

                                postCleanup()
                            }
                        }
                    }
                }
                stage('build-and-test-linux-arm64-tar') {
                    agent none
                    stages {
                        stage('build-archive-linux-arm64-tar') {
                            agent {
                                docker {
                                    label AGENT_X64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    buildArchive(
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64',
                                        distribution: 'tar'
                                    )
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                        stage('assemble-archive-and-test-linux-arm64-tar') {
                            agent {
                                docker {
                                    label AGENT_ARM64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    def buildManifestObj = archiveAssembleUpload(
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64',
                                        distribution: 'tar'
                                    )

                                    String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                                    String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                                    env.ARTIFACT_URL_ARM64_TAR = artifactUrl
                                    echo "buildManifestUrl (arm64, tar): ${buildManifestUrl}"
                                    echo "artifactUrl (arm64, tar): ${artifactUrl}"

                                    parallel([
                                        'integ-test': {
                                            Boolean skipIntegTests = INTEG_TEST_JOB_NAME == ''
                                            echo "${skipIntegTests ? 'Skipping integration tests' : 'Running integration tests'}"
                                            if (!skipIntegTests) {
                                                def integTestResults = 
                                                    build job: INTEG_TEST_JOB_NAME,
                                                    propagate: false,
                                                    wait: true,
                                                    parameters: [
                                                        string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                        string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                        string(name: 'AGENT_LABEL', value: AGENT_ARM64)
                                                    ]

                                                env.ARTIFACT_URL_ARM64_TAR_INTEG_TEST_RESULT = createTestResultsMessage(
                                                    testType: "Integ Tests (arm64, tar)",
                                                    status: integTestResults.getResult(),
                                                    absoluteUrl: integTestResults.getAbsoluteUrl()
                                                )
                                            }
                                        },
                                        'bwc-test': {
                                            Boolean skipBwcTests = BWC_TEST_JOB_NAME == ''
                                            echo "${skipBwcTests ? 'Skipping BWC tests' : 'Running BWC tests'}"
                                            if (!skipBwcTests) {
                                                def bwcTestResults =
                                                    build job: BWC_TEST_JOB_NAME,
                                                    propagate: false,
                                                    wait: true,
                                                    parameters: [
                                                        string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                        string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                        string(name: 'AGENT_LABEL', value: AGENT_ARM64)
                                                    ]

                                                env.ARTIFACT_URL_ARM64_TAR_BWC_TEST_RESULT = createTestResultsMessage(
                                                    testType: "BWC Tests (arm64, tar)",
                                                    status: bwcTestResults.getResult(),
                                                    absoluteUrl: bwcTestResults.getAbsoluteUrl()
                                                )
                                            }
                                        }
                                    ])
                                }
                            }
                            post {
                                always {
                                    script {
                                        lib.jenkins.Messages.new(this).add(
                                            "${STAGE_NAME}",
                                            lib.jenkins.Messages.new(this).get(["${STAGE_NAME}"]) +
                                            "\n${env.ARTIFACT_URL_ARM64_TAR_INTEG_TEST_RESULT}" +
                                            "\n${env.ARTIFACT_URL_ARM64_TAR_BWC_TEST_RESULT}"
                                        )

                                        postCleanup()
                                    }
                                }
                            }
                        }
                    }
                }
                stage('build-and-test-linux-arm64-rpm') {
                    agent none
                    stages {
                        stage('build-archive-linux-arm64-rpm') {
                            agent {
                                docker {
                                    label AGENT_X64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    buildArchive(
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64',
                                        distribution: 'rpm'
                                    )
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                        stage('assemble-archive-and-test-linux-arm64-rpm') {
                            agent {
                                docker {
                                    label AGENT_ARM64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    def buildManifestObj = archiveAssembleUpload(
                                        inputManifest: "manifests/${INPUT_MANIFEST}",
                                        platform: 'linux',
                                        architecture: 'arm64',
                                        distribution: 'rpm'
                                    )

                                    String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                                    String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                                    env.ARTIFACT_URL_ARM64_TAR = artifactUrl
                                    echo "buildManifestUrl (arm64, rpm): ${buildManifestUrl}"
                                    echo "artifactUrl (arm64, rpm): ${artifactUrl}"

                                    parallel([
                                        'integ-test': {
                                            Boolean skipIntegTests = INTEG_TEST_JOB_NAME == ''
                                            echo "${skipIntegTests ? 'Skipping integration tests' : 'Running integration tests'}"
                                            if (!skipIntegTests) {
                                                def integTestResults = 
                                                    build job: INTEG_TEST_JOB_NAME,
                                                    propagate: false,
                                                    wait: true,
                                                    parameters: [
                                                        string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                        string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                        string(name: 'AGENT_LABEL', value: AGENT_ARM64)
                                                    ]

                                                env.ARTIFACT_URL_ARM64_RPM_INTEG_TEST_RESULT = createTestResultsMessage(
                                                    testType: "Integ Tests (arm64, rpm)",
                                                    status: integTestResults.getResult(),
                                                    absoluteUrl: integTestResults.getAbsoluteUrl()
                                                )
                                            }
                                        },
                                        'bwc-test': {
                                            Boolean skipBwcTests = BWC_TEST_JOB_NAME == ''
                                            echo "${skipBwcTests ? 'Skipping BWC tests' : 'Running BWC tests'}"
                                            if (!skipBwcTests) {
                                                def bwcTestResults =
                                                    build job: BWC_TEST_JOB_NAME,
                                                    propagate: false,
                                                    wait: true,
                                                    parameters: [
                                                        string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                        string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                        string(name: 'AGENT_LABEL', value: AGENT_ARM64)
                                                    ]

                                                env.ARTIFACT_URL_ARM64_RPM_BWC_TEST_RESULT = createTestResultsMessage(
                                                    testType: "BWC Tests (arm64, rpm)",
                                                    status: bwcTestResults.getResult(),
                                                    absoluteUrl: bwcTestResults.getAbsoluteUrl()
                                                )
                                            }
                                        }
                                    ])
                                }
                            }
                            post {
                                always {
                                    script {
                                        lib.jenkins.Messages.new(this).add(
                                            "${STAGE_NAME}",
                                            lib.jenkins.Messages.new(this).get(["${STAGE_NAME}"]) +
                                            "\n${env.ARTIFACT_URL_ARM64_RPM_INTEG_TEST_RESULT}" +
                                            "\n${env.ARTIFACT_URL_ARM64_RPM_BWC_TEST_RESULT}"
                                        )

                                        postCleanup()
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('update index file') {
            agent {
                docker {
                    label AGENT_X64
                    image dockerAgent.image
                    args dockerAgent.args
                    alwaysPull true
                }
            }
            steps {
                script {
                    uploadIndexFile(
                        indexFilePath: env.INDEX_FILE_PATH
                    )
                }
            }
        }
        stage('docker build') {
            when {
                beforeAgent true
                expression { 
                    return params.BUILD_DOCKER
                }
            }
            steps {
                node(AGENT_X64) {
                    script {
                        echo "env.ARTIFACT_URL_X64_TAR: ${env.ARTIFACT_URL_X64_TAR}"
                        echo "env.ARTIFACT_URL_ARM64_TAR: ${env.ARTIFACT_URL_ARM64_TAR}"
                        
                        buildDockerImage(
                            inputManifest: "manifests/${INPUT_MANIFEST}",
                            artifactUrlX64: env.ARTIFACT_URL_X64,
                            artifactUrlArm64: env.ARTIFACT_URL_ARM64
                        )
                    }
                }
            }
        }
    }
    post {
        success {
            node(AGENT_X64) {
                script {
                    if (params.PUBLISH_NOTIFICATION) { 
                        def stashed = lib.jenkins.Messages.new(this).get([
                            'build-and-test-linux-x64-tar',
                            'build-and-test-linux-x64-rpm',
                            'assemble-archive-and-test-linux-arm64-tar',
                            'assemble-archive-and-test-linux-arm64-rpm',
                        ])

                        publishNotification(
                            icon: ':white_check_mark:',
                            message: 'Successful Build',
                            extra: stashed,
                            credentialsId: 'BUILD_NOTICE_WEBHOOK',
                            manifest: "${INPUT_MANIFEST}"
                        )
                    }

                    postCleanup()
                }
            }
        }
        failure {
            node(AGENT_X64) {
                script {
                    if (params.PUBLISH_NOTIFICATION) { 
                        publishNotification(
                            icon: ':warning:',
                            message: 'Failed Build',
                            credentialsId: 'BUILD_NOTICE_WEBHOOK',
                            manifest: "${INPUT_MANIFEST}"
                        )
                    }

                    postCleanup()
                }
            }
        }
    }
}

/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

lib = library(identifier: 'jenkins@10.1.0', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

def agent_nodes = [
    'linux_x64': 'Jenkins-Agent-AL2023-X64-M54xlarge-Docker-Host',
    'linux_arm64': 'Jenkins-Agent-AL2023-Arm64-M6g4xlarge-Docker-Host',
    'windows_x64': 'Jenkins-Agent-Windows2019-X64-M54xlarge-Docker-Host',
]

pipeline {
    options {
        timeout(time: 7, unit: 'HOURS')
        buildDiscarder(logRotator(daysToKeepStr: '60'))
    }
    agent none
    environment {
        BUILD_MANIFEST = 'build-manifest.yml'
        BUILD_JOB_NAME = 'distribution-build-opensearch'
        ARTIFACT_BUCKET_NAME = credentials('jenkins-artifact-bucket-name')
    }
    parameters {
        string(
            name: 'COMPONENT_NAME',
            description: 'If this field contains one or more component names (e.g. index-management geospatial ...) separated by space, will test with "--component ...", else test everything in the TEST_MANIFEST..',
            trim: true
        )
        string(
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0-test.yml.',
            trim: true
        )
        string(
            name: 'BUILD_MANIFEST_URL',
            description: 'The build manifest URL for OpenSearch, e.g. "https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/2.9.0/8172/linux/x64/tar/builds/opensearch/manifest.yml".',
            trim: true
        )
        string(
            name: 'RC_NUMBER',
            description: 'The RC build count. Default is 0 which means its not an RC build.',
            defaultValue: '0'
        )
        booleanParam(
            name: 'VALIDATE_ARTIFACTS',
            description: 'If true the provided artifacts are validated before triggering integ-tests else skip the validation stage',
            defaultValue: true
        )
    }
    stages {
        stage('verify-parameters') {
            agent { label agent_nodes['linux_x64'] }
            steps {
                script {
                    if (TEST_MANIFEST == '' || !fileExists("manifests/${TEST_MANIFEST}")) {
                        currentBuild.result = 'ABORTED'
                        error("Integration Tests failed to start. Test manifest was not provided or not found in manifests/${TEST_MANIFEST}.")
                    }

                    if (BUILD_MANIFEST_URL == '') {
                        currentBuild.result = 'ABORTED'
                        error('Integration Tests failed to start. Build manifest url was not provided.')
                    }
                    downloadBuildManifest(
                        url: BUILD_MANIFEST_URL,
                        path: BUILD_MANIFEST
                    )

                    def buildManifestObj = lib.jenkins.BuildManifest.new(readYaml(file: BUILD_MANIFEST))
                    env.architecture = buildManifestObj.getArtifactArchitecture()
                    env.buildId = buildManifestObj.getArtifactBuildId()
                    env.distribution = buildManifestObj.getDistribution()
                    env.version = buildManifestObj.build.version
                    env.platform = buildManifestObj.build.platform
                    env.artifactPath = buildManifestObj.getArtifactRoot(BUILD_JOB_NAME, buildId)
                    env.AGENT_LABEL = agent_nodes["${env.platform}_${architecture}"]

                    // Get docker information
                    testDockerAgent = detectTestDockerAgent(
                        distribution: "${distribution}",
                        platform: "${platform}"
                    )
                    echo("Test Docker Image: ${testDockerAgent.image}, Args: ${testDockerAgent.args}, JavaVersion: ${testDockerAgent.javaVersion}")
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
        stage('validate-artifacts') {
            when {
                expression {
                    params.VALIDATE_ARTIFACTS == true
                }
            }
            agent { label agent_nodes['linux_x64'] }
            steps {
                script {
                    build job: 'distribution-validation',
                    propagate: true,
                    wait: true,
                    parameters: [
                        string(name: 'VERSION', value: "${env.version}"),
                        string(name: 'DISTRIBUTION', value: "${env.distribution}"),
                        string(name: 'ARCHITECTURE', value: "${env.architecture}"),
                        string(name: 'OS_BUILD_NUMBER', value: "${env.buildId}"),
                        string(name: 'PROJECTS', value: "opensearch"),
                        string(name: 'ARTIFACT_TYPE', value: "staging")
                    ]
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
        stage('integ-test') {
            // Need to run this directly on agent node here in order to trigger stages with docker container and avoid docker within docker situation
            // Can only be run in runner that is at least 50GB per container
            agent { label AGENT_LABEL }
            steps {
                script {
                    downloadBuildManifest(
                        url: BUILD_MANIFEST_URL,
                        path: BUILD_MANIFEST
                    )

                    def buildManifestObj = lib.jenkins.BuildManifest.new(readYaml(file: BUILD_MANIFEST))
                    def testManifestObj = lib.jenkins.TestManifest.new(readYaml(file: "manifests/${TEST_MANIFEST}"))
                    def componentDefaultList = testManifestObj.getComponentNames()
                    def componentsInBuildManifest = buildManifestObj.getNames()
                    def componentList = COMPONENT_NAME ? COMPONENT_NAME.trim().split(' ') as List : componentDefaultList
                    String switch_user_non_root = (distribution.equals('rpm') || distribution.equals('deb')) ? 'true' : 'false'
                    echo "switch_user_non_root: ${switch_user_non_root}"

                    for (component_check in componentList) {
                        if (!componentDefaultList.contains(component_check)) {
                            error("${component_check} is not present in the test manifest: ${TEST_MANIFEST}")
                        }
                        if (!componentsInBuildManifest.contains(component_check)) {
                            echo "Skipping tests for ${component_check} as is not present in the provided build manifest."
                            componentList -= component_check
                        }
                        // Due to inability to install multiple versions of deb/rpm packages on the same EC2 host.
                        // CCR plugin remoteIntegTest are failing in deb and rpm distribution due to multiple clusters are not forming.(Issue-https://github.com/opensearch-project/opensearch-build/issues/4610)
                        // A multi-cluster setup is needed. TODO: Explore multi-cluster setup solutions.
                        // Temporarily Skipping integTest for cross-cluster-replication component when running on deb and rpm distribution.
                        if ((distribution.equals('rpm') || distribution.equals('deb')) && component_check.equals('cross-cluster-replication')) {
                            echo "Skipping integTest for ${distribution} distribution for cross-cluster-replication"
                            componentList -= component_check
                        }
                    }
                    echo "Testing components: ${componentList}"
                    currentBuild.description = "$TEST_MANIFEST, $version, $architecture, $platform, $buildId, $distribution, $componentList"

                    if (env.platform != 'windows') {
                        echo "Downloading from ${artifactPath} and stashing both artifacts and repository"
                        downloadFromS3(
                            assumedRoleName: 'opensearch-bundle',
                            roleAccountNumberCred: 'jenkins-aws-account-public',
                            downloadPath: "${artifactPath}/",
                            bucketName: "${ARTIFACT_BUCKET_NAME}",
                            localPath: "${WORKSPACE}/artifacts",
                            force: true
                          )
                        sh("rm -rf $WORKSPACE/$distribution && mv -v $WORKSPACE/artifacts/${artifactPath} $WORKSPACE")
                    }
                    else {
                        echo 'Skipping artifacts downloads since platform is Windows and only stashing the repository'
                    }

                    // Stash the current working directory files, aka opensearch-build repo
                    // Unstash later in each triggered stage to run integTest
                    stash includes: '**', name: "integtest-opensearch-$BUILD_NUMBER"

                    componentTests = [:]

                    for (component in componentList) {
                        // Must use local variable due to groovy for loop and closure scope
                        // Or the stage will be fixed to the last item in return when new stages are triggered here
                        // https://web.archive.org/web/20181121065904/http://blog.freeside.co/2013/03/29/groovy-gotcha-for-loops-and-closure-scope/
                        def local_component = component.trim()
                        def local_component_index = componentList.indexOf(local_component)
                        def wait_seconds = local_component_index * 20

                        echo "Add Component: ${local_component}"
                        componentTests["Testing ${local_component}"] = {
                            // Using scripted pipelines to trigger dynamic parallel stages
                            timeout(time: 4, unit: 'HOURS') {
                                node(AGENT_LABEL) {
                                    docker.withRegistry('https://public.ecr.aws/') {
                                        docker.image(testDockerAgent.image).pull() // always pull latest
                                        docker.image(testDockerAgent.image).inside(testDockerAgent.args) {
                                            try {
                                                stage("${local_component}") {
                                                    // Jenkins tend to not clean up workspace at times even though ws clean is called
                                                    // Docker is mounting the agent directory so it can communicate with the agent
                                                    // this sometimes causes the workspace to retain last run test-results and ends with build failures
                                                    // https://github.com/opensearch-project/opensearch-build/blob/6ed1ce3c583233eae4fe1027969d778cfc7660f7/src/test_workflow/test_recorder/test_recorder.py#L99
                                                    if (isUnix()) {
                                                        sh("echo ${local_component} with index ${local_component_index} will sleep ${wait_seconds} seconds to reduce load && sleep ${wait_seconds}")
                                                    } else {
                                                        bat"""
                                                            bash -c "echo ${local_component} with index ${local_component_index} will sleep ${wait_seconds} seconds to reduce load && sleep ${wait_seconds}"
                                                        """
                                                    }
                                                    unstash "integtest-opensearch-$BUILD_NUMBER"
                                                    if (env.platform == 'windows') {
                                                        echo "Unstashing the repository and downloading the artifacts from S3: ${artifactPath}"
                                                        downloadFromS3(
                                                            assumedRoleName: 'opensearch-bundle',
                                                            roleAccountNumberCred: 'jenkins-aws-account-public',
                                                            downloadPath: "${artifactPath}/",
                                                            bucketName: "${ARTIFACT_BUCKET_NAME}",
                                                            localPath: "${WORKSPACE}/artifacts",
                                                            force: true
                                                          )
                                                        bat"""
                                                            bash -c "rm -rf $WORKSPACE/$distribution && mv -v $WORKSPACE/artifacts/${artifactPath} $WORKSPACE"
                                                        """
                                                    }
                                                    else {
                                                        echo 'Unstashing both artifacts and repository'
                                                    }

                                                    if (isUnix()) {
                                                        sh('rm -rf test-results')
                                                    } else {
                                                        bat "bash -c \"rm -rf test-results\""
                                                    }
                                                    runIntegTestScript(
                                                        jobName: "$BUILD_JOB_NAME",
                                                        componentName: "${local_component}",
                                                        buildManifest: "$BUILD_MANIFEST",
                                                        testManifest: "manifests/${TEST_MANIFEST}",
                                                        localPath: "${WORKSPACE}/${distribution}",
                                                        switchUserNonRoot: "${switch_user_non_root}"
                                                    )
                                                }
                                            } catch (e) {
                                                throw new Exception("Error running integtest for component ${local_component}", e)
                                            } finally {
                                                echo "Completed running integtest for component ${local_component}"
                                                uploadTestResults(
                                                    buildManifestFileName: BUILD_MANIFEST,
                                                    jobName: JOB_NAME
                                                )
                                                postCleanup()
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    parallel componentTests
                }
            }
            post {
                always {
                    script {
                        retry(5) {
                            node(AGENT_LABEL) {
                                docker.withRegistry('https://public.ecr.aws/') {
                                    docker.image(testDockerAgent.image).inside(testDockerAgent.args) {
                                        checkout scm
                                        sleep 10
                                        downloadBuildManifest(
                                            url: BUILD_MANIFEST_URL,
                                            path: BUILD_MANIFEST
                                        )
                                        createUploadTestReportManifest(
                                            testManifest: "manifests/${TEST_MANIFEST}",
                                            buildManifest: BUILD_MANIFEST,
                                            testRunID: "${env.BUILD_NUMBER}",
                                            testType: 'integ-test',
                                            rcNumber: params.RC_NUMBER,
                                            componentName: "${COMPONENT_NAME}",
                                        )
                                        echo("Download report manifest from https://ci.opensearch.org/ci/dbc/integ-test/${env.version}/${env.buildId}/${env.platform}/${env.architecture}/${env.distribution}/test-results/${env.BUILD_NUMBER}/integ-test/test-report.yml")
                                        archiveArtifacts artifacts: 'test-report.yml'
                                    }
                                }
                            }
                        }
                        retry(5) {
                            node(agent_nodes['linux_x64']) {
                                sleep 10
                                def rc = (params.RC_NUMBER.toInteger() > 0)
                                sh "mkdir -p test-results-os-${env.BUILD_NUMBER}"
                                sh "curl -sSL https://ci.opensearch.org/ci/dbc/integ-test/${env.version}/${env.buildId}/${env.platform}/${env.architecture}/${env.distribution}/test-results/${env.BUILD_NUMBER}/integ-test/test-report.yml --output test-results-os-${env.BUILD_NUMBER}/test-report.yml"
                                publishIntegTestResults(
                                    distributionBuildUrl: "https://build.ci.opensearch.org/blue/organizations/jenkins/${env.BUILD_JOB_NAME}/detail/${env.BUILD_JOB_NAME}/${env.buildId}/pipeline",
                                    jobName: env.JOB_NAME,
                                    testReportManifestYml: "test-results-os-${env.BUILD_NUMBER}/test-report.yml"
                                )
                                postCleanup()
                            }
                        }

                    }
                    postCleanup()
                }
            }
        }
    }
    post {
        always {
            node(AGENT_LABEL) {
                script {
                    def triggerIntegTestNotification =
                            build job: 'integ-test-notification',
                            propagate: false,
                            wait: false,
                            parameters: [
                                string(name: 'INPUT_MANIFEST', value: "${env.version}/opensearch-${env.version}.yml"),
                                string(name: 'DISTRIBUTION_NUMBER', value: "${env.buildId}")
                            ]
                    postCleanup()
                }
            }
        }
    }
}

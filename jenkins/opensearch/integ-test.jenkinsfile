lib = library(identifier: 'jenkins@5.9.1', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

def docker_images = [
    "tar": "opensearchstaging/ci-runner:ci-runner-centos7-opensearch-build-v3",
    "rpm": "opensearchstaging/ci-runner:ci-runner-rockylinux8-systemd-base-integtest-v3",
    "deb": "opensearchstaging/ci-runner:ci-runner-ubuntu2004-systemd-base-integtest-v3",
    "zip": "opensearchstaging/ci-runner:ci-runner-windows2019-servercore-opensearch-build-v1",
]

def docker_args = [
    "tar": "-u 1000",
    "rpm": "--entrypoint=/usr/lib/systemd/systemd -u root --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:rw --cgroupns=host",
    "deb": "--entrypoint=/usr/lib/systemd/systemd -u root --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:rw --cgroupns=host",
    "zip": "-u ContainerAdministrator",
]

def agent_nodes = [
    "linux_x64": "Jenkins-Agent-AL2023-X64-C54xlarge-Docker-Host",
    "linux_arm64": "Jenkins-Agent-AL2023-Arm64-C6g4xlarge-Docker-Host",
    "windows_x64": "Jenkins-Agent-Windows2019-X64-C54xlarge-Docker-Host",
]

pipeline {
    options {
        timeout(time: 4, unit: 'HOURS')
        buildDiscarder(logRotator(daysToKeepStr: '30'))
    }
    agent none
    environment {
        BUILD_MANIFEST = "build-manifest.yml"
        BUILD_JOB_NAME = "distribution-build-opensearch"
        ARTIFACT_BUCKET_NAME = credentials('jenkins-artifact-bucket-name')
    }
    parameters {
        string(
            name: 'COMPONENT_NAME',
            description: 'If this field contains one or more component names (e.g. index-management geospatial ...) separated by space, will test with "--component ...", else test everything in the TEST_MANIFEST..',
            trim: true
        )
        string(
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0-test.yml.',
            trim: true
        )
        string(
            name: 'BUILD_MANIFEST_URL',
            description: 'The build manifest URL for OpenSearch, e.g. "https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/2.9.0/8172/linux/x64/tar/builds/opensearch/manifest.yml".',
            trim: true
        )
    }
    stages {
        stage('verify-parameters') {
            agent { label agent_nodes["linux_x64"]}
            steps {
                script {
                    if (TEST_MANIFEST == '' || !fileExists("manifests/${TEST_MANIFEST}")) {
                        currentBuild.result = 'ABORTED'
                        error("Integration Tests failed to start. Test manifest was not provided or not found in manifests/${TEST_MANIFEST}.")
                    }

                    if (BUILD_MANIFEST_URL == '') {
                        currentBuild.result = 'ABORTED'
                        error("Integration Tests failed to start. Build manifest url was not provided.")
                    }

                    downloadBuildManifest(
                        url: BUILD_MANIFEST_URL,
                        path: BUILD_MANIFEST
                    )

                    def buildManifestObj = lib.jenkins.BuildManifest.new(readYaml(file: BUILD_MANIFEST))
                    def componentList = COMPONENT_NAME ? COMPONENT_NAME.trim().split(" ") as List : buildManifestObj.getNames()
                    env.architecture = buildManifestObj.getArtifactArchitecture()
                    env.platform = buildManifestObj.getArtifactPlatform()
                    env.buildId = buildManifestObj.getArtifactBuildId()
                    env.distribution = buildManifestObj.getDistribution()
                    env.version = buildManifestObj.build.version
                    env.platform = buildManifestObj.build.platform
                    env.artifactPath = buildManifestObj.getArtifactRoot(BUILD_JOB_NAME, buildId)
                    env.AGENT_LABEL = agent_nodes["${env.platform}_${architecture}"]

                    echo "Version: ${version}, Agent: ${AGENT_LABEL}, BuildId: ${buildId}, Distribution: ${distribution}, Components: ${componentList}"
                    currentBuild.description = "$TEST_MANIFEST, $version, $architecture, $platform, $buildId, $distribution, $componentList"
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
        stage('integ-test') {
            // Need to run this directly on agent node here in order to trigger stages with docker container and avoid docker within docker situation
            // Can only be run in runner that is at least 50GB per container
            agent { label AGENT_LABEL }
            steps {
                script {

                    downloadBuildManifest(
                        url: BUILD_MANIFEST_URL,
                        path: BUILD_MANIFEST
                    )

                    def buildManifestObj = lib.jenkins.BuildManifest.new(readYaml(file: BUILD_MANIFEST))
                    def componentDefaultList = buildManifestObj.getNames()
                    def componentList = COMPONENT_NAME ? COMPONENT_NAME.trim().split(" ") as List : componentDefaultList
                    String switch_user_non_root = (distribution.equals('rpm') || distribution.equals('deb')) ? 'true' : 'false'
                    echo "switch_user_non_root: ${switch_user_non_root}"
                    echo "componentList: ${componentList}"

                    for (component_check in componentList) {
                        if (!componentDefaultList.contains(component_check)) {
                            error("${component_check} is not in build manifest: ${componentDefaultList}, exit 1")
                        }
                    }

                    if (env.platform != 'windows') {
                        echo "Not on Windows, stash repository+artifacts"
                        echo "Downloading from S3: ${artifactPath}"
                        downloadFromS3(
                            assumedRoleName: 'opensearch-bundle',
                            roleAccountNumberCred: 'jenkins-aws-account-public',
                            downloadPath: "${artifactPath}/",
                            bucketName: "${ARTIFACT_BUCKET_NAME}",
                            localPath: "${WORKSPACE}/artifacts",
                            force: true
                          )
                        sh("rm -rf $WORKSPACE/$distribution && mv -v $WORKSPACE/artifacts/${artifactPath} $WORKSPACE")
                    }
                    else {
                        echo "On Windows Platform, stash repository only"
                    }

                    // Stash the current working directory files, aka opensearch-build repo
                    // Unstash later in each triggered stage to run integTest
                    stash includes: "**", name: "integtest-opensearch-$BUILD_NUMBER"

                    componentTests = [:]

                    for (component in componentList) {
                        // Must use local variable due to groovy for loop and closure scope
                        // Or the stage will be fixed to the last item in return when new stages are triggered here
                        // https://web.archive.org/web/20181121065904/http://blog.freeside.co/2013/03/29/groovy-gotcha-for-loops-and-closure-scope/
                        def local_component = component.trim()
                        def local_component_index = componentList.indexOf(local_component)
                        def wait_seconds = local_component_index * 20

                        echo "Add Component: ${local_component}"
                        componentTests["Run Integtest ${local_component}"] = {
                            // Using scripted pipelines to trigger dynamic parallel stages
                            timeout(time: 2, unit: 'HOURS') {
                                node(AGENT_LABEL) {
                                    docker.withRegistry('https://public.ecr.aws/') {
                                        docker.image(docker_images["$distribution"]).inside(docker_args["$distribution"]) {
                                            try {
                                                stage("${local_component}") {
                                                    // Jenkins tend to not clean up workspace at times even though ws clean is called
                                                    // Docker is mounting the agent directory so it can communicate with the agent
                                                    // this sometimes causes the workspace to retain last run test-results and ends with build failures
                                                    // https://github.com/opensearch-project/opensearch-build/blob/6ed1ce3c583233eae4fe1027969d778cfc7660f7/src/test_workflow/test_recorder/test_recorder.py#L99
                                                    sh("echo ${local_component} with index ${local_component_index} will sleep ${wait_seconds} seconds to reduce load && sleep ${wait_seconds}")
                                                    unstash "integtest-opensearch-$BUILD_NUMBER"
                                                    if (env.platform == 'windows') {
                                                        echo "On Windows Platform, unstash repository and download the artifacts"
                                                        echo "Downloading from S3: ${artifactPath}"
                                                        downloadFromS3(
                                                            assumedRoleName: 'opensearch-bundle',
                                                            roleAccountNumberCred: 'jenkins-aws-account-public',
                                                            downloadPath: "${artifactPath}/",
                                                            bucketName: "${ARTIFACT_BUCKET_NAME}",
                                                            localPath: "${WORKSPACE}/artifacts",
                                                            force: true
                                                          )
                                                        sh("rm -rf $WORKSPACE/$distribution && mv -v $WORKSPACE/artifacts/${artifactPath} $WORKSPACE")
                                                    }
                                                    else {
                                                        echo "Not on Windows, unstash repository+artifacts"
                                                    }

                                                    sh('rm -rf test-results')
                                                    runIntegTestScript(
                                                        jobName: "$BUILD_JOB_NAME",
                                                        componentName: "${local_component}",
                                                        buildManifest: "$BUILD_MANIFEST",
                                                        testManifest: "manifests/${TEST_MANIFEST}",
                                                        localPath: "${WORKSPACE}/${distribution}",
                                                        switchUserNonRoot: "${switch_user_non_root}"
                                                    )
                                                    String closeCommentMessage = "Closing the issue as the Integration Test passed for ${local_component}<br>Version: ${version}<br>Distribution: ${distribution}<br>Architecture: ${architecture}<br>Platform: ${platform}<br><br>Please check the logs: ${RUN_DISPLAY_URL}<br><br> *"
                                                    if (env.distribution == 'tar') {
                                                        closeGithubIssue(
                                                            repoUrl: buildManifestObj.getRepo("${local_component}"),
                                                            issueTitle: "[AUTOCUT] Integration Test failed for ${local_component}: ${version} ${distribution} distribution",
                                                            closeComment: closeCommentMessage,
                                                            label: "autocut,v${version},integ-test-failure"
                                                        )
                                                    }
                                                }
                                            } catch (e) {
                                                echo "Error running integtest for component ${local_component}, creating Github issue"
                                                String issueBodyMessage = "The integration test failed at distribution level for component ${local_component}<br>Version: ${version}<br>Distribution: ${distribution}<br>Architecture: ${architecture}<br>Platform: ${platform}<br><br>Please check the logs: ${RUN_DISPLAY_URL}<br><br> * Test-report manifest:*<br> - https://ci.opensearch.org/ci/dbc/${JOB_NAME}/${version}/${buildId}/${platform}/${architecture}/${distribution}/test-results/${BUILD_NUMBER}/integ-test/test-report.yml <br><br> _Note: Steps to reproduce, additional logs and other files can be found within the above test-report manifest. <br>Instructions of this test-report manifest can be found [here](https://github.com/opensearch-project/opensearch-build/tree/main/src/report_workflow#guide-on-test-report-manifest-from-ci)._"
                                                if (env.distribution == 'tar') {
                                                    createGithubIssue(
                                                        repoUrl: buildManifestObj.getRepo("${local_component}"),
                                                        issueTitle: "[AUTOCUT] Integration Test failed for ${local_component}: ${version} ${distribution} distribution",
                                                        issueBody: issueBodyMessage,
                                                        label: "autocut,v${version},integ-test-failure"
                                                    )
                                                }
                                                throw new Exception("Error running integtest for component ${local_component}", e)
                                            } finally {
                                                echo "Completed running integtest for component ${local_component}"
                                                uploadTestResults(
                                                    buildManifestFileName: BUILD_MANIFEST,
                                                    jobName: JOB_NAME
                                                )
                                                postCleanup()
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    parallel componentTests
                }
            }
            post {
                always {
                    script {
                        node(AGENT_LABEL) {
                            docker.withRegistry('https://public.ecr.aws/') {
                                docker.image(docker_images["$distribution"]).inside(docker_args["$distribution"]) {
                                    checkout scm

                                    downloadBuildManifest(
                                        url: BUILD_MANIFEST_URL,
                                        path: BUILD_MANIFEST
                                    )

                                    createUploadTestReportManifest(
                                        testManifest: "manifests/${TEST_MANIFEST}",
                                        buildManifest: BUILD_MANIFEST,
                                        testRunID: "${env.BUILD_NUMBER}",
                                        testType: "integ-test",
                                        componentName: "${COMPONENT_NAME}",
                                    )
                                    echo("Download report manifest from https://ci.opensearch.org/ci/dbc/integ-test/${env.version}/${env.buildId}/${env.platform}/${env.architecture}/${env.distribution}/test-results/${env.BUILD_NUMBER}/integ-test/test-report.yml")
                                    archiveArtifacts artifacts: 'test-report.yml'
                                }
                            }
                        }
                    }
                    postCleanup()
                }
            }
        }
    }

    post {
        success {
            node(AGENT_LABEL) {
                script {
                    def stashed = lib.jenkins.Messages.new(this).get(['integ-test'])
                    publishNotification(
                        icon: ':white_check_mark:',
                        message: 'Integration Tests Successful',
                        extra: stashed,
                        credentialsId: 'jenkins-integ-test-webhook',
                        manifest: TEST_MANIFEST,
                    )

                    postCleanup()
                }
            }
        }
        failure {
            node(AGENT_LABEL) {
                script  {
                    def stashed = lib.jenkins.Messages.new(this).get(['integ-test'])
                    publishNotification(
                        icon: ':warning:',
                        message: 'Failed Integration Tests',
                        extra: stashed,
                        credentialsId: 'jenkins-integ-test-webhook',
                        manifest: TEST_MANIFEST,
                    )

                    postCleanup()
                }
            }
        }
    }
}

lib = library(identifier: "jenkins@20211123", retriever: legacySCM(scm))

pipeline {
    agent none
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0.yml.',
            trim: true
        )
    }
    stages {
        stage('detect docker image + args') {
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028'
                    alwaysPull true
                }
            }
            steps {
                script {
                    dockerAgent = detectDockerAgent()
                    currentBuild.description = "$INPUT_MANIFEST"
                }
            }
        }
        stage('build') {
            parallel {
                stage('build-snapshot-x64') {
                    environment {
                        SNAPSHOT_REPO_URL = "https://aws.oss.sonatype.org/content/repositories/snapshots/"
                    }
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            git url: 'https://github.com/opensearch-project/opensearch-build.git', branch: 'main'
                            buildManifest(
                                snapshot: true
                            )
                            if (fileExists("$WORKSPACE/builds/opensearch/maven")) {
                                withCredentials([usernamePassword(credentialsId: 'Sonatype', usernameVariable: 'SONATYPE_USERNAME', passwordVariable: 'SONATYPE_PASSWORD')]) {
                                    sh('$WORKSPACE/publish/publish-snapshot.sh $WORKSPACE/builds/opensearch/maven')
                                }
                            } else {
                                echo "Skipping publishing snapshots, builds/opensearch/maven does not exist."
                            }
                            echo("Uploading min snapshots to S3")
                            uploadMinSnapshotsToS3(
                                fileActions: [createSha512Checksums()]
                            )
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-snapshot-arm64') {
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            git url: 'https://github.com/opensearch-project/opensearch-build.git', branch: 'main'
                            buildManifest(
                                snapshot: true
                            )
                            echo("Uploading min snapshots to S3")
                            uploadMinSnapshotsToS3(
                                fileActions: [createSha512Checksums()]
                            )
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-x64') {
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            buildAssembleUpload()
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-arm64') {
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            buildAssembleUpload()
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
            }
        }
        stage('docker build') {
            steps {
                node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                    script {
                        buildDockerImage()
                    }
                }
            }
        }
    }
    post {
        success {
            node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                script {
                    def stashed = lib.jenkins.Messages.new(this).get(['build-x64', 'build-arm64'])

                    publishNotification(
                        icon: ':white_check_mark:',
                        message: 'Successful Build',
                        extra: stashed,
                        credentialsId: 'BUILD_NOTICE_WEBHOOK',
                        manifest: "${INPUT_MANIFEST}"
                    )

                    postCleanup()
                }
            }
        }
        failure {
            node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                script {
                    publishNotification(
                        icon: ':warning:',
                        message: 'Failed Build',
                        credentialsId: 'BUILD_NOTICE_WEBHOOK',
                        manifest: "${INPUT_MANIFEST}"
                    )

                    postCleanup()
                }
            }
        }
    }
}

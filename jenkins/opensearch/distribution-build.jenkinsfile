lib = library(identifier: "jenkins@20211123", retriever: legacySCM(scm))

pipeline {
    agent none
    environment {
        AGENT_X64 = 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
        AGENT_ARM64 = 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
    }
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0.yml.',
            trim: true
        )
        string(
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0-test.yml.',
            trim: true
        )
        string(
            name: 'INTEG_TEST_JOB_NAME',
            description: "Name of integration test job that will be triggered, e.g. Playground/integ-test. A non-null empty value here will skip integration tests.",
            defaultValue: "integ-test",
            trim: true
        )
        string(
            name: 'BWC_TEST_JOB_NAME',
            description: "Name of backwards compatibility test job that will be triggered, e.g. Playground/bwc-test.  A non-null empty value here will skip BWC tests.",
            defaultValue: "bwc-test",
            trim: true
        )
        booleanParam(
            name: 'BUILD_DOCKER',
            description: 'Build docker image or not.',
            defaultValue: true
        )
        booleanParam(
            name: 'PUBLISH_NOTIFICATION',
            description: 'Publish the status of this build job or not.',
            defaultValue: true
        )
    }
    stages {
        stage('detect docker image + args') {
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028'
                    alwaysPull true
                }
            }
            steps {
                script {
                    dockerAgent = detectDockerAgent()
                    currentBuild.description = INPUT_MANIFEST
                }
            }
        }
        stage('build') {
            parallel {
                stage('build-snapshot-x64-tar') {
                    environment {
                        SNAPSHOT_REPO_URL = "https://aws.oss.sonatype.org/content/repositories/snapshots/"
                    }
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            git url: 'https://github.com/tianleh/opensearch-build.git', branch: 'add-new-folder'
                            buildManifest(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                distribution: 'tar',
                                snapshot: true
                            )

                            String mavenPath = "$WORKSPACE/tar/builds/opensearch/maven"

                            if (fileExists(mavenPath)) {
                                withCredentials([usernamePassword(credentialsId: 'Sonatype', usernameVariable: 'SONATYPE_USERNAME', passwordVariable: 'SONATYPE_PASSWORD')]) {
                                    sh("$WORKSPACE/publish/publish-snapshot.sh ${mavenPath}")
                                }
                            } else {
                                echo "Skipping publishing snapshots, ${mavenPath} does not exist."
                            }
                            echo("Uploading min snapshots to S3")
                            uploadMinSnapshotsToS3(
                                fileActions: [createSha512Checksums()],
                                distribution: 'tar'
                            )
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-snapshot-x64-rpm') {
                    environment {
                        SNAPSHOT_REPO_URL = "https://aws.oss.sonatype.org/content/repositories/snapshots/"
                    }
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            git url: 'https://github.com/tianleh/opensearch-build.git', branch: 'add-new-folder'
                            buildManifest(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                distribution: 'rpm',
                                snapshot: true
                            )

                            String mavenPath = "$WORKSPACE/builds/opensearch/rpm/maven"

                            if (fileExists(mavenPath)) {
                                withCredentials([usernamePassword(credentialsId: 'Sonatype', usernameVariable: 'SONATYPE_USERNAME', passwordVariable: 'SONATYPE_PASSWORD')]) {
                                    sh("$WORKSPACE/publish/publish-snapshot.sh ${mavenPath}")
                                }
                            } else {
                                echo "Skipping publishing snapshots, ${mavenPath} does not exist."
                            }
                            echo("Uploading min snapshots to S3")
                            uploadMinSnapshotsToS3(
                                fileActions: [createSha512Checksums()],
                                distribution: 'rpm'
                            )
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-snapshot-arm64-tar') {
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            git url: 'https://github.com/tianleh/opensearch-build.git', branch: 'add-new-folder'
                            buildManifest(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                distribution: 'tar',
                                snapshot: true
                            )
                            echo("Uploading min snapshots to S3")
                            uploadMinSnapshotsToS3(
                                fileActions: [createSha512Checksums()],
                                distribution: 'tar'
                            )
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-snapshot-arm64-rpm') {
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            git url: 'https://github.com/tianleh/opensearch-build.git', branch: 'add-new-folder'
                            buildManifest(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                distribution: 'rpm',
                                snapshot: true
                            )
                            echo("Uploading min snapshots to S3")
                            uploadMinSnapshotsToS3(
                                fileActions: [createSha512Checksums()],
                                distribution: 'rpm'
                            )
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-and-test-x64-tar') {
                    agent {
                        docker {
                            label AGENT_X64
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            def buildManifestObj = buildAssembleUpload(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                distribution: "tar"
                            )
                            String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                            env.ARTIFACT_URL_X64_TAR = artifactUrl

                            echo "buildManifestUrl (x64, tar): ${buildManifestUrl}"
                            echo "artifactUrl (x64, tar): ${artifactUrl}"

                            parallel([
                                'integ-test': {
                                    Boolean skipIntegTests = INTEG_TEST_JOB_NAME == ''
                                    echo "${skipIntegTests ? 'Skipping integration tests' : 'Running integration tests'}"
                                    if (!skipIntegTests) {
                                        def integTestResults =
                                            build job: INTEG_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_X64)
                                            ]

                                        createTestResultsMessage(
                                            testType: "Integ Tests (x64, tar)",
                                            status: integTestResults.getResult(),
                                            absoluteUrl: integTestResults.getAbsoluteUrl()
                                        )
                                    }
                                },
                                'bwc-test': {
                                    Boolean skipBwcTests = BWC_TEST_JOB_NAME == ''
                                    echo "${skipBwcTests ? 'Skipping BWC tests' : 'Running BWC tests'}"
                                    if (!skipBwcTests) {
                                        def bwcTestResults =
                                            build job: BWC_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_X64)
                                            ]

                                        createTestResultsMessage(
                                            testType: "BWC Tests (x64, tar)",
                                            status: bwcTestResults.getResult(),
                                            absoluteUrl: bwcTestResults.getAbsoluteUrl()
                                        )
                                    }
                                }
                            ])
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-and-test-x64-rpm') {
                    agent {
                        docker {
                            label AGENT_X64
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            def buildManifestObj = buildAssembleUpload(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                distribution: "rpm"
                            )
                            String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                            env.ARTIFACT_URL_X64_RPM = artifactUrl

                            echo "buildManifestUrl (x64, rpm): ${buildManifestUrl}"
                            echo "artifactUrl (x64, rpm): ${artifactUrl}"
                            
                            parallel([
                                'integ-test': {
                                    Boolean skipIntegTests = INTEG_TEST_JOB_NAME == ''
                                    echo "${skipIntegTests ? 'Skipping integration tests' : 'Running integration tests'}"
                                    if (!skipIntegTests) {
                                        def integTestResults =
                                            build job: INTEG_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_X64)
                                            ]

                                        createTestResultsMessage(
                                            testType: "Integ Tests (x64, rpm)",
                                            status: integTestResults.getResult(),
                                            absoluteUrl: integTestResults.getAbsoluteUrl()
                                        )
                                },
                                'bwc-test': {
                                    Boolean skipBwcTests = BWC_TEST_JOB_NAME == ''
                                    echo "${skipBwcTests ? 'Skipping BWC tests' : 'Running BWC tests'}"
                                    if (!skipBwcTests) {
                                        def bwcTestResults =
                                            build job: BWC_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_X64)
                                            ]

                                        createTestResultsMessage(
                                            testType: "BWC Tests (x64, rpm)",
                                            status: bwcTestResults.getResult(),
                                            absoluteUrl: bwcTestResults.getAbsoluteUrl()
                                        )
                                    }
                                }
                            ])
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-and-test-arm64-tar') {
                    agent {
                        docker {
                            label AGENT_ARM64
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            def buildManifestObj = buildAssembleUpload(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                distribution: "tar"
                            )
                            String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                            env.ARTIFACT_URL_ARM64_TAR = artifactUrl

                            echo "buildManifestUrl (arm64, tar): ${buildManifestUrl}"
                            echo "artifactUrl (arm64, tar): ${artifactUrl}"

                            parallel([
                                'integ-test': {
                                    Boolean skipIntegTests = INTEG_TEST_JOB_NAME == ''
                                    echo "${skipIntegTests ? 'Skipping integration tests' : 'Running integration tests'}"
                                    if (!skipIntegTests) {
                                        def integTestResults =
                                            build job: INTEG_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_ARM64)
                                            ]

                                        createTestResultsMessage(
                                            testType: "Integ Tests (arm64, tar)",
                                            status: integTestResults.getResult(),
                                            absoluteUrl: integTestResults.getAbsoluteUrl()
                                        )
                                    }
                                },
                                'bwc-test': {
                                    Boolean skipBwcTests = BWC_TEST_JOB_NAME == ''
                                    echo "${skipBwcTests ? 'Skipping BWC tests' : 'Running BWC tests'}"
                                    if (!skipBwcTests) {
                                        def bwcTestResults =
                                            build job: BWC_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_ARM64)
                                            ]

                                        createTestResultsMessage(
                                            testType: "BWC Tests (arm64, tar)",
                                            status: bwcTestResults.getResult(),
                                            absoluteUrl: bwcTestResults.getAbsoluteUrl()
                                        )
                                    }
                                }
                            ])
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
                stage('build-and-test-arm64-rpm') {
                    agent {
                        docker {
                            label AGENT_ARM64
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            def buildManifestObj = buildAssembleUpload(
                                inputManifest: "manifests/${INPUT_MANIFEST}",
                                distribution: "rpm"
                            )
                            String buildManifestUrl = buildManifestObj.getUrl(JOB_NAME, BUILD_NUMBER)
                            String artifactUrl = buildManifestObj.getArtifactUrl(JOB_NAME, BUILD_NUMBER)
                            env.ARTIFACT_URL_ARM64_RPM = artifactUrl

                            echo "buildManifestUrl (arm64, rpm): ${buildManifestUrl}"
                            echo "artifactUrl (arm64, rpm): ${artifactUrl}"

                            parallel([
                                'integ-test': {
                                    Boolean skipIntegTests = INTEG_TEST_JOB_NAME == ''
                                    echo "${skipIntegTests ? 'Skipping integration tests' : 'Running integration tests'}"
                                    if (!skipIntegTests) {
                                        def integTestResults =
                                            build job: INTEG_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_ARM64)
                                            ]

                                        createTestResultsMessage(
                                            testType: "Integ Tests (arm64, rpm)",
                                            status: integTestResults.getResult(),
                                            absoluteUrl: integTestResults.getAbsoluteUrl()
                                        )
                                    }
                                },
                                'bwc-test': {
                                    Boolean skipBwcTests = BWC_TEST_JOB_NAME == ''
                                    echo "${skipBwcTests ? 'Skipping BWC tests' : 'Running BWC tests'}"
                                    if (!skipBwcTests) {
                                        def bwcTestResults =
                                            build job: BWC_TEST_JOB_NAME,
                                            propagate: false,
                                            wait: true,
                                            parameters: [
                                                string(name: 'TEST_MANIFEST', value: TEST_MANIFEST),
                                                string(name: 'BUILD_MANIFEST_URL', value: buildManifestUrl),
                                                string(name: 'AGENT_LABEL', value: AGENT_ARM64)
                                            ]

                                        createTestResultsMessage(
                                            testType: "BWC Tests (arm64, rpm)",
                                            status: bwcTestResults.getResult(),
                                            absoluteUrl: bwcTestResults.getAbsoluteUrl()
                                        )
                                    }
                                }
                            ])
                        }
                    }
                    post {
                        always {
                            postCleanup()
                        }
                    }
                }
            }
        }
        stage('docker build') {
            when {
                beforeAgent true
                expression { 
                    return params.BUILD_DOCKER
                }
            }
            steps {
                node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                    script {

                        echo "env.ARTIFACT_URL_X64_TAR: ${env.ARTIFACT_URL_X64_TAR}"
                        echo "env.ARTIFACT_URL_ARM64_TAR: ${env.ARTIFACT_URL_ARM64_TAR}"
                        
                        buildDockerImage(
                            inputManifest: "manifests/${INPUT_MANIFEST}",
                            artifactUrlX64: env.ARTIFACT_URL_X64_TAR,
                            artifactUrlArm64: env.ARTIFACT_URL_ARM64_TAR
                        )
                    }
                }
            }
        }
    }
    post {
        success {
            node(AGENT_X64) {
                script {
                    if (params.PUBLISH_NOTIFICATION) { 
                        def stashed = lib.jenkins.Messages.new(this).get([
                            'build-and-test-x64-tar', 
                            'build-and-test-arm64-tar', 
                            'build-and-test-x64-rpm', 
                            'build-and-test-arm64-rpm'
                        ])

                        publishNotification(
                            icon: ':white_check_mark:',
                            message: 'Successful Build',
                            extra: stashed,
                            credentialsId: 'BUILD_NOTICE_WEBHOOK',
                            manifest: "${INPUT_MANIFEST}"
                        )
                    }

                    postCleanup()
                }
            }
        }
        failure {
            node(AGENT_X64) {
                script {
                    if (params.PUBLISH_NOTIFICATION) { 
                        publishNotification(
                            icon: ':warning:',
                            message: buildFailureMessage(),
                            credentialsId: 'BUILD_NOTICE_WEBHOOK',
                            manifest: "${INPUT_MANIFEST}"
                        )
                    }

                    postCleanup()
                }
            }
        }
    }
}

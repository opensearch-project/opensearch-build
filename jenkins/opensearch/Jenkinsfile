lib = library(identifier: "jenkins@20211122", retriever: legacySCM(scm))

pipeline {
    agent none
    triggers {
        parameterizedCron '''
            H */2 * * * %INPUT_MANIFEST=1.3.0/opensearch-1.3.0.yml
            H 1 * * * %INPUT_MANIFEST=2.0.0/opensearch-2.0.0.yml
        '''
    }
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0.yml.',
            trim: true
        )
    }
    stages {
        stage('detect docker image + args') {
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028'
                    alwaysPull true
                }
            }
            steps {
                script { 
                    git url: 'https://github.com/opensearch-project/opensearch-build.git', branch: 'main'
                    def inputManifest = lib.jenkins.InputManifest.new(readYaml(file: "manifests/$INPUT_MANIFEST"))
                    dockerImage = inputManifest.ci.image.name
                    dockerArgs = inputManifest.ci.image.args ?: '-e JAVA_HOME=/usr/lib/jvm/adoptopenjdk-14-hotspot'
                    echo "Using Docker image ${dockerImage} (${dockerArgs})"
                }
            }
        }
        stage('build') {
            parallel {
                stage('build-snapshots') {
                    environment {
                        SNAPSHOT_REPO_URL = "https://aws.oss.sonatype.org/content/repositories/snapshots/"
                    }
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                            image dockerImage
                            args dockerArgs
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            git url: 'https://github.com/opensearch-project/opensearch-build.git', branch: 'main'
                            buildManifest(
                                snapshot: true
                            )
                            withCredentials([usernamePassword(credentialsId: 'Sonatype', usernameVariable: 'SONATYPE_USERNAME', passwordVariable: 'SONATYPE_PASSWORD')]) {
                                sh('$WORKSPACE/publish/publish-snapshot.sh $WORKSPACE/builds/maven')
                            }
                        }
                    }
                    post() {
                        always {
                            cleanWs disableDeferredWipeout: true, deleteDirs: true
                        }
                    }
                }
                stage('build-x64') {
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                            image dockerImage
                            args dockerArgs
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            buildAssembleUpload()
                        }
                    }
                    post() {
                        always {
                            cleanWs disableDeferredWipeout: true, deleteDirs: true
                        }
                    }
                }
                stage('build-arm64') {
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
                            image dockerImage
                            args dockerArgs
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            buildAssembleUpload()
                        }
                    }
                    post() {
                        always {
                            cleanWs disableDeferredWipeout: true, deleteDirs: true
                        }
                    }
                }
            }
        }
        stage('docker build') {
            steps {
                node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                    script {
                        git url: 'https://github.com/opensearch-project/opensearch-build.git', branch: 'main'
                        def inputManifest = lib.jenkins.InputManifest.new(readYaml(file: "manifests/$INPUT_MANIFEST"))
                        dockerBuild: {
                            build job: 'docker-build',
                            parameters: [
                                string(name: 'DOCKER_BUILD_GIT_REPOSITORY', value: 'https://github.com/opensearch-project/opensearch-build'),
                                string(name: 'DOCKER_BUILD_GIT_REPOSITORY_REFERENCE', value: 'main'),
                                string(name: 'DOCKER_BUILD_SCRIPT_WITH_COMMANDS', value: [
                                        'id',
                                        'pwd',
                                        'cd docker/release',
                                        "curl -sSL ${inputManifest.getPublicDistUrl(env.PUBLIC_ARTIFACT_URL, env.JOB_NAME, env.BUILD_NUMBER, 'linux','x64')} -o opensearch-x64.tgz",
                                        "curl -sSL ${inputManifest.getPublicDistUrl(env.PUBLIC_ARTIFACT_URL, env.JOB_NAME, env.BUILD_NUMBER, 'linux','arm64')} -o opensearch-arm64.tgz",
                                        "bash build-image-multi-arch.sh -v ${inputManifest.build.version} -f ./dockerfiles/opensearch.al2.dockerfile -p opensearch -a 'x64,arm64' -r opensearchstaging/opensearch -t 'opensearch-x64.tgz,opensearch-arm64.tgz' -n ${env.BUILD_NUMBER}"
                                    ].join(" && ")),
                                booleanParam(name: 'IS_STAGING', value: true)
                            ]
                        }
                    }
                }
            }
        }
    }
    post() {
        success {
            node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                script {
                    def stashed = lib.jenkins.Messages.new(this).get(['build-x64', 'build-arm64'])
                    publishNotification(
                        icon: ':white_check_mark:',
                        message: 'Successful Build',
                        extra: stashed,
                        credentialsId: 'BUILD_NOTICE_WEBHOOK'
                    )

                    cleanWs(
                        disableDeferredWipeout: true,
                        deleteDirs: true
                    )
                }
            }
        }
        failure {
            node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                script {
                    publishNotification(
                        icon: ':warning:',
                        message: 'Failed Build',
                        credentialsId: 'BUILD_NOTICE_WEBHOOK'
                    )

                    cleanWs(
                        disableDeferredWipeout: true,
                        deleteDirs: true
                    )
                }
            }
        }
    }
}

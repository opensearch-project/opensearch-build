lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    agent {
        docker {
            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
            image 'opensearchstaging/ci-runner:ci-runner-centos7-v1'
            alwaysPull true
        }
    }
    parameters {
        string(name: 'VERSION', description: 'The version of Data Prepper', trim: true)
        string(name: 'BRANCH', description: 'Can be: <branchName>, <commitId>, refs/tags/<tagName>', trim: true)
    }
    stages {
        stage('Build Data Prepper') {
            steps {
                script {
                    checkout changelog: false, poll: false, scm:
                            [$class: 'GitSCM', branches: [[name: BRANCH]], userRemoteConfigs: [[url: 'https://github.com/opensearch-project/data-prepper.git']]]
                    sh './gradlew clean :release:archives:linux:linuxTar -Prelease'
                }
                artifactFileNames = sh(script: "find $WORKSPACE/release/archives/linux/build/distributions/ -type f", returnStdout: true).split()
            }
        }
        stage('Sign Artifacts') {
            steps {
                script {
                    signatureType = '.sig'
                    signArtifacts(
                        artifactPath: "$WORKSPACE/release/archives/linux/build/distributions/",
                        signatureType: signatureType,
                        distributionPlatform: 'linux'
                    )
                }
            }
        }
        stage('Upload Artifacts to Staging Distribution Bucket') {
            steps {
                script {
                    finalUploadPath = ([
                            "${JOB_NAME}",
                            "${VERSION}",
                            "${BUILD_NUMBER}",
                            "builds",
                            "signed"
                    ].join('/'))

                    uploadToS3(
                        sourcePath: "$WORKSPACE/release/archives/linux/build/distributions/",
                        bucket: "${ARTIFACT_BUCKET_NAME}",
                        path: finalUploadPath
                    )
                    printUrls(artifactFileNames)
                }
            }
        }
    }
    post() {
        always {
            script {
                postCleanup()
            }
        }
    }
}

void printUrls(artifactFileNames){

    println("Note: only supported file types will be signed")

    for(filename in artifactFileNames){

        println("Artifacts can be accessed using the url - https://ci.opensearch.org/ci/dbc/${finalUploadPath}/${filename}" )
        println("Signatures can be accessed using the url - https://ci.opensearch.org/ci/dbc/${finalUploadPath}/${filename}${signatureType}" )

    }

}

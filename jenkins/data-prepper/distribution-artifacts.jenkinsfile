lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    agent {
        docker {
            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
            image 'opensearchstaging/ci-runner:ci-runner-centos7-v1'
            alwaysPull true
        }
    }
    parameters {
        string(name: 'VERSION', description: 'The version of Data Prepper', trim: true)
        string(name: 'BRANCH', description: 'Can be: <branchName>, <commitId>, refs/tags/<tagName>', trim: true)
    }
    stages {
        stage('Build Data Prepper') {
            steps {
                script {
                    checkout changelog: false, poll: false, scm:
                            [$class: 'GitSCM', branches: [[name: BRANCH]], userRemoteConfigs: [[url: 'https://github.com/opensearch-project/data-prepper.git']]]
                    sh './gradlew clean :release:archives:linux:linuxTar -Prelease'
                    artifactsPath = "$WORKSPACE/release/archives/linux/build/distributions"
                    artifactFilenames = sh(script: "find ${artifactsPath} | sed -n \"s|^${artifactsPath}/||p\"", returnStdout: true).split()
                }
            }
        }
        stage('Sign Artifacts') {
            steps {
                script {
                    signatureType = '.sig'
                    signArtifacts(
                            artifactPath: "${artifactsPath}",
                            sigtype: signatureType,
                            platform: 'linux'
                    )
                    filenamesForUrls = []
                    for(artifactFilename in artifactFilenames){
                        filenamesForUrls.add(artifactFilename)
                        filenamesForUrls.add(artifactFilename + signatureType)
                    }
                }
            }
        }
        stage('Upload Artifacts to Staging Distribution Bucket') {
            steps {
                script {
                    uploadPath = ([
                            "${JOB_BASE_NAME}",
                            "${VERSION}",
                            "${BUILD_NUMBER}",
                            "builds",
                            "signed"
                    ].join('/'))

                    uploadToS3(
                            sourcePath: "${artifactsPath}",
                            bucket: "${ARTIFACT_BUCKET_NAME}",
                            path: uploadPath
                    )
                    printArtifactDownloadUrlsForStaging(
                            artifactFileNames: filenamesForUrls,
                            uploadPath: uploadPath
                    )
                }
            }
        }
    }
    post() {
        always {
            script {
                postCleanup()
            }
        }
    }
}

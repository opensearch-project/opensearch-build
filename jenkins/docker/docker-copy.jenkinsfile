lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    agent none  
    parameters {
        string(
            name: 'SOURCE_IMAGE',
            description: 'Complete source image path Eg: opensearchproject/<IMAGE_NAME>:<IMAGE_TAG>',
            trim: true
        )
        choice(
            name: 'DESTINATION_IMAGE_REGISTRY', 
            choices: ['docker', 'ecr'],
            description: '''
            Default is always staging registry, unless the below prod flag is enabled
            Staging-DockerHub: opensearchstaging/<IMAGE_NAME>:<IMAGE_TAG>
            Staging-ECR: public.ecr.aws/opensearchstaging/<IMAGE_NAME>:<IMAGE_TAG>
            Prod-DockerHub: opensearchproject/<IMAGE_NAME>:<IMAGE_TAG>
            Prod-ECR: public.ecr.aws/opensearchproject/<IMAGE_NAME>:<IMAGE_TAG>
            '''
        )
        string(
            name: 'DESTINATION_IMAGE',
            description: 'Image name and tag <IMAGE_NAME>:<IMAGE_TAG> Eg opensearch:1.3.2',
            trim: true
        )
        booleanParam(
            name: 'prod',
            description: '''
            To copy images to DockerHub and ECR prod registries.
            '''
        )
    }
    stages {
        stage("Docker Image Promote") {
            agent {
                    docker {
                        label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                        image 'opensearchstaging/ci-runner:ubuntu2004-x64-docker-buildx0.6.3-qemu5.0-awscli1.22-jdk11-v2'
                        args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
                    }
            }
            stages {
                stage('Image Copy') {
                    steps {
                        script {
                            copyContainer(
                                sourceImage: "${SOURCE_IMAGE}",
                                destinationImage: "${DESTINATION_IMAGE}",
                                destinationRegistry: "${DESTINATION_IMAGE_REGISTRY}",
                                prod: "$prod".toBoolean()
                            )
                        }
                    }
                }
            }  
            post() {
                always {
                    script {
                        postCleanup()
                        sh "docker image prune -f --all"
                    }
                }
            }     
        }
    }
}

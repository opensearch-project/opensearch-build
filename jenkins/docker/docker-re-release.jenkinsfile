/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

lib = library(identifier: 'jenkins@9.6.0', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

pipeline {
    options {
        timeout(time: 2, unit: 'HOURS')
    }
    agent none
    triggers {
        parameterizedCron '''
            H 19 15 * * %PRODUCT=opensearch;TAG=3
            H 19 15 * * %PRODUCT=opensearch-dashboards;TAG=3
            H 19 15 * * %PRODUCT=opensearch;TAG=2
            H 19 15 * * %PRODUCT=opensearch-dashboards;TAG=2
        '''
    }
    parameters {
        choice(
            name: 'PRODUCT',
            choices: ['opensearch', 'opensearch-dashboards'],
            description: "Choose the product type among OpenSearch / OpenSearch-Dashboards."
        )
        choice(
            name: 'TAG',
            choices: ['2', '3'],
            description: "Choose the tag of the Product.",
        )
    }
    stages {
        stage("Docker re-release") {
            agent {
                docker {
                    label 'Jenkins-Agent-Ubuntu2404-X64-M52xlarge-Docker-Builder'
                    image 'opensearchstaging/ci-runner:ubuntu2404-x64-docker-buildx0.9.1-qemu8.2-v1'
                    args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
                    registryUrl 'https://public.ecr.aws/'
                    alwaysPull true
                }
            }
            stages {
                stage('Patch Docker Image') {
                    steps {
                        script {
                            patchDockerImage(
                                product: "${PRODUCT}",
                                tag: "${TAG}"
                            )
                        }
                    }
                    post {
                        always {
                            postCleanup()
                            sh("docker image prune -f --all")
                        }
                    }
                }
            }
        }
    }
}

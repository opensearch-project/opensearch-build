lib = library(identifier: "jenkins@20211123", retriever: legacySCM(scm))

pipeline {
    options {
        buildDiscarder(logRotator(daysToKeepStr: '7'))
    }
    agent none
    triggers {
        parameterizedCron '''
            H/10 * * * * %INPUT_MANIFEST=1.3.0/opensearch-dashboards-1.3.0.yml;TARGET_JOB_NAME=distribution-build-opensearch-dashboards
            H/10 * * * * %INPUT_MANIFEST=1.2.4/opensearch-1.2.4.yml;TEST_MANIFEST=1.2.4/opensearch-1.2.4-test.yml;TARGET_JOB_NAME=distribution-build-opensearch
            H/10 * * * * %INPUT_MANIFEST=1.3.0/opensearch-1.3.0.yml;TEST_MANIFEST=1.3.0/opensearch-1.3.0-test.yml;TARGET_JOB_NAME=distribution-build-opensearch
            H 1 * * * %INPUT_MANIFEST=1.1.1/opensearch-1.1.1.yml;TEST_MANIFEST=1.1.1/opensearch-1.1.1-test.yml;TARGET_JOB_NAME=distribution-build-opensearch
            H 1 * * * %INPUT_MANIFEST=1.1.1/opensearch-dashboards-1.1.1.yml;TARGET_JOB_NAME=distribution-build-opensearch-dashboards
            H 1 * * * %INPUT_MANIFEST=1.2.1/opensearch-1.2.1.yml;TEST_MANIFEST=1.2.1/opensearch-1.2.1-test.yml;TARGET_JOB_NAME=distribution-build-opensearch
            H 1 * * * %INPUT_MANIFEST=1.2.2/opensearch-1.2.2.yml;TEST_MANIFEST=1.2.2/opensearch-1.2.2-test.yml;TARGET_JOB_NAME=distribution-build-opensearch
            H 1 * * * %INPUT_MANIFEST=1.2.3/opensearch-1.2.3.yml;TEST_MANIFEST=1.2.3/opensearch-1.2.3-test.yml;TARGET_JOB_NAME=distribution-build-opensearch
            H 1 * * * %INPUT_MANIFEST=2.0.0/opensearch-2.0.0.yml;TEST_MANIFEST=2.0.0/opensearch-2.0.0-test.yml;TARGET_JOB_NAME=distribution-build-opensearch
            H 1 * * * %INPUT_MANIFEST=2.0.0/opensearch-dashboards-2.0.0.yml;TARGET_JOB_NAME=distribution-build-opensearch-dashboards
        '''
    }
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0.yml.',
            trim: true
        )
        string(
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0-test.yml. Currently only applicable for distribution-build-opensearch job',
            trim: true
        )
        string(
            name: 'TARGET_JOB_NAME',
            description: 'Job to trigger if build has changed',
            trim: true
        )
    }
    stages {
        stage('detect docker image + args') {
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028'
                    alwaysPull true
                }
            }
            steps {
                script { 
                    dockerAgent = detectDockerAgent()
                }
            }
        }
        stage('trigger-build-if-needed') {
            agent {
                docker {
                    label 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
                    image dockerAgent.image
                    args dockerAgent.args
                    alwaysPull true
                }
            }
            steps {
                script {
                    lock(resource: "CheckForBuild-${INPUT_MANIFEST}-${TARGET_JOB_NAME}", skipIfLocked: true) {
                        def sha = getManifestSHA(
                            inputManifest: "manifests/${INPUT_MANIFEST}",
                            jobName: "${TARGET_JOB_NAME}"
                        )
                        if (sha.exists) {
                            echo "Skipping, ${sha.path} already exists."
                        } else {
                            try {
                                // Currently only opensearch build takes an additional test manifest parameter
                                if (TARGET_JOB_NAME == 'distribution-build-opensearch') {
                                    build job: "${TARGET_JOB_NAME}", parameters: [
                                    string(name: 'INPUT_MANIFEST', value: "${INPUT_MANIFEST}"),
                                    string(name: 'TEST_MANIFEST', value: "${TEST_MANIFEST}")
                                    ], wait: true
                                } else if (TARGET_JOB_NAME == 'distribution-build-opensearch-dashboards') {
                                    build job: "${TARGET_JOB_NAME}", parameters: [
                                    string(name: 'INPUT_MANIFEST', value: "${INPUT_MANIFEST}")
                                    ], wait: true
                                }
                                echo "Build succeeded, uploading build SHA for that job"
                                buildUploadManifestSHA(
                                    inputManifest: "manifests/${INPUT_MANIFEST}",
                                    jobName: "${TARGET_JOB_NAME}"
                                )
                            } catch (err) {
                                echo "${TARGET_JOB_NAME} failed"
                            }
                        }
                    }
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
    }
    post {
        failure {
            node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                script {
                    publishNotification(
                        icon: ':warning:',
                        message: 'Failed checking for build to trigger',
                        credentialsId: 'BUILD_NOTICE_WEBHOOK',
                        manifest: "${INPUT_MANIFEST}",
                        target_job_name: "${TARGET_JOB_NAME}"
                    )

                    postCleanup()
                }
            }
        }
    }
}

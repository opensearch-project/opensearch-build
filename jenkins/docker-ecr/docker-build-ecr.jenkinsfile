lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    options {
        timeout(time: 3, unit: 'HOURS')
    }
    agent none
    parameters {
        string(
                defaultValue: 'https://github.com/opensearch-project/opensearch-build',
                name: 'DOCKER_BUILD_GIT_REPOSITORY',
                description: 'The git repository name that contains dockerfiles and the docker build script.',
                trim: true
        )
        string(
                defaultValue: 'main',
                name: 'DOCKER_BUILD_GIT_REPOSITORY_REFERENCE',
                description: 'The git reference (branch/tag/commit_id) of above repository.',
                trim: true
        )
        string(
                defaultValue: 'bash docker/ci/build-image-multi-arch.sh -v <TAG_NAME> -f <DOCKERFILE PATH>',
                name: 'DOCKER_BUILD_SCRIPT_WITH_COMMANDS',
                description: 'The script path of the docker build script, assuming you are already in root dir of DOCKER_BUILD_GIT_REPOSITORY.',
                trim: true
        )
        choice(
                choices: ['staging', 'production'],
                name: 'ENVIRONMENT',
                description: 'Are we pushing docker images to staging (opensearchstaging) or production (opensearchproject) account.'
        )
        string(
                name: 'SOURCE_IMAGE_IN_STAGING',
                description: 'Only required when ENVIRONMENT is Production- Staging Image tag (Source to copy the image). Eg: ci-runner:1.3.0',
                trim: true
        )
        string(
                name: 'DESTINATION_IMAGE_IN_PROD',
                description: 'Only required when ENVIRONMENT is Production - Production Image tag (Destination to copy the image to). Eg: ci-runner:1.3.0',
                trim: true
        )
    }
    stages {
        stage('check-params') {
            agent none
            steps {
                script {
                    if (env.ENVIRONMENT == 'production'
                            && (!params.SOURCE_IMAGE_IN_STAGING.contains(":") || !params.DESTINATION_IMAGE_IN_PROD.contains(":"))) {
                        currentBuild.result = 'ABORTED'
                        error('SOURCE_IMAGE_IN_STAGING parameter or DESTINATION_IMAGE_IN_PROD is incorrect')
                    }
                    if(env.ENVIRONMENT == 'staging'
                            && (params.DOCKER_BUILD_SCRIPT_WITH_COMMANDS == null
                                   || params.DOCKER_BUILD_SCRIPT_WITH_COMMANDS == 'bash docker/ci/build-image-multi-arch.sh -v <TAG_NAME> -f <DOCKERFILE PATH>')) {
                                currentBuild.result = 'ABORTED'
                                error('SOURCE_IMAGE_IN_STAGING parameter or DESTINATION_IMAGE_IN_PROD is incorrect')
                    }
                }
            }
        }
        stage('docker-build-dockerhub-staging') {
            when{
                expression{ params.ENVIRONMENT ==  'staging'}
            }
            agent {
                docker {
                    label 'Jenkins-Agent-Ubuntu2004-X64-m52xlarge-Docker-Builder'
                    image 'opensearchstaging/ci-runner:ubuntu2004-x64-docker-buildx0.6.3-qemu5.0-awscli1.22-jdk14'
                    args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
                    alwaysPull true
                }
            }
            steps {
                script {
                    git url: "$DOCKER_BUILD_GIT_REPOSITORY", branch: "$DOCKER_BUILD_GIT_REPOSITORY_REFERENCE"
                    def CREDENTIAL_ID = "jenkins-staging-docker-staging-credential"
                    withCredentials([usernamePassword(credentialsId: CREDENTIAL_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                                set -ex
                                echo Login to $CREDENTIAL_ID
                                docker logout && docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD && eval $DOCKER_BUILD_SCRIPT_WITH_COMMANDS
                            '''
                    }
                }
            }
            post() {
                always {
                    script {
                        postCleanup()
                        sh "docker logout && docker image prune -f --all"
                    }
                }
            }
        }
        stage('docker-build-dockerhub-production') {
            when {
                expression { params.ENVIRONMENT == 'production' }
            }
            agent {
                docker {
                    label 'Jenkins-Agent-Ubuntu2004-X64-m52xlarge-Docker-Builder'
                    image 'opensearchstaging/ci-runner:ubuntu2004-x64-docker-buildx0.6.3-qemu5.0-awscli1.22-jdk14'
                    args '-u root'
                    alwaysPull true
                }
            }
            steps {
                script {
                    install_gcrane()
                    copyDockerImage(
                            sourceImagePath: "opensearchstaging/${SOURCE_IMAGE_IN_STAGING}",
                            destinationImagePath: "opensearchproject/${DESTINATION_IMAGE_IN_PROD}",
                            destinationType: "docker",
                            destinationCredentialIdentifier: "jenkins-staging-docker-prod-token"
                    )
                }
                post() {
                    always {
                        script {
                            postCleanup()
                            sh "docker logout"
                        }
                    }
                }
            }
        }
        stage('docker-ecr-staging') {
            when {
                expression { params.ENVIRONMENT == 'staging' }
            }
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:ubuntu2004-x64-docker-buildx0.6.3-qemu5.0-awscli1.22-jdk14'
                    args '-u root'
                }
            }
            steps {
                script {
                    install_gcrane()
                    copyDockerImage(
                        sourceImagePath: "opensearchstaging/${SOURCE_IMAGE_IN_STAGING}",
                        destinationImagePath: "public.ecr.aws/m0o1u6w1/${SOURCE_IMAGE_IN_STAGING}",
                        destinationType: "ecr",
                        destinationCredentialIdentifier: "public.ecr.aws/m0o1u6w1",
                        accountName: "${AWS_ACCOUNT_PUBLIC}"
                    )
                }
            }
            post() {
                always {
                    script {
                        postCleanup()
                        sh "docker logout"
                    }
                }
            }
        }
        stage('docker-ecr-production') {
            when {
                expression { params.ENVIRONMENT == 'production' }
            }
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:ubuntu2004-x64-docker-buildx0.6.3-qemu5.0-awscli1.22-jdk14'
                    args '-u root'
                }
            }
            steps {
                script {
                    install_gcrane()
                    copyDockerImage(
                            sourceImagePath: "opensearchstaging/${SOURCE_IMAGE_IN_STAGING}",
                            destinationImagePath: "public.ecr.aws/p5f6l6i3/${DESTINATION_IMAGE_IN_PROD}",
                            destinationType: "ecr",
                            destinationCredentialIdentifier: "public.ecr.aws/p5f6l6i3",
                            accountName: "${AWS_ACCOUNT_ARTIFACT}"
                    )
                }
            }
            post() {
                always {
                    script {
                        postCleanup()
                        sh "docker logout"
                    }
                }
            }
        }
    }
}

void install_gcrane(){
    sh'''
        curl -L https://github.com/google/go-containerregistry/releases/latest/download/go-containerregistry_Linux_x86_64.tar.gz \\
            -o go-containerregistry.tar.gz
        tar -zxvf go-containerregistry.tar.gz
        chmod +x gcrane
        mv gcrane /usr/local/bin/
      '''
}

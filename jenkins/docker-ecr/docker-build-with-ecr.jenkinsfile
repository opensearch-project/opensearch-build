lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))
 properties([
     parameters([
            [$class: 'DynamicReferenceParameter', 
            choiceType: 'ET_FORMATTED_HTML', 
            description: 'ECR Image Repository, Eg: ci-runner',
            name: 'IMAGE_REPOSITORY', 
            referencedParameters: 'ECR', 
            script: 
                [$class: 'GroovyScript', 
                fallbackScript: [
                        classpath: [], 
                        sandbox: false, 
                        script: "return['']"
                        ], 
                script: [
                        classpath: [], 
                        sandbox: false, 
                        script: '''
                        if (ECR){
                            return """<textarea name=\"value\" rows=\"5\" class=\"setting-input   \"></textarea>"""
                        }
                        '''
                    ] 
            ],
            omitValueField: true
            ],
            [$class: 'DynamicReferenceParameter', 
            choiceType: 'ET_FORMATTED_HTML', 
            description: 'ECR Image tag, Eg: 1.3.0',
            name: 'IMAGE_TAG', 
            referencedParameters: 'ECR', 
            script: 
                [$class: 'GroovyScript', 
                fallbackScript: [
                        classpath: [], 
                        sandbox: false, 
                        script: "return['']"
                        ], 
                script: [
                        classpath: [], 
                        sandbox: false, 
                        script: '''
                        if (ECR){
                            return """<textarea name=\"value\" rows=\"5\" class=\"setting-input   \"></textarea>"""
                        }
                        '''
                    ] 
            ],
            omitValueField: true
            ]
    ])
])
pipeline {
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    agent none  
    parameters {
        string(
                defaultValue: 'https://github.com/opensearch-project/opensearch-build',
                name: 'DOCKER_BUILD_GIT_REPOSITORY',
                description: 'The git repository name that contains dockerfiles and the docker build script.',
                trim: true
        )
        string(
                defaultValue: 'main',
                name: 'DOCKER_BUILD_GIT_REPOSITORY_REFERENCE',
                description: 'The git reference (branch/tag/commit_id) of above repository.',
                trim: true
        )
        string(
                name: 'DOCKER_BUILD_SCRIPT_WITH_COMMANDS',
                description: 'The script path of the docker build script. Eg: bash docker/ci/build-image-multi-arch.sh -v <TAG_NAME> -f <DOCKERFILE PATH>',
                trim: true
        )
        booleanParam(
            name: 'DOCKER_HUB',
            defaultValue: true,
            description: 'Promote to docker hub platform.'
        )
        booleanParam(
            name: 'ECR',
            defaultValue: false,
            description: 'Promote to AWS ECR platform.'
        )
        booleanParam(
            name: 'TAG_LATEST',
            defaultValue: true,
            description: 'Tag the copied image as latest to ECR staging repo'
        )
    }
    stages {
        stage("Docker Image Build") {
            agent {
                    docker {
                        label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                        image 'opensearchstaging/ci-runner:ubuntu2004-x64-docker-buildx0.6.3-qemu5.0-awscli1.22-jdk11-v2'
                        args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
                    }
            }
            stages {
                stage('check-params') {
                    steps {
                        script {
                            if(DOCKER_BUILD_SCRIPT_WITH_COMMANDS == null
                                    || DOCKER_BUILD_SCRIPT_WITH_COMMANDS == '') {
                                        currentBuild.result = 'ABORTED'
                                        error('DOCKER_BUILD_SCRIPT_WITH_COMMANDS parameter is not set')
                            }
                        }
                    }
                }
                stage('docker-build-dockerhub-staging') {
                    when{
                        expression { return "$DOCKER_HUB".toBoolean() }
                    }
                    steps {
                        script {
                            git url: DOCKER_BUILD_GIT_REPOSITORY, branch: DOCKER_BUILD_GIT_REPOSITORY_REFERENCE
                            def CREDENTIAL_ID = "jenkins-staging-docker-staging-credential"
                            withCredentials([usernamePassword(credentialsId: CREDENTIAL_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                                sh '''
                                        set -e
                                        docker logout && echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin && eval $DOCKER_BUILD_SCRIPT_WITH_COMMANDS
                                '''
                            }
                        }
                    }
                }
                stage('docker-ecr-staging') {
                    when {
                        expression { return "$ECR".toBoolean() }
                    }
                    steps {
                        script {
                            copyContainer(
                                sourceImagePath: "opensearchstaging/${IMAGE_REPOSITORY}:${IMAGE_TAG}",
                                destinationImagePath: "public.ecr.aws/opensearchstaging/${IMAGE_REPOSITORY}:${IMAGE_TAG}",
                                destinationType: "ecr",
                                ecrProd: false,
                                destinationCredentialIdentifier: "public.ecr.aws/opensearchstaging",
                            )
                            if("$TAG_LATEST".toBoolean()){
                                echo "ECR: Tagging with latest."
                                copyContainer(
                                    sourceImagePath: "opensearchstaging/${IMAGE_REPOSITORY}:${IMAGE_TAG}",
                                    destinationImagePath: "public.ecr.aws/opensearchstaging/${IMAGE_REPOSITORY}:latest",
                                    destinationType: "ecr",
                                    ecrProd: false,
                                    destinationCredentialIdentifier: "public.ecr.aws/opensearchstaging",
                                )
                            }
                        }
                    }
                }
            }
            post() {
                always {
                    script {
                        postCleanup()
                        sh "docker image prune -f --all"
                    }
                }
            }
        }
    }
}
lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    options {
        timeout(time: 3, unit: 'HOURS')
    }
    agent {
        docker {
            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
            image 'opensearchstaging/ci-runner:ubuntu2004-x64-docker-buildx0.6.3-qemu5.0-awscli1.22-jdk14'
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    parameters {
        string(
                defaultValue: 'https://github.com/opensearch-project/opensearch-build',
                name: 'DOCKER_BUILD_GIT_REPOSITORY',
                description: 'The git repository name that contains dockerfiles and the docker build script.',
                trim: true
        )
        string(
                defaultValue: 'main',
                name: 'DOCKER_BUILD_GIT_REPOSITORY_REFERENCE',
                description: 'The git reference (branch/tag/commit_id) of above repository.',
                trim: true
        )
        string(
                name: 'DOCKER_BUILD_SCRIPT_WITH_COMMANDS',
                description: 'The script path of the docker build script. Eg: bash docker/ci/build-image-multi-arch.sh -v <TAG_NAME> -f <DOCKERFILE PATH>',
                trim: true
        )
        string(
                name: 'IMAGE_REPOSITORY',
                description: 'Image Repository on staging Eg: ci-runner',
                trim: true
        )
        string(
                name: 'IMAGE_TAG',
                description: 'Image tag on staging. Eg: 1.3.0',
                trim: true
        )
    }
    stages {
        stage('check-params') {
            steps {
                script {
                    if(DOCKER_BUILD_SCRIPT_WITH_COMMANDS == null
                            || DOCKER_BUILD_SCRIPT_WITH_COMMANDS == '') {
                                currentBuild.result = 'ABORTED'
                                error('DOCKER_BUILD_SCRIPT_WITH_COMMANDS parameter is not set')
                    }
                }
            }
        }
        stage('docker-build-dockerhub-staging') {
            steps {
                script {
                    git url: DOCKER_BUILD_GIT_REPOSITORY, branch: DOCKER_BUILD_GIT_REPOSITORY_REFERENCE
                    def CREDENTIAL_ID = "jenkins-staging-docker-staging-credential"
                    withCredentials([usernamePassword(credentialsId: CREDENTIAL_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                                set -e
                                docker logout && docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD && eval $DOCKER_BUILD_SCRIPT_WITH_COMMANDS
                           '''
                    }
                }
            }
        }
        stage('docker-ecr-staging') {
            steps {
                script {
                    copyContainer(
                        sourceImagePath: "opensearchstaging/${IMAGE_REPOSITORY}:${IMAGE_TAG}",
                        destinationImagePath: "public.ecr.aws/m0o1u6w1/${IMAGE_REPOSITORY}:${IMAGE_TAG}",
                        destinationType: "ecr",
                        destinationCredentialIdentifier: "public.ecr.aws/m0o1u6w1",
                        accountName: "${AWS_ACCOUNT_PUBLIC}"
                    )
                }
            }
        }
    }
    post() {
        always {
            script {
                postCleanup()
                sh "docker logout && docker image prune -f --all"
            }
        }
    }
}

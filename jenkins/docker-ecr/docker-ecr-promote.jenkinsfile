lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    agent none  
    parameters {
        string(
            name: 'IMAGE_REPOSITORY',
            description: 'Image Repository on staging Eg: ci-runner',
            trim: true
        )
        string(
            name: 'IMAGE_TAG',
            description: 'Image tag on staging. Eg: 1.3.0',
            trim: true
        )
        booleanParam(
            name: 'DOCKER_HUB',
            defaultValue: true,
            description: 'Promote to docker hub platform.'
        )
        booleanParam(
            name: 'ECR',
            defaultValue: true,
            description: 'Promote to AWS ECR platform.'
        )
        booleanParam(
            name: 'TAG_LATEST',
            defaultValue: true,
            description: 'Tag the copied image as latest'
        )
    }

    stages {
        stage("Docker Image Promote") {
        agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:ubuntu2004-x64-docker-buildx0.6.3-qemu5.0-awscli1.22-jdk11-v2'
                    args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
                }
        }
        stages {
            stage('Promote to prod DockerHub') {
                when{
                    expression { return "$DOCKER_HUB".toBoolean() }
                }
                steps {
                    script {
                        copyContainer(
                            sourceImagePath: "1001235258/${IMAGE_REPOSITORY}:${IMAGE_TAG}",
                            destinationImagePath: "1001235258/${IMAGE_REPOSITORY}:${IMAGE_TAG}",
                            destinationType: "docker",
                            destinationCredentialIdentifier: "docker-temp-pg",
                            //destinationCredentialIdentifier: "jenkins-staging-docker-prod-token"
                        )
                        if("$TAG_LATEST".toBoolean()){
                            echo "Tagging with latest."
                            copyContainer(
                                //staging
                                sourceImagePath: "1001235258/${IMAGE_REPOSITORY}:${IMAGE_TAG}",
                                //project
                                destinationImagePath: "1001235258/${IMAGE_REPOSITORY}:latest",
                                destinationType: "docker",
                                destinationCredentialIdentifier: "docker-temp-pg",
                                //destinationCredentialIdentifier: "jenkins-staging-docker-prod-token"
                            )
                        }
                    }
                }
            }
            stage('Promote to prod ECR') {
                when {
                    expression { return "$ECR".toBoolean() }
                }
                steps {
                    script {
                        copyContainer(
                            sourceImagePath: "1001235258/${IMAGE_REPOSITORY}:${IMAGE_TAG}",
                            destinationImagePath: "public.ecr.aws/opensearchproject/${IMAGE_REPOSITORY}:${IMAGE_TAG}",
                            destinationType: "ecr",
                            ecrProd: true,
                            destinationCredentialIdentifier: "public.ecr.aws/opensearchproject",
                        )
                        if("$TAG_LATEST".toBoolean()){
                            echo "Tagging with latest."
                            copyContainer(
                                sourceImagePath: "1001235258/${IMAGE_REPOSITORY}:${IMAGE_TAG}",
                                destinationImagePath: "public.ecr.aws/opensearchproject/${IMAGE_REPOSITORY}:latest",
                                destinationType: "ecr",
                                ecrProd: true,
                                destinationCredentialIdentifier: "public.ecr.aws/opensearchproject",
                            )
                        }
                    }
                }
            }
        }
        post() {
                always {
                    script {
                        postCleanup()
                        sh "docker image prune -f --all"
                    }
                }
        }
    }
}

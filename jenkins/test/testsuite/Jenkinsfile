lib = library(identifier: "jenkins@20211118", retriever: legacySCM(scm))

pipeline {
    agent none
    environment {
        AWS_ROLE_ARN = "arn:aws:iam::${AWS_ACCOUNT_PUBLIC}:role/opensearch-test"
        AWS_ROLE_SESSION_NAME = "jenkins-test-session"
    }
    tools {
        jdk "JDK14"
        maven "maven-3.8.2"
    }
    parameters {
        string(
            defaultValue: '',
            name: 'opensearch_version',
            description: 'OpenSearch version to run test on',
            trim: true
        )
        string(
            defaultValue: '',
            name: 'build_id',
            description: 'The build number for which tests should be run',
            trim: true
        )
        string(
            defaultValue: '',
            name: 'architecture',
            description: 'Architecture of the build',
            trim: true
        )
        string(
            defaultValue: '',
            name: 'platform',
            description: 'Platform of the build',
            trim: true
        )
    }
    stages {
        stage('Choose Agent Node') {
            steps {
                script {
                    if ("${architecture}" == 'x64') {
                        agentLabel = "Jenkins-Agent-al2-x64-m5xlarge"
                    } else if ("${architecture}" == 'arm64') {
                        agentLabel = "Jenkins-Agent-al2-arm64-m6gxlarge"
                    } else {
                        error("Unknown CPU architecture is provided")
                    }
                }
            }
        }
        stage('integ-test') {
            agent {
                node {
                    label "${agentLabel}"
                }
            }
            steps {
                script {
                    basePath = "https://ci.opensearch.org/ci/dbc/bundle-build/${opensearch_version}/${build_id}/${platform}/${architecture}"
                    sh "wget ${basePath}/builds/manifest.yml"
                    sh "./test.sh ${JOB_NAME} ${basePath} --test-run-id ${env.BUILD_NUMBER}"
                }
            }
            post() {
                always {
                    script {
                        uploadTestResults(
                            jobName: 'bundle-build',
                            buildNumber: "${build_id}"
                        )
                    }
                    cleanWs disableDeferredWipeout: true, deleteDirs: true
                }
            }
        }
    }
    post() {
        success {
            node('Jenkins-Agent-al2-x64-m5xlarge') {
                script {
                    def stashed = lib.jenkins.Messages.new(this).get(['integ-test'])
                    publishNotification(
                        icon: ':white_check_mark:',
                        message: 'Integration Tests Successful',
                        extra: stashed,
                        credentialsId: 'INTEG_TEST_WEBHOOK',
                    )

                    cleanWs(
                        disableDeferredWipeout: true,
                        deleteDirs: true
                    )
                }
            }
        }
        failure {
            node('Jenkins-Agent-al2-x64-m5xlarge') {
                script  {
                    def stashed = lib.jenkins.Messages.new(this).get(['integ-test'])
                    publishNotification(
                        icon: ':warning:',
                        message: 'Failed Integration Tests',
                        extra: stashed,
                        credentialsId: 'INTEG_TEST_WEBHOOK',
                    )

                    cleanWs(
                        disableDeferredWipeout: true,
                        deleteDirs: true
                    )
                }
            }
        }
    }
}

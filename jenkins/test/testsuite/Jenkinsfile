lib = library(identifier: "jenkins@current", retriever: legacySCM(scm))

pipeline {
    agent none
    environment {
        AWS_ROLE_ARN = "arn:aws:iam::${AWS_ACCOUNT_PUBLIC}:role/opensearch-test"
        AWS_ROLE_SESSION_NAME = "jenkins-test-session"
    }
    tools {
        jdk "JDK14"
        maven "maven-3.8.2"
    }
    stages {
        stage('Parameters') {
            steps {
                script {
                    properties([
                            parameters([
                                    string(
                                            defaultValue: '',
                                            name: 'opensearch_version',
                                            trim: true
                                    ),
                                    string(
                                            defaultValue: '',
                                            name: 'build_id',
                                            trim: true
                                    ),

                                    string(
                                            defaultValue: '',
                                            name: 'architecture',
                                            trim: true
                                    ),
                                    string(
                                            defaultValue: '',
                                            name: 'platform',
                                            trim: true
                                    )
                            ])
                    ])
                }
            }
        }
        stage('Choose Agent Node') {
            steps {
                script {
                    if ("${architecture}" == 'x64') {
                        agentLabel = "Jenkins-Agent-al2-x64-m5xlarge"
                    } else if ("${architecture}" == 'arm64') {
                        agentLabel = "Jenkins-Agent-al2-arm64-m6gxlarge"
                    } else {
                        error("Unknown CPU architecture is provided")
                    }
                }
            }
        }
        stage('Integ-Test') {
            agent {
                node {
                    label "${agentLabel}"
                }
            }
            steps {
                script {
                    basePath = "https://ci.opensearch.org/ci/dbc/bundle-build/${opensearch_version}/${build_id}/${platform}/${architecture}"
                    sh "./test.sh ${JOB_NAME} ${basePath} --test-run-id ${env.BUILD_NUMBER}"
                }
            }
            post() {
                always {
                    script {
                        publishResults()
                    }
                    cleanWs disableDeferredWipeout: true, deleteDirs: true
                }
            }
        }
    }
    post() {
        success {
            node('Jenkins-Agent-al2-x64-m5xlarge') {
                script {
                    def stashed = lib.jenkins.Messages.new(this).get(['Integ-Test'])
                    publishNotification(":white_check_mark:", "Successful Build", "\n${stashed}")
                }
            }
        }
        failure {
            node('Jenkins-Agent-al2-x64-m5xlarge') {
                script  {
                    def stashed = lib.jenkins.Messages.new(this).get(['Integ-Test'])
                    publishNotification(":warning:", "Failed Build", "\n${stashed}")
                }
            }
        }
    }
}

/** Publishes test results to S3 **/
void publishResults() {
    def artifactPath = "bundle-build/${opensearch_version}/${build_id}/${platform}/${architecture}"
    withAWS(role: 'opensearch-test', roleAccount: "${AWS_ACCOUNT_PUBLIC}", duration: 900, roleSessionName: 'jenkins-session') {
        s3Upload(file: 'test-results', bucket: "${ARTIFACT_BUCKET_NAME}", path: "${artifactPath}/test-results")
    }
    echo "Uploaded Test Results to s3://${ARTIFACT_BUCKET_NAME}/${artifactPath}/test-results"
    lib.jenkins.Messages.new(this).add("${STAGE_NAME}", "s3://${ARTIFACT_BUCKET_NAME}/${artifactPath}/test-results")
}

/** Publishes a notification to a slack instance*/
void publishNotification(icon, msg, extra) {
    withCredentials([string(credentialsId: 'INTEG_TEST_WEBHOOK', variable: 'TOKEN')]) {
        sh("""curl -XPOST --header "Content-Type: application/json" --data '{"result_text": "$icon ${env.JOB_NAME} [${env.BUILD_NUMBER}] $msg ${env.BUILD_URL}\nTest Results Location: $extra"}' """ + "$TOKEN")
    }
}

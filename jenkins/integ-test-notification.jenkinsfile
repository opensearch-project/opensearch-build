/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

lib = library(identifier: 'jenkins@7.3.1', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))


pipeline {
    agent {
        docker {
            label 'Jenkins-Agent-AL2023-X64-M54xlarge-Docker-Host'
            image 'opensearchstaging/ci-runner:ci-runner-al2-opensearch-build-v1'
            registryUrl 'https://public.ecr.aws/'
            alwaysPull true
        }
    }
    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(daysToKeepStr: '30'))
    }
    triggers {
        parameterizedCron('''
            H */6 * * * %INPUT_MANIFEST=2.18.1/opensearch-2.18.1.yml
            H */6 * * * %INPUT_MANIFEST=1.3.20/opensearch-dashboards-1.3.20.yml
            H */6 * * * %INPUT_MANIFEST=2.19.0/opensearch-2.19.0.yml
            H */6 * * * %INPUT_MANIFEST=2.18.0/opensearch-2.18.0.yml
            H */6 * * * %INPUT_MANIFEST=2.18.0/opensearch-dashboards-2.18.0.yml
        ''')
    }
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0.yml.',
            trim: true
        )
        string(
            name: 'DISTRIBUTION_NUMBER',
            description: 'Ditribution number of OpenSearch/OpenSearch-Dashboards builds that was used to run the integration test. eg:10345',
            trim: true
        )
    }
    stages {
        stage('Update integ tests failure issues') {
            steps {
                script {
                    if (params.INPUT_MANIFEST == '' || !fileExists("manifests/${params.INPUT_MANIFEST}")) {
                        currentBuild.result = 'ABORTED'
                        error("Failed to start the workflow. Input manifest was not provided or not found in manifests/${params.INPUT_MANIFEST}.")
                    }
                    currentBuild.description = INPUT_MANIFEST
                    updateIntegTestFailureIssues(
                        inputManifestPath: "manifests/${INPUT_MANIFEST}",
                        distributionBuildNumber: "${DISTRIBUTION_NUMBER}"
                    )
                }
            }
        }
    }
    post() {
        always {
            script {
                postCleanup()
            }
        }
    }
}

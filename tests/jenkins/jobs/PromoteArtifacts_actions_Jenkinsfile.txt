   PromoteArtifacts_actions_Jenkinsfile.run()
      PromoteArtifacts_actions_Jenkinsfile.pipeline(groovy.lang.Closure)
         PromoteArtifacts_actions_Jenkinsfile.echo(Executing on agent [label:none])
         PromoteArtifacts_actions_Jenkinsfile.stage(promote, groovy.lang.Closure)
            PromoteArtifacts_actions_Jenkinsfile.script(groovy.lang.Closure)
               PromoteArtifacts_actions_Jenkinsfile.createSha512Checksums()
               PromoteArtifacts_actions_Jenkinsfile.createSignatureFiles()
                  createSignatureFiles.legacySCM(groovy.lang.Closure)
                  createSignatureFiles.library({identifier=jenkins@20211123, retriever=null})
               PromoteArtifacts_actions_Jenkinsfile.promoteArtifacts({manifest=tests/jenkins/data/opensearch-1.3.0.yml, fileActions=[groovy.lang.Closure, groovy.lang.Closure]})
                  promoteArtifacts.legacySCM(groovy.lang.Closure)
                  promoteArtifacts.library({identifier=jenkins@20211123, retriever=null})
                  promoteArtifacts.readYaml({file=tests/jenkins/data/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  promoteArtifacts.withAWS({role=downloadRoleName, roleAccount=publicAccount, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                     promoteArtifacts.s3Download({bucket=artifact-bucket, file=workspace/artifacts, path=vars-build/1.3.0/33/linux/x64/, force=true})
                  promoteArtifacts.readYaml({file=artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/manifest.yml})
                  promoteArtifacts.fileExists(workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins)
                  createSha512Checksums.sh({script=find workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins -type f, returnStdout=true})
                  createSha512Checksums.echo(Creating sha for tar_dummy_artifact_1.0.0.tar.gz)
                  createSha512Checksums.sh({script=sha512sum tar_dummy_artifact_1.0.0.tar.gz, returnStdout=true})
                  createSha512Checksums.sh({script=basename workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/tar_dummy_artifact_1.0.0.tar.gz, returnStdout=true})
                  createSha512Checksums.writeFile({file=tar_dummy_artifact_1.0.0.tar.gz.sha512, text=shaHashDummy_tar_dummy_artifact_1.0.0.tar.gz  tar_dummy_artifact_1.0.0.tar.gz})
                  createSha512Checksums.echo(Creating sha for zip_dummy_artifact_1.1.0.zip)
                  createSha512Checksums.sh({script=sha512sum zip_dummy_artifact_1.1.0.zip, returnStdout=true})
                  createSha512Checksums.sh({script=basename workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/zip_dummy_artifact_1.1.0.zip, returnStdout=true})
                  createSha512Checksums.writeFile({file=zip_dummy_artifact_1.1.0.zip.sha512, text=shaHashDummy_zip_dummy_artifact_1.1.0.zip  zip_dummy_artifact_1.1.0.zip})
                  createSha512Checksums.echo(Not generating sha for dummy_artifact_1.1.0.dummy in workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins, doesn't match allowed types [.tar.gz, .zip])
                  createSignatureFiles.signArtifacts({sigtype=.sig, artifactPath=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins})
                     signArtifacts.fileExists(workspace/sign.sh)
                     signArtifacts.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                     signArtifacts.sh(curl -sSL https://artifacts.opensearch.org/publickeys/opensearch.pgp | gpg --import -)
                     signArtifacts.usernamePassword({credentialsId=github_bot_token_name, usernameVariable=GITHUB_USER, passwordVariable=GITHUB_TOKEN})
                     signArtifacts.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                        signArtifacts.sh(
            #!/bin/bash
            set +x
            export ROLE=dummy_signer_client_role
            export EXTERNAL_ID=signer_client_external_id
            export UNSIGNED_BUCKET=signer_client_unsigned_bucket
            export SIGNED_BUCKET=signer_client_signed_bucket

            workspace/sign.sh workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins --sigtype=.sig
        )
                  promoteArtifacts.findFiles({glob=**/opensearch-min-1.3.0*.tar.gz,**/opensearch-1.3.0*.tar.gz})
                  promoteArtifacts.getPath()
                  createSha512Checksums.sh({script=find workspace/workspace/file/found.zip -type f, returnStdout=true})
                  createSha512Checksums.echo(Not generating sha for bbb in workspace/workspace/file/found.zip, doesn't match allowed types [.tar.gz, .zip])
                  createSha512Checksums.echo(Not generating sha for ccc in workspace/workspace/file/found.zip, doesn't match allowed types [.tar.gz, .zip])
                  promoteArtifacts.findFiles({glob=**/opensearch-min-1.3.0*.tar.gz,**/opensearch-1.3.0*.tar.gz})
                  promoteArtifacts.getPath()
                  createSignatureFiles.signArtifacts({sigtype=.sig, artifactPath=workspace/workspace/file/found.zip})
                     signArtifacts.fileExists(workspace/sign.sh)
                     signArtifacts.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                     signArtifacts.sh(curl -sSL https://artifacts.opensearch.org/publickeys/opensearch.pgp | gpg --import -)
                     signArtifacts.usernamePassword({credentialsId=github_bot_token_name, usernameVariable=GITHUB_USER, passwordVariable=GITHUB_TOKEN})
                     signArtifacts.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                        signArtifacts.sh(
            #!/bin/bash
            set +x
            export ROLE=dummy_signer_client_role
            export EXTERNAL_ID=signer_client_external_id
            export UNSIGNED_BUCKET=signer_client_unsigned_bucket
            export SIGNED_BUCKET=signer_client_signed_bucket

            workspace/sign.sh workspace/workspace/file/found.zip --sigtype=.sig
        )
                  promoteArtifacts.withAWS({role=artifactPromotionRole, roleAccount=artifactsAccount, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/discovery-ec2-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/discovery-ec2-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/transport-nio-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/transport-nio-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/discovery-gce-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/discovery-gce-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/analysis-ukrainian-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/analysis-ukrainian-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/discovery-azure-classic-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/discovery-azure-classic-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/analysis-phonetic-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/analysis-phonetic-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/mapper-murmur3-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/mapper-murmur3-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/analysis-kuromoji-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/analysis-kuromoji-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/analysis-stempel-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/analysis-stempel-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/mapper-annotated-text-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/mapper-annotated-text-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/repository-hdfs-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/repository-hdfs-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/analysis-icu-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/analysis-icu-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/mapper-size-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/mapper-size-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/ingest-attachment-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/ingest-attachment-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/repository-azure-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/repository-azure-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/repository-s3-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/repository-s3-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/analysis-nori-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/analysis-nori-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/store-smb-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/store-smb-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/analysis-smartcn-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/analysis-smartcn-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/plugins/repository-gcs-1.1.0.zip/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/core-plugins/, includePathPattern=**/repository-gcs-1.1.0.zip*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/core/opensearch/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/builds/opensearch/dist/, includePathPattern=**/opensearch-min-1.3.0*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/bundle/opensearch/1.3.0/, workingDir=workspace/artifacts/vars-build/1.3.0/33/linux/x64/dist/opensearch/, includePathPattern=**/opensearch-1.3.0*})

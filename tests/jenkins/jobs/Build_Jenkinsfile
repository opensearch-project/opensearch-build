// similar jenkins/opensearch/Jenkinsfile but echo instead of sh for testing

lib = library(identifier: "jenkins@current", retriever: legacySCM(scm))

pipeline {
    agent none
    stages {
        stage('parameters') {
            steps {
                script {
                    properties([
                            parameters([
                                    string(
                                            defaultValue: '2.0.0/opensearch-2.0.0.yml',
                                            name: 'INPUT_MANIFEST',
                                            trim: true
                                    )
                            ])
                    ])
                }
            }
        }
        stage('detect Docker image + args to use for the build') {
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028'
                    alwaysPull true
                }
            }
            steps {
                script { 
                    git url: 'https://github.com/opensearch-project/opensearch-build.git', branch: 'main'
                    def inputManifest = lib.jenkins.InputManifest.new(readYaml(file: "manifests/$INPUT_MANIFEST"))
                    dockerImage = inputManifest.ci.image.name
                    dockerArgs = inputManifest.ci.image.args ?: '-e JAVA_HOME=/usr/lib/jvm/adoptopenjdk-14-hotspot'
                    echo "Using Docker image ${dockerImage} (${dockerArgs})"
                }
            }
        }
        stage('build') {
            parallel {
                stage('build-snapshots') {
                    environment {
                        SNAPSHOT_REPO_URL = "https://aws.oss.sonatype.org/content/repositories/snapshots/"
                    }
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                            image dockerImage
                            args dockerArgs
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            sh "echo ./build.sh manifests/$INPUT_MANIFEST --snapshot"
                            withCredentials([usernamePassword(credentialsId: 'Sonatype', usernameVariable: 'SONATYPE_USERNAME', passwordVariable: 'SONATYPE_PASSWORD')]) {
                                echo "$WORKSPACE/publish/publish-snapshot.sh $WORKSPACE/builds/maven"
                            }
                        }
                    }
                    post() {
                        always {
                            cleanWs disableDeferredWipeout: true, deleteDirs: true
                        }
                    }
                }
                stage('build-x64') {
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                            image dockerImage
                            args dockerArgs
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            buildManifest(
                                script: 'echo ./build.sh',
                                manifest: "manifests/${INPUT_MANIFEST}"
                            )
                            assembleManifest(
                                script: 'echo ./assemble.sh',
                                manifest: 'tests/data/opensearch-build-1.1.0.yml'
                            )
                            uploadArtifacts(
                                upload: false,
                                manifest: 'tests/data/opensearch-build-1.1.0.yml'
                            )
                        }
                    }
                    post() {
                        always {
                            cleanWs disableDeferredWipeout: true, deleteDirs: true
                        }
                    }
                }
                stage('build-arm64') {
                    agent {
                        docker {
                            label 'Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host'
                            image dockerImage
                            args dockerArgs
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            buildManifest(
                                script: 'echo ./build.sh',
                                manifest: "manifests/${INPUT_MANIFEST}"
                            )
                            assembleManifest(
                                script: 'echo ./assemble.sh',
                                manifest: 'tests/data/opensearch-build-1.1.0.yml'
                            )
                            uploadArtifacts(
                                upload: false,
                                manifest: 'tests/data/opensearch-build-1.1.0.yml'
                            )
                        }
                    }
                    post() {
                        always {
                            cleanWs disableDeferredWipeout: true, deleteDirs: true
                        }
                    }
                }
            }
        }
        stage('docker build') {
            steps {
                node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                    script {
                        git url: 'https://github.com/opensearch-project/opensearch-build.git', branch: 'main'
                        def inputManifest = lib.jenkins.InputManifest.new(readYaml(file: "manifests/$INPUT_MANIFEST"))
                        def cmd = [
                            'id',
                            'pwd',
                            'cd docker/release',
                            "curl -sSL ${inputManifest.getPublicDistUrl(env.PUBLIC_ARTIFACT_URL, env.JOB_NAME, env.BUILD_NUMBER, 'linux','x64')} -o opensearch-x64.tgz",
                            "curl -sSL ${inputManifest.getPublicDistUrl(env.PUBLIC_ARTIFACT_URL, env.JOB_NAME, env.BUILD_NUMBER, 'linux','arm64')} -o opensearch-arm64.tgz",
                            "bash build-image-multi-arch.sh -v ${inputManifest.build.version} -f ./dockerfiles/opensearch.al2.dockerfile -p opensearch -a 'x64,arm64' -r opensearchstaging/opensearch -t 'opensearch-x64.tgz,opensearch-arm64.tgz' -n ${env.BUILD_NUMBER}"
                        ].join(" && ")
                        echo "dockerBuild:${cmd}"
                    }
                }
            }
        }
    }
    post() {
        success {
            node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                script {
                    def stashed = lib.jenkins.Messages.new(this).get(['build-x64', 'build-arm64'])
                    publishNotification(
                        script: 'echo curl',
                        icon: ':white_check_mark:',
                        message: 'Successful Build',
                        extra: stashed
                    )
                }
            }
        }
        failure {
            node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                publishNotification(
                    script: 'echo curl',
                    icon: ':warning:',
                    message: 'Failed Build'
                )
            }
        }
    }
}

   BuildAndUploadManifestSHA_Jenkinsfile.run()
      BuildAndUploadManifestSHA_Jenkinsfile.pipeline(groovy.lang.Closure)
         BuildAndUploadManifestSHA_Jenkinsfile.echo(Executing on agent [label:none])
         BuildAndUploadManifestSHA_Jenkinsfile.stage(upload manifest SHA, groovy.lang.Closure)
            BuildAndUploadManifestSHA_Jenkinsfile.script(groovy.lang.Closure)
               BuildAndUploadManifestSHA_Jenkinsfile.buildAndUploadManifestSHA({manifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64})
                  buildAndUploadManifestSHA.legacySCM(groovy.lang.Closure)
                  buildAndUploadManifestSHA.library({identifier=jenkins@20211123, retriever=null})
                  buildAndUploadManifestSHA.getManifestSHA({manifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64})
                     getManifestSHA.buildManifest({manifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64, lock=true})
                        buildManifest.sh(./build.sh tests/jenkins/data/opensearch-1.3.0.yml -p linux -a x64 --lock)
                     getManifestSHA.sha1(tests/jenkins/data/opensearch-1.3.0.yml.lock)
                     getManifestSHA.echo(Manifest SHA: sha1)
                     getManifestSHA.legacySCM(groovy.lang.Closure)
                     getManifestSHA.library({identifier=jenkins@20211123, retriever=null})
                     getManifestSHA.readYaml({file=tests/jenkins/data/opensearch-1.3.0.yml.lock})
                     InputManifest.asBoolean()
                     InputManifest.getSHAsRoot(get-manifest-sha-build)
                     getManifestSHA.echo(Manifest lock: tests/jenkins/data/opensearch-1.3.0.yml.lock)
                     getManifestSHA.echo(Manifest SHA path: get-manifest-sha-build/1.3.0/shas/sha1.yml)
                     getManifestSHA.withAWS({role=opensearch-bundle, roleAccount=account, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        getManifestSHA.s3DoesObjectExist({bucket=artifact-bucket, path=get-manifest-sha-build/1.3.0/shas/sha1.yml})
                     getManifestSHA.echo(Manifest SHA exists: false)
                  buildAndUploadManifestSHA.withAWS({role=opensearch-bundle, roleAccount=account, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                     buildAndUploadManifestSHA.s3Upload({bucket=artifact-bucket, file=tests/jenkins/data/opensearch-1.3.0.yml.lock, path=get-manifest-sha-build/1.3.0/shas/sha1.yml})

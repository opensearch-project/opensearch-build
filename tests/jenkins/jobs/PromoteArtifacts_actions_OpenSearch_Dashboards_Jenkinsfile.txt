   PromoteArtifacts_actions_OpenSearch_Dashboards_Jenkinsfile.run()
      PromoteArtifacts_actions_OpenSearch_Dashboards_Jenkinsfile.pipeline(groovy.lang.Closure)
         PromoteArtifacts_actions_OpenSearch_Dashboards_Jenkinsfile.echo(Executing on agent [label:none])
         PromoteArtifacts_actions_OpenSearch_Dashboards_Jenkinsfile.stage(promote, groovy.lang.Closure)
            PromoteArtifacts_actions_OpenSearch_Dashboards_Jenkinsfile.script(groovy.lang.Closure)
               PromoteArtifacts_actions_OpenSearch_Dashboards_Jenkinsfile.createSha512Checksums()
               PromoteArtifacts_actions_OpenSearch_Dashboards_Jenkinsfile.createSignatureFiles()
                  createSignatureFiles.legacySCM(groovy.lang.Closure)
                  createSignatureFiles.library({identifier=jenkins@20211123, retriever=null})
               PromoteArtifacts_actions_OpenSearch_Dashboards_Jenkinsfile.promoteArtifacts({manifest=tests/jenkins/data/opensearch-dashboards-1.2.0.yml, fileActions=[groovy.lang.Closure, groovy.lang.Closure]})
                  promoteArtifacts.legacySCM(groovy.lang.Closure)
                  promoteArtifacts.library({identifier=jenkins@20211123, retriever=null})
                  promoteArtifacts.readYaml({file=tests/jenkins/data/opensearch-dashboards-1.2.0.yml})
                  InputManifest.asBoolean()
                  promoteArtifacts.withAWS({role=downloadRoleName, roleAccount=publicAccount, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                     promoteArtifacts.s3Download({bucket=artifact-bucket, file=workspace/artifacts, path=vars-build/1.2.0/33/linux/x64/, force=true})
                  promoteArtifacts.readYaml({file=artifacts/vars-build/1.2.0/33/linux/x64/builds/opensearch-dashboards/manifest.yml})
                  promoteArtifacts.fileExists(workspace/artifacts/vars-build/1.2.0/33/linux/x64/builds/opensearch-dashboards/core-plugins)
                  createSha512Checksums.sh({script=find workspace/artifacts/vars-build/1.2.0/33/linux/x64/builds/opensearch-dashboards/plugins -type f, returnStdout=true})
                  createSha512Checksums.echo(Not generating sha for bbb in workspace/artifacts/vars-build/1.2.0/33/linux/x64/builds/opensearch-dashboards/plugins, doesn't match allowed types [.tar.gz, .zip])
                  createSha512Checksums.echo(Not generating sha for ccc in workspace/artifacts/vars-build/1.2.0/33/linux/x64/builds/opensearch-dashboards/plugins, doesn't match allowed types [.tar.gz, .zip])
                  createSignatureFiles.signArtifacts({sigtype=.sig, artifactPath=workspace/artifacts/vars-build/1.2.0/33/linux/x64/builds/opensearch-dashboards/plugins})
                     signArtifacts.fileExists(workspace/sign.sh)
                     signArtifacts.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                     signArtifacts.sh(curl -sSL https://artifacts.opensearch.org/publickeys/opensearch.pgp | gpg --import -)
                     signArtifacts.usernamePassword({credentialsId=github_bot_token_name, usernameVariable=GITHUB_USER, passwordVariable=GITHUB_TOKEN})
                     signArtifacts.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                        signArtifacts.sh(
            #!/bin/bash
            set +x
            export ROLE=dummy_signer_client_role
            export EXTERNAL_ID=signer_client_external_id
            export UNSIGNED_BUCKET=signer_client_unsigned_bucket
            export SIGNED_BUCKET=signer_client_signed_bucket

            workspace/sign.sh workspace/artifacts/vars-build/1.2.0/33/linux/x64/builds/opensearch-dashboards/plugins --sigtype=.sig
        )
                  promoteArtifacts.findFiles({glob=**/opensearch-dashboards-min-1.2.0*.tar.gz,**/opensearch-dashboards-1.2.0*.tar.gz})
                  promoteArtifacts.getPath()
                  createSha512Checksums.sh({script=find workspace/workspace/file/found.zip -type f, returnStdout=true})
                  createSha512Checksums.echo(Not generating sha for bbb in workspace/workspace/file/found.zip, doesn't match allowed types [.tar.gz, .zip])
                  createSha512Checksums.echo(Not generating sha for ccc in workspace/workspace/file/found.zip, doesn't match allowed types [.tar.gz, .zip])
                  promoteArtifacts.findFiles({glob=**/opensearch-dashboards-min-1.2.0*.tar.gz,**/opensearch-dashboards-1.2.0*.tar.gz})
                  promoteArtifacts.getPath()
                  createSignatureFiles.signArtifacts({sigtype=.sig, artifactPath=workspace/workspace/file/found.zip})
                     signArtifacts.fileExists(workspace/sign.sh)
                     signArtifacts.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                     signArtifacts.sh(curl -sSL https://artifacts.opensearch.org/publickeys/opensearch.pgp | gpg --import -)
                     signArtifacts.usernamePassword({credentialsId=github_bot_token_name, usernameVariable=GITHUB_USER, passwordVariable=GITHUB_TOKEN})
                     signArtifacts.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                        signArtifacts.sh(
            #!/bin/bash
            set +x
            export ROLE=dummy_signer_client_role
            export EXTERNAL_ID=signer_client_external_id
            export UNSIGNED_BUCKET=signer_client_unsigned_bucket
            export SIGNED_BUCKET=signer_client_signed_bucket

            workspace/sign.sh workspace/workspace/file/found.zip --sigtype=.sig
        )
                  promoteArtifacts.withAWS({role=artifactPromotionRole, roleAccount=artifactsAccount, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/core/opensearch-dashboards/1.2.0/, workingDir=workspace/artifacts/vars-build/1.2.0/33/linux/x64/builds/opensearch-dashboards/dist/, includePathPattern=**/opensearch-dashboards-min-1.2.0*})
                     promoteArtifacts.s3Upload({bucket=prod-bucket-name, path=releases/bundle/opensearch-dashboards/1.2.0/, workingDir=workspace/artifacts/vars-build/1.2.0/33/linux/x64/dist/opensearch-dashboards/, includePathPattern=**/opensearch-dashboards-1.2.0*})

   IncrementalBuild_Jenkinsfile.run()
      IncrementalBuild_Jenkinsfile.pipeline(groovy.lang.Closure)
         IncrementalBuild_Jenkinsfile.echo(Executing on agent [label:none])
         IncrementalBuild_Jenkinsfile.stage(build and assemble, sha exists, groovy.lang.Closure)
            IncrementalBuild_Jenkinsfile.script(groovy.lang.Closure)
               IncrementalBuild_Jenkinsfile.buildAssembleUpload({dryRun=false, manifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64})
                  buildAssembleUpload.buildManifest({dryRun=false, manifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64, lock=true})
                     buildManifest.sh(./build.sh tests/jenkins/data/opensearch-1.3.0.yml -p linux -a x64 --lock)
                  buildAssembleUpload.sha1(tests/jenkins/data/opensearch-1.3.0.yml.lock)
                  buildAssembleUpload.echo(Manifest SHA: sha1)
                  buildAssembleUpload.legacySCM(groovy.lang.Closure)
                  buildAssembleUpload.library({identifier=jenkins@20211123, retriever=null})
                  buildAssembleUpload.readYaml({file=tests/jenkins/data/opensearch-1.3.0.yml.lock})
                  InputManifest.asBoolean()
                  InputManifest.getSHAsRoot(vars-build, linux, x64)
                  buildAssembleUpload.withAWS({role=opensearch-bundle, roleAccount=account, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                     buildAssembleUpload.s3DoesObjectExist({bucket=artifact-bucket, path=vars-build/1.3.0/shas/linux/x64/sha1.yml})
                  Messages.asBoolean()
                  Messages.add(stage, Skipped stage, vars-build/1.3.0/shas/linux/x64/sha1.yml exists.)
                     buildAssembleUpload.writeFile({file=messages/stage.msg, text=Skipped stage, vars-build/1.3.0/shas/linux/x64/sha1.yml exists.})
                     buildAssembleUpload.stash({includes=messages/*, name=messages-stage})
                  buildAssembleUpload.echo(Skipping, vars-build/1.3.0/shas/linux/x64/sha1.yml already exists.)
         IncrementalBuild_Jenkinsfile.stage(build and assemble, sha does not exist, groovy.lang.Closure)
            IncrementalBuild_Jenkinsfile.script(groovy.lang.Closure)
               IncrementalBuild_Jenkinsfile.buildAssembleUpload({dryRun=true, manifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64})
                  buildAssembleUpload.buildManifest({dryRun=true, manifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64, lock=true})
                     buildManifest.sh(echo ./build.sh tests/jenkins/data/opensearch-1.3.0.yml -p linux -a x64 --lock)
                  buildAssembleUpload.sha1(tests/jenkins/data/opensearch-1.3.0.yml)
                  buildAssembleUpload.echo(Manifest SHA: sha1)
                  buildAssembleUpload.legacySCM(groovy.lang.Closure)
                  buildAssembleUpload.library({identifier=jenkins@20211123, retriever=null})
                  buildAssembleUpload.readYaml({file=tests/jenkins/data/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  InputManifest.getSHAsRoot(vars-build, linux, x64)
                  buildAssembleUpload.withAWS({role=opensearch-bundle, roleAccount=account, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                  buildAssembleUpload.buildManifest({dryRun=true, manifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64})
                     buildManifest.sh(echo ./build.sh tests/jenkins/data/opensearch-1.3.0.yml -p linux -a x64)
                  buildAssembleUpload.assembleManifest({dryRun=true, manifest=tests/data/opensearch-build-1.1.0.yml, platform=linux, architecture=x64})
                     assembleManifest.legacySCM(groovy.lang.Closure)
                     assembleManifest.library({identifier=jenkins@20211123, retriever=null})
                     assembleManifest.readYaml({file=tests/data/opensearch-build-1.1.0.yml})
                     BuildManifest.asBoolean()
                     BuildManifest.getArtifactRootUrl(https://ci.opensearch.org/dbc, vars-build, 33)
                     assembleManifest.sh(echo ./assemble.sh "tests/data/opensearch-build-1.1.0.yml" --base-url https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64)
                  buildAssembleUpload.uploadArtifacts({dryRun=true, manifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64})
                     uploadArtifacts.legacySCM(groovy.lang.Closure)
                     uploadArtifacts.library({identifier=jenkins@20211123, retriever=null})
                     uploadArtifacts.readYaml({file=tests/data/opensearch-build-1.1.0.yml})
                     BuildManifest.asBoolean()
                     BuildManifest.getArtifactRoot(vars-build, 33)
                     uploadArtifacts.echo(Uploading to s3://artifact-bucket/vars-build/1.1.0/33/linux/x64)
                     uploadArtifacts.withAWS({role=opensearch-bundle, roleAccount=account, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        uploadArtifacts.echo(s3Upload(file: 'builds', bucket: artifact-bucket, path: vars-build/1.1.0/33/linux/x64/builds))
                        uploadArtifacts.echo(s3Upload(file: 'dist', bucket: artifact-bucket, path: vars-build/1.1.0/33/linux/x64/dist))
                     BuildManifest.getArtifactRootUrl(https://ci.opensearch.org/dbc, vars-build, 33)
                     Messages.asBoolean()
                     Messages.add(stage, https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/builds/opensearch/manifest.yml
https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/dist/opensearch/manifest.yml)
                        uploadArtifacts.writeFile({file=messages/stage.msg, text=https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/builds/opensearch/manifest.yml
https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/dist/opensearch/manifest.yml})
                        uploadArtifacts.stash({includes=messages/*, name=messages-stage})
                  buildAssembleUpload.withAWS({role=opensearch-bundle, roleAccount=account, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                     buildAssembleUpload.echo(s3Upload(bucket: artifact-bucket, file: tests/jenkins/data/opensearch-1.3.0.yml, path: vars-build/1.3.0/shas/linux/x64/sha1.yml))
         IncrementalBuild_Jenkinsfile.stage(docker, no build, groovy.lang.Closure)
            IncrementalBuild_Jenkinsfile.script(groovy.lang.Closure)
               IncrementalBuild_Jenkinsfile.buildDockerImage({manifest=tests/jenkins/data/opensearch-1.3.0.yml, dryRun=false})
                  buildDockerImage.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                  buildDockerImage.legacySCM(groovy.lang.Closure)
                  buildDockerImage.library({identifier=jenkins@20211123, retriever=null})
                  buildDockerImage.readYaml({file=tests/jenkins/data/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  InputManifest.getPublicDistUrl(https://ci.opensearch.org/dbc, vars-build, 33, linux, x64)
                  InputManifest.getPublicDistUrl(https://ci.opensearch.org/dbc, vars-build, 33, linux, arm64)
                  buildDockerImage.httpRequest({httpMode=HEAD, url=https://ci.opensearch.org/dbc/vars-build/1.3.0/33/linux/x64/dist/opensearch/opensearch-1.3.0-linux-x64.tar.gz})
                  buildDockerImage.httpRequest({httpMode=HEAD, url=https://ci.opensearch.org/dbc/vars-build/1.3.0/33/linux/arm64/dist/opensearch/opensearch-1.3.0-linux-arm64.tar.gz})
                  buildDockerImage.echo(Skipping docker build.
https://ci.opensearch.org/dbc/vars-build/1.3.0/33/linux/x64/dist/opensearch/opensearch-1.3.0-linux-x64.tar.gz (404)
https://ci.opensearch.org/dbc/vars-build/1.3.0/33/linux/arm64/dist/opensearch/opensearch-1.3.0-linux-arm64.tar.gz (404))
         IncrementalBuild_Jenkinsfile.stage(docker, existing build, groovy.lang.Closure)
            IncrementalBuild_Jenkinsfile.script(groovy.lang.Closure)
               IncrementalBuild_Jenkinsfile.buildDockerImage({manifest=tests/jenkins/data/opensearch-1.3.0.yml, dryRun=true})
                  buildDockerImage.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                  buildDockerImage.legacySCM(groovy.lang.Closure)
                  buildDockerImage.library({identifier=jenkins@20211123, retriever=null})
                  buildDockerImage.readYaml({file=tests/jenkins/data/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  InputManifest.getPublicDistUrl(https://ci.opensearch.org/dbc, vars-build, 33, linux, x64)
                  InputManifest.getPublicDistUrl(https://ci.opensearch.org/dbc, vars-build, 33, linux, arm64)
                  buildDockerImage.string({name=DOCKER_BUILD_GIT_REPOSITORY, value=https://github.com/opensearch-project/opensearch-build})
                  buildDockerImage.string({name=DOCKER_BUILD_GIT_REPOSITORY_REFERENCE, value=main})
                  buildDockerImage.string({name=DOCKER_BUILD_SCRIPT_WITH_COMMANDS, value=id && pwd && cd docker/release && curl -sSL https://ci.opensearch.org/dbc/vars-build/1.3.0/33/linux/x64/dist/opensearch/opensearch-1.3.0-linux-x64.tar.gz -o opensearch-x64.tgz && curl -sSL https://ci.opensearch.org/dbc/vars-build/1.3.0/33/linux/arm64/dist/opensearch/opensearch-1.3.0-linux-arm64.tar.gz -o opensearch-arm64.tgz && bash build-image-multi-arch.sh -v 1.3.0 -f ./dockerfiles/opensearch.al2.dockerfile -p opensearch -a 'x64,arm64' -r opensearchstaging/opensearch -t 'opensearch-x64.tgz,opensearch-arm64.tgz' -n 33})
                  buildDockerImage.booleanParam({name=IS_STAGING, value=true})
                  buildDockerImage.echo(dockerBuild: { build job: 'docker-build', parameters: [null, null, null, null] })

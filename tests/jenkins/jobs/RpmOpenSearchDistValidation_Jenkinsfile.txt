   RpmOpenSearchDistValidation_Jenkinsfile.run()
      RpmOpenSearchDistValidation_Jenkinsfile.pipeline(groovy.lang.Closure)
         RpmOpenSearchDistValidation_Jenkinsfile.echo(Executing on agent [label:none])
         RpmOpenSearchDistValidation_Jenkinsfile.stage(validate RPM meta, groovy.lang.Closure)
            RpmOpenSearchDistValidation_Jenkinsfile.script(groovy.lang.Closure)
               RpmOpenSearchDistValidation_Jenkinsfile.rpmOpenSearchDistValidation({bundleManifest=tests/jenkins/data/opensearch-1.3.1-x64-rpm.yml, rpmDistribution=/tmp/workspace/opensearch-1.3.1-linux-x64.rpm})
                  rpmOpenSearchDistValidation.legacySCM(groovy.lang.Closure)
                  rpmOpenSearchDistValidation.library({identifier=jenkins@20211123, retriever=null})
                  rpmOpenSearchDistValidation.readYaml({file=tests/jenkins/data/opensearch-1.3.1-x64-rpm.yml})
                  BundleManifest.asBoolean()
                  BundleManifest.getNames()
                  rpmOpenSearchDistValidation.rpmMetaValidation({rpmDistribution=/tmp/workspace/opensearch-1.3.1-linux-x64.rpm, refMap={Name=opensearch, Version=1.3.1, Architecture=x64, Group=Application/Internet, License=Apache-2.0, Relocations=(not relocatable), URL=https://opensearch.org/, Summary=An open source distributed and RESTful search engine, Description=OpenSearch makes it easy to ingest, search, visualize, and analyze your data
For more information, see: https://opensearch.org/}})
                     rpmMetaValidation.sh({script=rpm -qip /tmp/workspace/opensearch-1.3.1-linux-x64.rpm, returnStdout=true})
                     rpmMetaValidation.println(Meta data for Name is validated)
                     rpmMetaValidation.println(Meta data for Version is validated)
                     rpmMetaValidation.println(Meta data for Architecture is validated)
                     rpmMetaValidation.println(Meta data for Group is validated)
                     rpmMetaValidation.println(Meta data for License is validated)
                     rpmMetaValidation.println(Meta data for Relocations is validated)
                     rpmMetaValidation.println(Meta data for URL is validated)
                     rpmMetaValidation.println(Meta data for Summary is validated)
                     rpmMetaValidation.println(Meta data for Description is validated)
                     rpmMetaValidation.sh({script=rpm -K -v /tmp/workspace/opensearch-1.3.1-linux-x64.rpm, returnStdout=true})
                  rpmOpenSearchDistValidation.rpmCommands({command=install, product=opensearch-1.3.1})
                     rpmCommands.sh(yum install -y opensearch-1.3.1)
                  rpmOpenSearchDistValidation.sh([[ -d /etc/opensearch ]] && echo "/etc/opensearch directory exists"|| (echo "/etc/opensearch does not exist" && exit 1))
                  rpmOpenSearchDistValidation.sh({script=ls /etc/opensearch, returnStdout=true})
                  rpmOpenSearchDistValidation.println(esnode-key.pem is found existed)
                  rpmOpenSearchDistValidation.println(kirk.pem is found existed)
                  rpmOpenSearchDistValidation.println(esnode.pem is found existed)
                  rpmOpenSearchDistValidation.println(kirk-key.pem is found existed)
                  rpmOpenSearchDistValidation.println(root-ca.pem is found existed)
                  rpmOpenSearchDistValidation.sh([[ -f /var/log/opensearch/install_demo_configuration.log ]] && echo "install_demo_configuration.log exists" || (echo "install_demo_configuration.log does not exist" && exit 1))
                  rpmOpenSearchDistValidation.sh({script=cat /var/log/opensearch/install_demo_configuration.log, returnStdout=true})
                  rpmOpenSearchDistValidation.systemdCommands({command=start, product=opensearch})
                     systemdCommands.sh(systemctl start opensearch)
                  rpmOpenSearchDistValidation.systemdCommands({command=status, product=opensearch})
                     systemdCommands.sh({script=systemctl status opensearch, returnStdout=true})
                  rpmOpenSearchDistValidation.sh({script=curl -s "https://localhost:9200" -u admin:admin --insecure, returnStdout=true})
                  rpmOpenSearchDistValidation.readJSON({text=['name':'dummy_desktop', 'cluster_name':'opensearch', 'status':'green', 'cluster_uuid':'uClFQNw6T_KCO2fmdP2jTA', 'version':['distribution':'opensearch', 'number':'1.3.1', 'build_type':'rpm', 'build_hash':'40481be2be0536a34588b1fad10eb6c289713803', 'build_date':'2022-03-28T18:33:36.499005Z', 'build_snapshot':false, 'lucene_version':'8.10.1', 'minimum_wire_compatibility_version':'6.8.0', 'minimum_index_compatibility_version':'6.0.0-beta1'], 'tagline':'The OpenSearch Project: https://opensearch.org/']})
                  rpmOpenSearchDistValidation.sh({script=curl -s "https://localhost:9200/_cluster/health?pretty" -u admin:admin --insecure, returnStdout=true})
                  rpmOpenSearchDistValidation.readJSON({text=['cluster_name':'opensearch', 'status':'green', 'timed_out':false, 'number_of_nodes':1, 'number_of_data_nodes':1, 'discovered_master':true, 'active_primary_shards':1, 'active_shards':1, 'relocating_shards':0, 'initializing_shards':0, 'unassigned_shards':0, 'delayed_unassigned_shards':0, 'number_of_pending_tasks':0, 'number_of_in_flight_fetch':0, 'task_max_waiting_in_queue_millis':0, 'active_shards_percent_as_number':100.0]})
                  rpmOpenSearchDistValidation.sh({script=curl -s "https://localhost:9200/_cat/plugins" -u admin:admin --insecure, returnStdout=true})
                  BundleManifest.getLocation(job-scheduler)
                  BundleManifest.getLocation(ml-commons)
                  BundleManifest.getLocation(alerting)
                  rpmOpenSearchDistValidation.systemdCommands({command=start, product=opensearch-performance-analyzer})
                     systemdCommands.sh(systemctl start opensearch-performance-analyzer)
                  rpmOpenSearchDistValidation.echo(Sleep for few seconds before checking PA)
                  rpmOpenSearchDistValidation.systemdCommands({command=status, product=opensearch-performance-analyzer})
                     systemdCommands.sh({script=systemctl status opensearch-performance-analyzer, returnStdout=true})
                  rpmOpenSearchDistValidation.sh([[ -f /tmp/PerformanceAnalyzer.log ]] && echo "PerformanceAnalyzer.log exists" || (echo "PerformanceAnalyzer.log does not exist" && exit 1))
                  rpmOpenSearchDistValidation.sh([[ -f /tmp/performance_analyzer_agent_stats.log ]] && echo "performance_analyzer_agent_stats.log exists" || (echo "performance_analyzer_agent_stats.log does not exist" && exit 1))
                  rpmOpenSearchDistValidation.sh({script=curl -s localhost:9600/_plugins/_performanceanalyzer/metrics?metrics=CPU_Utilization\&agg=avg, returnStdout=true})
                  rpmOpenSearchDistValidation.systemdCommands({command=stop, product=opensearch})
                     systemdCommands.sh(systemctl stop opensearch)
                  rpmOpenSearchDistValidation.rpmCommands({command=remove, product=opensearch})
                     rpmCommands.sh(yum remove -y opensearch)

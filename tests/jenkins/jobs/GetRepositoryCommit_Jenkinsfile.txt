   GetRepositoryCommit_Jenkinsfile.run()
      GetRepositoryCommit_Jenkinsfile.pipeline(groovy.lang.Closure)
         GetRepositoryCommit_Jenkinsfile.echo(Executing on agent [label:none])
         GetRepositoryCommit_Jenkinsfile.stage(get repository commits, groovy.lang.Closure)
            GetRepositoryCommit_Jenkinsfile.script(groovy.lang.Closure)
               GetRepositoryCommit_Jenkinsfile.getRepositoryCommit({componentName=, inputManifest=tests/jenkins/data/opensearch-2.0.0.yml, outputFile=commits.yml})
                  getRepositoryCommit.sh(#!/bin/bash

        set +x
        set -e

        COMPONENT_LIST=()
        COMPONENT_URL_LIST=()
        COMPONENT_REF_LIST=()

        mkdir -p commits; cd commits
        CURR_DIR=`pwd`
        OUTPUT_FILE=commits.yml
        cp -v /tmp/workspace/tests/jenkins/data/opensearch-2.0.0.yml /tmp/workspace/$OUTPUT_FILE

        if [ -z "" ]; then
            echo "Component list not specified so search the entire input manifest: /tmp/workspace/tests/jenkins/data/opensearch-2.0.0.yml"
            read -r -a COMPONENT_LIST <<< `yq e '.components[].name' /tmp/workspace/tests/jenkins/data/opensearch-2.0.0.yml | tr '
' ' '`
            echo "Component list: ${COMPONENT_LIST[@]}"
        else
            echo "Specified component list: "
            for comp in ; do
                comp_temp=`yq e ".components[] | select(.name == \"$comp\") | .name" /tmp/workspace/tests/jenkins/data/opensearch-2.0.0.yml | tr '
' ' ' | head -n 1`
                if [ -z "$comp_temp" ] || [ "$comp_temp" = "null" ]; then
                    echo "ERROR: $comp does not exist in manifest /tmp/workspace/tests/jenkins/data/opensearch-2.0.0.yml"
                    exit 1
                fi
            done
            read -r -a COMPONENT_LIST <<< ""
            echo "Component list: ${COMPONENT_LIST[@]}"
        fi

        for entry in ${COMPONENT_LIST[@]}; do
            COMPONENT_URL_LIST+=(`yq e ".components[] | select(.name == \"$entry\") | .repository" /tmp/workspace/tests/jenkins/data/opensearch-2.0.0.yml | tr '
' ' ' | head -n 1`)
            COMPONENT_REF_LIST+=(`yq e ".components[] | select(.name == \"$entry\") | .ref" /tmp/workspace/tests/jenkins/data/opensearch-2.0.0.yml | tr '
' ' ' | head -n 1`)
        done

        echo "Component url list: ${COMPONENT_URL_LIST[@]}"
        echo "Component ref list: ${COMPONENT_REF_LIST[@]}"

        for index in ${!COMPONENT_LIST[@]}; do
            cd $CURR_DIR
            mkdir -p ${COMPONENT_LIST[$index]}
            cd ${COMPONENT_LIST[$index]}
            git init -q
            git remote add origin ${COMPONENT_URL_LIST[$index]}
            git fetch --depth 1 origin ${COMPONENT_REF_LIST[$index]}
            git checkout -q FETCH_HEAD
            REAL_REF=`git rev-parse HEAD`
            echo $REAL_REF
            yq -i ".components |= map(select(.name == \"${COMPONENT_LIST[$index]}\").ref=\"$REAL_REF\")" /tmp/workspace/$OUTPUT_FILE
        done
    )

pipeline {
    agent none
    stages {
        stage('sign') {
            steps {
                script {
                    if (URLs == '' || S3_FILE_UPLOAD_PATH == '') {
                        currentBuild.result = 'ABORTED'
                        error('URLs or S3_FILE_UPLOAD_PATH params are not set')
                    }
                    S3_FILE_UPLOAD_PATH = S3_FILE_UPLOAD_PATH.replaceAll('/$', "")
                    S3_FILE_UPLOAD_PATH = S3_FILE_UPLOAD_PATH.replaceAll('^/+', "")
                    downloadedFiles = downloadArtifactsFromUrls()
                    signArtifacts(
                            artifactPath: "$WORKSPACE/artifacts/",
                            signatureType: SIGNATURE_TYPE,
                            distributionPlatform: DISTRIBUTION_PLATFORM
                    )

                    finalUploadPath = ([
                            "${JOB_NAME}",
                            "${S3_FILE_UPLOAD_PATH}",
                            "${BUILD_NUMBER}",
                            "dist",
                            "signed"
                    ].join('/'))

                    // uploading artifacts with signatures on s3
                    uploadToS3(
                            sourcePath: "$WORKSPACE/artifacts",
                            bucket: "${ARTIFACT_BUCKET_NAME}",
                            path: finalUploadPath
                    )

                    printUrls(downloadedFiles)

                }
            }
        }
    }
}

void printUrls(downloadedFiles){

    println("Note: only supported file types will be signed")

    for(filename in downloadedFiles){

        println("Artifacts can be accessed using the url - https://ci.opensearch.org/ci/dbc/${finalUploadPath}/${filename}" )
        println("Signatures can be accessed using the url - https://ci.opensearch.org/ci/dbc/${finalUploadPath}/${filename}${SIGNATURE_TYPE}" )

    }

}

List downloadArtifactsFromUrls() {

    listOfURls = URLs.split(",")

    def downloadedFiles = []

    sh "mkdir ${WORKSPACE}/artifacts"

    for (url in listOfURls) {
        trimmedUrl = url.trim()
        filename = trimmedUrl.substring(trimmedUrl.lastIndexOf('/') + 1)
        downloadedFiles.add(filename)
        sh "curl -SL ${trimmedUrl} -o ${WORKSPACE}/artifacts/${filename}"
    }

    return downloadedFiles

}

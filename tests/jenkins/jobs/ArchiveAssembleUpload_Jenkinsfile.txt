   ArchiveAssembleUpload_Jenkinsfile.run()
      ArchiveAssembleUpload_Jenkinsfile.pipeline(groovy.lang.Closure)
         ArchiveAssembleUpload_Jenkinsfile.echo(Executing on agent [label:none])
         ArchiveAssembleUpload_Jenkinsfile.stage(assemble from archive, groovy.lang.Closure)
            ArchiveAssembleUpload_Jenkinsfile.script(groovy.lang.Closure)
               ArchiveAssembleUpload_Jenkinsfile.archiveAssembleUpload({inputManifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64, distribution=tar, stashName=test-stash-tar})
                  archiveAssembleUpload.legacySCM(groovy.lang.Closure)
                  archiveAssembleUpload.library({identifier=jenkins@20211123, retriever=null})
                  archiveAssembleUpload.readYaml({file=tests/jenkins/data/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  archiveAssembleUpload.echo(Unstashing test-stash-tar before starting the assemble process)
                  archiveAssembleUpload.unstash(test-stash-tar)
                  archiveAssembleUpload.echo(Assembling tests/jenkins/data/opensearch-1.3.0.yml)
                  archiveAssembleUpload.readYaml({file=tar/builds/opensearch/manifest.yml})
                  BuildManifest.asBoolean()
                  archiveAssembleUpload.assembleUpload({inputManifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64, distribution=tar, stashName=test-stash-tar, buildManifest=tar/builds/opensearch/manifest.yml})
                     assembleUpload.legacySCM(groovy.lang.Closure)
                     assembleUpload.library({identifier=jenkins@20211123, retriever=null})
                     assembleUpload.assembleManifest({inputManifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64, distribution=tar, stashName=test-stash-tar, buildManifest=tar/builds/opensearch/manifest.yml})
                        assembleManifest.legacySCM(groovy.lang.Closure)
                        assembleManifest.library({identifier=jenkins@20211123, retriever=null})
                        assembleManifest.readYaml({file=tar/builds/opensearch/manifest.yml})
                        BuildManifest.asBoolean()
                        BuildManifest.getArtifactRootUrlWithoutDistribution(https://ci.opensearch.org/dbc, vars-build, 33)
                        assembleManifest.sh(./assemble.sh "tar/builds/opensearch/manifest.yml" --base-url https://ci.opensearch.org/dbc/vars-build/1.3.0/33/linux/x64)
                     assembleUpload.uploadArtifacts({inputManifest=tests/jenkins/data/opensearch-1.3.0.yml, platform=linux, architecture=x64, distribution=tar, stashName=test-stash-tar, buildManifest=tar/builds/opensearch/manifest.yml})
                        uploadArtifacts.legacySCM(groovy.lang.Closure)
                        uploadArtifacts.library({identifier=jenkins@20211123, retriever=null})
                        uploadArtifacts.readYaml({file=tar/builds/opensearch/manifest.yml})
                        BuildManifest.asBoolean()
                        BuildManifest.getMinArtifact()
                        BuildManifest.getArtifactRoot(vars-build, 33)
                        uploadArtifacts.string({credentialsId=jenkins-artifact-bucket-name, variable=ARTIFACT_BUCKET_NAME})
                        uploadArtifacts.string({credentialsId=jenkins-artifact-production-bucket-name, variable=ARTIFACT_PRODUCTION_BUCKET_NAME})
                        uploadArtifacts.string({credentialsId=jenkins-aws-production-account, variable=AWS_ACCOUNT_ARTIFACT})
                        uploadArtifacts.withCredentials([ARTIFACT_BUCKET_NAME, ARTIFACT_PRODUCTION_BUCKET_NAME, AWS_ACCOUNT_ARTIFACT], groovy.lang.Closure)
                           uploadArtifacts.echo(Uploading to s3://ARTIFACT_BUCKET_NAME/vars-build/1.3.0/33/linux/x64/tar)
                           uploadArtifacts.uploadToS3({sourcePath=tar/builds, bucket=ARTIFACT_BUCKET_NAME, path=vars-build/1.3.0/33/linux/x64/tar/builds})
                              uploadToS3.string({credentialsId=jenkins-aws-account-public, variable=AWS_ACCOUNT_PUBLIC})
                              uploadToS3.withCredentials([AWS_ACCOUNT_PUBLIC], groovy.lang.Closure)
                                 uploadToS3.withAWS({role=opensearch-bundle, roleAccount=AWS_ACCOUNT_PUBLIC, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                                    uploadToS3.s3Upload({file=tar/builds, bucket=ARTIFACT_BUCKET_NAME, path=vars-build/1.3.0/33/linux/x64/tar/builds})
                           uploadArtifacts.uploadToS3({sourcePath=tar/dist, bucket=ARTIFACT_BUCKET_NAME, path=vars-build/1.3.0/33/linux/x64/tar/dist})
                              uploadToS3.string({credentialsId=jenkins-aws-account-public, variable=AWS_ACCOUNT_PUBLIC})
                              uploadToS3.withCredentials([AWS_ACCOUNT_PUBLIC], groovy.lang.Closure)
                                 uploadToS3.withAWS({role=opensearch-bundle, roleAccount=AWS_ACCOUNT_PUBLIC, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                                    uploadToS3.s3Upload({file=tar/dist, bucket=ARTIFACT_BUCKET_NAME, path=vars-build/1.3.0/33/linux/x64/tar/dist})
                           uploadArtifacts.echo(Uploading to s3://ARTIFACT_PRODUCTION_BUCKET_NAME/vars-build/1.3.0/33/linux/x64/tar)
                           uploadArtifacts.withAWS({role=role, roleAccount=AWS_ACCOUNT_ARTIFACT, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                              uploadArtifacts.s3Upload({file=tar/builds/opensearch/dist/opensearch-min-1.3.0-linux-x64.tar.gz, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=release-candidates/core/opensearch/1.3.0/})
                              uploadArtifacts.s3Upload({file=tar/dist/opensearch/opensearch-1.3.0-linux-x64.tar.gz, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=release-candidates/bundle/opensearch/1.3.0/})
                        BuildManifest.getArtifactRootUrl(https://ci.opensearch.org/dbc, vars-build, 33)
                        Messages.asBoolean()
                        Messages.add(stage, https://ci.opensearch.org/dbc/vars-build/1.3.0/33/linux/x64/tar/builds/opensearch/manifest.yml
https://ci.opensearch.org/dbc/vars-build/1.3.0/33/linux/x64/tar/dist/opensearch/manifest.yml)
                           uploadArtifacts.writeFile({file=messages/stage.msg, text=https://ci.opensearch.org/dbc/vars-build/1.3.0/33/linux/x64/tar/builds/opensearch/manifest.yml
https://ci.opensearch.org/dbc/vars-build/1.3.0/33/linux/x64/tar/dist/opensearch/manifest.yml})
                           uploadArtifacts.stash({includes=messages/*, name=messages-stage})

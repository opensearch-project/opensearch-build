   release-tag.run()
      release-tag.modernSCM({$class=GitSCMSource, remote=https://github.com/opensearch-project/opensearch-build-libraries.git})
      release-tag.library({identifier=jenkins@1.0.4, retriever=null})
      release-tag.pipeline(groovy.lang.Closure)
         release-tag.timeout({time=2, unit=HOURS})
         release-tag.echo(Executing on agent [docker:[alwaysPull:true, args:, containerPerStageRoot:false, label:Jenkins-Agent-AL2023-X64-M54xlarge-Docker-Host, image:opensearchstaging/ci-runner:ci-runner-centos7-opensearch-build-v3, reuseNode:false, registryUrl:https://public.ecr.aws/, stages:[:]]])
         release-tag.stage(Create Release Tag for OpenSearch components, groovy.lang.Closure)
            release-tag.script(groovy.lang.Closure)
               release-tag.sh(curl -SLO https://artifacts.opensearch.org/releases/bundle/opensearch/2.16.0/opensearch-2.16.0-linux-x64.tar.gz && tar -xf opensearch-2.16.0-linux-x64.tar.gz opensearch-2.16.0/manifest.yml)
               release-tag.echo(The release distribution manifest is downloaded to opensearch-2.16.0/manifest.yml)
               release-tag.createReleaseTag({distManifest=opensearch-2.16.0/manifest.yml, tagVersion=2.16.0})
                  createReleaseTag.legacySCM(groovy.lang.Closure)
                  createReleaseTag.library({identifier=jenkins@1.0.4, retriever=null})
                  createReleaseTag.readYaml({file=opensearch-2.16.0/manifest.yml})
                  BundleManifest.asBoolean()
                  BundleManifest.getNames()
                  createReleaseTag.echo(Creating 2.16.0 release tag for 5 components in the manifest)
                  createReleaseTag.usernamePassword({credentialsId=github_bot_token_name, usernameVariable=GITHUB_USER, passwordVariable=GITHUB_TOKEN})
                  createReleaseTag.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                     BundleManifest.getCommitId(security)
                     BundleManifest.getRepo(security)
                     createReleaseTag.echo(Tagging security at 30760168263404e628a25fd13a54100d2610810c ...)
                     createReleaseTag.dir(security, groovy.lang.Closure)
                        createReleaseTag.checkout({$class=GitSCM, branches=[{name=30760168263404e628a25fd13a54100d2610810c}], userRemoteConfigs=[{url=https://github.com/opensearch-project/security.git}]})
                        createReleaseTag.sh({script=git ls-remote --tags https://github.com/opensearch-project/security.git 2.16.0.0 | awk 'NR==1{print $1}', returnStdout=true})
                        createReleaseTag.echo(Tag 2.16.0.0 has been created with identical commit ID. Skipping creating new tag for security.)
                     BundleManifest.getCommitId(job-scheduler)
                     BundleManifest.getRepo(job-scheduler)
                     createReleaseTag.echo(Tagging job-scheduler at b36f79336db82fd45db5665a5ac2e9368f0a1cdf ...)
                     createReleaseTag.dir(job-scheduler, groovy.lang.Closure)
                        createReleaseTag.checkout({$class=GitSCM, branches=[{name=b36f79336db82fd45db5665a5ac2e9368f0a1cdf}], userRemoteConfigs=[{url=https://github.com/opensearch-project/job-scheduler.git}]})
                        createReleaseTag.sh({script=git ls-remote --tags https://github.com/opensearch-project/job-scheduler.git 2.16.0.0 | awk 'NR==1{print $1}', returnStdout=true})
                        createReleaseTag.echo(Tag 2.16.0.0 has been created with identical commit ID. Skipping creating new tag for job-scheduler.)
                     BundleManifest.getCommitId(k-NN)
                     BundleManifest.getRepo(k-NN)
                     createReleaseTag.echo(Tagging k-NN at c8ec49f1e2c9603498ca679727a499dc0b296e26 ...)
                     createReleaseTag.dir(k-NN, groovy.lang.Closure)
                        createReleaseTag.checkout({$class=GitSCM, branches=[{name=c8ec49f1e2c9603498ca679727a499dc0b296e26}], userRemoteConfigs=[{url=https://github.com/opensearch-project/k-NN.git}]})
                        createReleaseTag.sh({script=git ls-remote --tags https://github.com/opensearch-project/k-NN.git 2.16.0.0 | awk 'NR==1{print $1}', returnStdout=true})
                        createReleaseTag.echo(Tag 2.16.0.0 has been created with identical commit ID. Skipping creating new tag for k-NN.)
                     BundleManifest.getCommitId(common-utils)
                     BundleManifest.getRepo(common-utils)
                     createReleaseTag.echo(Tagging common-utils at cbc06a5eafe0009edbb2c865d7cd30262d04e502 ...)
                     createReleaseTag.dir(common-utils, groovy.lang.Closure)
                        createReleaseTag.checkout({$class=GitSCM, branches=[{name=cbc06a5eafe0009edbb2c865d7cd30262d04e502}], userRemoteConfigs=[{url=https://github.com/opensearch-project/common-utils.git}]})
                        createReleaseTag.sh({script=git ls-remote --tags https://github.com/opensearch-project/common-utils.git 2.16.0.0 | awk 'NR==1{print $1}', returnStdout=true})
                        createReleaseTag.echo(Tag 2.16.0.0 has been created with identical commit ID. Skipping creating new tag for common-utils.)
                     BundleManifest.getCommitId(OpenSearch)
                     BundleManifest.getRepo(OpenSearch)
                     createReleaseTag.echo(Tagging OpenSearch at f84a26e76807ea67a69822c37b1a1d89e7177d9b ...)
                     createReleaseTag.dir(OpenSearch, groovy.lang.Closure)
                        createReleaseTag.checkout({$class=GitSCM, branches=[{name=f84a26e76807ea67a69822c37b1a1d89e7177d9b}], userRemoteConfigs=[{url=https://github.com/opensearch-project/OpenSearch.git}]})
                        createReleaseTag.sh({script=git ls-remote --tags https://github.com/opensearch-project/OpenSearch.git 2.16.0 | awk 'NR==1{print $1}', returnStdout=true})
                        createReleaseTag.echo(Tag 2.16.0 has been created with identical commit ID. Skipping creating new tag for OpenSearch.)
         release-tag.stage(Create Release Tag for OpenSearch-Dasboards components, groovy.lang.Closure)
            release-tag.script(groovy.lang.Closure)
               release-tag.sh(curl -SLO https://artifacts.opensearch.org/releases/bundle/opensearch-dashboards/2.16.0/opensearch-dashboards-2.16.0-linux-x64.tar.gz && tar -xf opensearch-dashboards-2.16.0-linux-x64.tar.gz opensearch-dashboards-2.16.0/manifest.yml)
               release-tag.echo(The release distribution manifest is downloaded to opensearch-dashboards-2.16.0/manifest.yml)
               release-tag.createReleaseTag({distManifest=opensearch-dashboards-2.16.0/manifest.yml, tagVersion=2.16.0})
                  createReleaseTag.legacySCM(groovy.lang.Closure)
                  createReleaseTag.library({identifier=jenkins@1.0.4, retriever=null})
                  createReleaseTag.readYaml({file=opensearch-dashboards-2.16.0/manifest.yml})
                  BundleManifest.asBoolean()
                  BundleManifest.getNames()
                  createReleaseTag.echo(Creating 2.16.0 release tag for 5 components in the manifest)
                  createReleaseTag.usernamePassword({credentialsId=github_bot_token_name, usernameVariable=GITHUB_USER, passwordVariable=GITHUB_TOKEN})
                  createReleaseTag.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                     BundleManifest.getCommitId(ganttChartDashboards)
                     BundleManifest.getRepo(ganttChartDashboards)
                     createReleaseTag.echo(Tagging ganttChartDashboards at 5e86965658791648fad9d0fc573e470c59cce674 ...)
                     createReleaseTag.dir(ganttChartDashboards, groovy.lang.Closure)
                        createReleaseTag.checkout({$class=GitSCM, branches=[{name=5e86965658791648fad9d0fc573e470c59cce674}], userRemoteConfigs=[{url=https://github.com/opensearch-project/dashboards-visualizations.git}]})
                        createReleaseTag.sh({script=git ls-remote --tags https://github.com/opensearch-project/dashboards-visualizations.git 2.16.0.0 | awk 'NR==1{print $1}', returnStdout=true})
                        createReleaseTag.echo(Tag 2.16.0.0 has been created with identical commit ID. Skipping creating new tag for ganttChartDashboards.)
                     BundleManifest.getCommitId(OpenSearch-Dashboards)
                     BundleManifest.getRepo(OpenSearch-Dashboards)
                     createReleaseTag.echo(Tagging OpenSearch-Dashboards at 4b8826e7ffa6562825ca8aad676a8d89983c2d70 ...)
                     createReleaseTag.dir(OpenSearch-Dashboards, groovy.lang.Closure)
                        createReleaseTag.checkout({$class=GitSCM, branches=[{name=4b8826e7ffa6562825ca8aad676a8d89983c2d70}], userRemoteConfigs=[{url=https://github.com/opensearch-project/OpenSearch-Dashboards.git}]})
                        createReleaseTag.sh({script=git ls-remote --tags https://github.com/opensearch-project/OpenSearch-Dashboards.git 2.16.0 | awk 'NR==1{print $1}', returnStdout=true})
                        createReleaseTag.echo(Tag 2.16.0 has been created with identical commit ID. Skipping creating new tag for OpenSearch-Dashboards.)
                     BundleManifest.getCommitId(functionalTestDashboards)
                     BundleManifest.getRepo(functionalTestDashboards)
                     createReleaseTag.echo(Tagging functionalTestDashboards at 7c5e0482b844828cf2aec3b63841bd5d336d5668 ...)
                     createReleaseTag.dir(functionalTestDashboards, groovy.lang.Closure)
                        createReleaseTag.checkout({$class=GitSCM, branches=[{name=7c5e0482b844828cf2aec3b63841bd5d336d5668}], userRemoteConfigs=[{url=https://github.com/opensearch-project/opensearch-dashboards-functional-test.git}]})
                        createReleaseTag.sh({script=git ls-remote --tags https://github.com/opensearch-project/opensearch-dashboards-functional-test.git 2.16.0 | awk 'NR==1{print $1}', returnStdout=true})
                        createReleaseTag.echo(Tag 2.16.0 has been created with identical commit ID. Skipping creating new tag for functionalTestDashboards.)
                     BundleManifest.getCommitId(reportsDashboards)
                     BundleManifest.getRepo(reportsDashboards)
                     createReleaseTag.echo(Tagging reportsDashboards at 49057e4f82b0390dc28d0e08009ec5f892d7af1a ...)
                     createReleaseTag.dir(reportsDashboards, groovy.lang.Closure)
                        createReleaseTag.checkout({$class=GitSCM, branches=[{name=49057e4f82b0390dc28d0e08009ec5f892d7af1a}], userRemoteConfigs=[{url=https://github.com/opensearch-project/dashboards-reporting.git}]})
                        createReleaseTag.sh({script=git ls-remote --tags https://github.com/opensearch-project/dashboards-reporting.git 2.16.0.0 | awk 'NR==1{print $1}', returnStdout=true})
                        createReleaseTag.echo(Tag 2.16.0.0 has been created with identical commit ID. Skipping creating new tag for reportsDashboards.)
                     BundleManifest.getCommitId(observabilityDashboards)
                     BundleManifest.getRepo(observabilityDashboards)
                     createReleaseTag.echo(Tagging observabilityDashboards at 24d368e882ec01ff98e556725b84e332d4ab825e ...)
                     createReleaseTag.dir(observabilityDashboards, groovy.lang.Closure)
                        createReleaseTag.checkout({$class=GitSCM, branches=[{name=24d368e882ec01ff98e556725b84e332d4ab825e}], userRemoteConfigs=[{url=https://github.com/opensearch-project/dashboards-observability.git}]})
                        createReleaseTag.sh({script=git ls-remote --tags https://github.com/opensearch-project/dashboards-observability.git 2.16.0.0 | awk 'NR==1{print $1}', returnStdout=true})
                        createReleaseTag.echo(Tag 2.16.0.0 has been created with identical commit ID. Skipping creating new tag for observabilityDashboards.)
         release-tag.stage(Lock Manifests to tags, groovy.lang.Closure)
            release-tag.echo(Triggering manifest lock workflow)
            release-tag.string({name=RELEASE_VERSION, value=2.16.0})
            release-tag.string({name=MANIFEST_LOCK_ACTION, value=UPDATE_TO_TAGS})
            release-tag.build({job=release-manifest-commit-lock, wait=true, parameters=[null, null]})
            release-tag.echo(Pull Request to lock manifest created successfully!)
         release-tag.script(groovy.lang.Closure)
            release-tag.postCleanup()
               postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})

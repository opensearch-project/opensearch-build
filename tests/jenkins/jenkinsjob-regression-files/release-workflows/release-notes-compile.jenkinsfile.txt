   release-notes-check.run()
      release-notes-check.modernSCM({$class=GitSCMSource, remote=https://github.com/opensearch-project/opensearch-build-libraries.git})
      release-notes-check.library({identifier=jenkins@1.0.4, retriever=null})
      release-notes-check.pipeline(groovy.lang.Closure)
         release-notes-check.timeout({time=2, unit=HOURS})
         release-notes-check.echo(Executing on agent [docker:[alwaysPull:true, args:, containerPerStageRoot:false, label:Jenkins-Agent-AL2023-X64-C54xlarge-Docker-Host, image:opensearchstaging/ci-runner:ci-runner-almalinux8-opensearch-build-v1, reuseNode:false, registryUrl:https://public.ecr.aws/, stages:[:]]])
         release-notes-check.stage(Parameters Check, groovy.lang.Closure)
            release-notes-check.script(groovy.lang.Closure)
         release-notes-check.echo(Skipping stage Check release notes)
         release-notes-check.stage(Generate consolidated release notes, groovy.lang.Closure)
            release-notes-check.script(groovy.lang.Closure)
               release-notes-check.sh(
                        #!/bin/bash
                        set +e
                        ./release_notes.sh compile manifests/3.0.0/opensearch-3.0.0.yml manifests/3.0.0/opensearch-dashboards-3.0.0.yml --output table.md
                    )
               release-notes-check.usernamePassword({credentialsId=jenkins-github-bot-token, passwordVariable=GITHUB_TOKEN, usernameVariable=GITHUB_USER})
               release-notes-check.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                  release-notes-check.sh(
                                git remote set-url origin "https://opensearch-ci:GITHUB_TOKEN@github.com/opensearch-project/opensearch-build"
                                git config user.email "opensearch-infra@amazon.com"
                                git config user.name "opensearch-ci"
                                git checkout -b release-notes
                            )
                  release-notes-check.sh({returnStdout=true, script=git status --porcelain})
                  release-notes-check.sh(
                                    git status --porcelain | grep '^ M' | cut -d " " -f3 | xargs git add
                                    git commit -sm "Add consolidated release notes for 3.0.0"
                                    git push origin release-notes --force
                                    gh pr create --title 'Add consolidated release notes for 3.0.0' --body 'Add consolidated release notes for 3.0.0' -H release-notes -B main
                                )
         release-notes-check.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})

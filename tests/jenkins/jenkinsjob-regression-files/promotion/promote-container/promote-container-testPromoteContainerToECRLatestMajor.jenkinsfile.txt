   promote-docker-ecr.run()
      promote-docker-ecr.modernSCM({$class=GitSCMSource, remote=https://github.com/opensearch-project/opensearch-build-libraries.git})
      promote-docker-ecr.library({identifier=jenkins@1.0.4, retriever=null})
      promote-docker-ecr.pipeline(groovy.lang.Closure)
         promote-docker-ecr.timeout({time=1, unit=HOURS})
         promote-docker-ecr.echo(Executing on agent [docker:[alwaysPull:false, args:-u root -v /var/run/docker.sock:/var/run/docker.sock, containerPerStageRoot:false, label:Jenkins-Agent-AL2023-X64-C54xlarge-Docker-Host, image:opensearchstaging/ci-runner:ubuntu2004-x64-docker-buildx0.9.1-qemu5.0-v1, reuseNode:false, registryUrl:https://public.ecr.aws/, stages:[:]]])
         promote-docker-ecr.stage(Parameters Check, groovy.lang.Closure)
            promote-docker-ecr.script(groovy.lang.Closure)
         promote-docker-ecr.stage(image-promote-to-prod, groovy.lang.Closure)
            promote-docker-ecr.script(groovy.lang.Closure)
               promote-docker-ecr.promoteContainer({imageRepository=opensearch:2.0.1.2901, version=2.0.1, dockerPromote=false, ecrPromote=true, latestTag=true, majorVersionTag=true})
                  promoteContainer.string({name=SOURCE_IMAGE_REGISTRY, value=opensearchstaging})
                  promoteContainer.string({name=SOURCE_IMAGE, value=opensearch:2.0.1.2901})
                  promoteContainer.string({name=DESTINATION_IMAGE_REGISTRY, value=public.ecr.aws/opensearchproject})
                  promoteContainer.string({name=DESTINATION_IMAGE, value=opensearch:2.0.1})
                  promoteContainer.build({job=docker-copy, parameters=[null, null, null, null]})
                  promoteContainer.string({name=SOURCE_IMAGE_REGISTRY, value=opensearchstaging})
                  promoteContainer.string({name=SOURCE_IMAGE, value=opensearch:2.0.1.2901})
                  promoteContainer.string({name=DESTINATION_IMAGE_REGISTRY, value=public.ecr.aws/opensearchproject})
                  promoteContainer.string({name=DESTINATION_IMAGE, value=opensearch:2})
                  promoteContainer.build({job=docker-copy, parameters=[null, null, null, null]})
                  promoteContainer.string({name=SOURCE_IMAGE_REGISTRY, value=opensearchstaging})
                  promoteContainer.string({name=SOURCE_IMAGE, value=opensearch:2.0.1.2901})
                  promoteContainer.string({name=DESTINATION_IMAGE_REGISTRY, value=public.ecr.aws/opensearchproject})
                  promoteContainer.string({name=DESTINATION_IMAGE, value=opensearch:latest})
                  promoteContainer.build({job=docker-copy, parameters=[null, null, null, null]})
               promote-docker-ecr.promoteContainer({imageRepository=opensearch-dashboards:2.0.1-2345, version=2.0.1, dockerPromote=false, ecrPromote=true, latestTag=true, majorVersionTag=true})
                  promoteContainer.string({name=SOURCE_IMAGE_REGISTRY, value=opensearchstaging})
                  promoteContainer.string({name=SOURCE_IMAGE, value=opensearch-dashboards:2.0.1-2345})
                  promoteContainer.string({name=DESTINATION_IMAGE_REGISTRY, value=public.ecr.aws/opensearchproject})
                  promoteContainer.string({name=DESTINATION_IMAGE, value=opensearch-dashboards:2.0.1})
                  promoteContainer.build({job=docker-copy, parameters=[null, null, null, null]})
                  promoteContainer.string({name=SOURCE_IMAGE_REGISTRY, value=opensearchstaging})
                  promoteContainer.string({name=SOURCE_IMAGE, value=opensearch-dashboards:2.0.1-2345})
                  promoteContainer.string({name=DESTINATION_IMAGE_REGISTRY, value=public.ecr.aws/opensearchproject})
                  promoteContainer.string({name=DESTINATION_IMAGE, value=opensearch-dashboards:2})
                  promoteContainer.build({job=docker-copy, parameters=[null, null, null, null]})
                  promoteContainer.string({name=SOURCE_IMAGE_REGISTRY, value=opensearchstaging})
                  promoteContainer.string({name=SOURCE_IMAGE, value=opensearch-dashboards:2.0.1-2345})
                  promoteContainer.string({name=DESTINATION_IMAGE_REGISTRY, value=public.ecr.aws/opensearchproject})
                  promoteContainer.string({name=DESTINATION_IMAGE, value=opensearch-dashboards:latest})
                  promoteContainer.build({job=docker-copy, parameters=[null, null, null, null]})
               promote-docker-ecr.promoteContainer({imageRepository=data-prepper:2.0.1.123, version=2.0.1, dockerPromote=false, ecrPromote=true, latestTag=true, majorVersionTag=true})
                  promoteContainer.string({name=SOURCE_IMAGE_REGISTRY, value=dummy_dataprepper_ecr_url})
                  promoteContainer.string({name=SOURCE_IMAGE, value=data-prepper:2.0.1.123})
                  promoteContainer.string({name=DESTINATION_IMAGE_REGISTRY, value=public.ecr.aws/opensearchproject})
                  promoteContainer.string({name=DESTINATION_IMAGE, value=data-prepper:2.0.1})
                  promoteContainer.build({job=docker-copy, parameters=[null, null, null, null]})
                  promoteContainer.string({name=SOURCE_IMAGE_REGISTRY, value=dummy_dataprepper_ecr_url})
                  promoteContainer.string({name=SOURCE_IMAGE, value=data-prepper:2.0.1.123})
                  promoteContainer.string({name=DESTINATION_IMAGE_REGISTRY, value=public.ecr.aws/opensearchproject})
                  promoteContainer.string({name=DESTINATION_IMAGE, value=data-prepper:2})
                  promoteContainer.build({job=docker-copy, parameters=[null, null, null, null]})
                  promoteContainer.string({name=SOURCE_IMAGE_REGISTRY, value=dummy_dataprepper_ecr_url})
                  promoteContainer.string({name=SOURCE_IMAGE, value=data-prepper:2.0.1.123})
                  promoteContainer.string({name=DESTINATION_IMAGE_REGISTRY, value=public.ecr.aws/opensearchproject})
                  promoteContainer.string({name=DESTINATION_IMAGE, value=data-prepper:latest})
                  promoteContainer.build({job=docker-copy, parameters=[null, null, null, null]})
         promote-docker-ecr.script(groovy.lang.Closure)
            promote-docker-ecr.postCleanup()
               postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
            promote-docker-ecr.sh(docker logout)

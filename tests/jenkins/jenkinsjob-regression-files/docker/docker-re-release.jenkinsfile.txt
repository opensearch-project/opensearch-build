   docker-re-release.run()
      docker-re-release.modernSCM({$class=GitSCMSource, remote=https://github.com/opensearch-project/opensearch-build-libraries.git})
      docker-re-release.library({identifier=jenkins@6.2.0, retriever=null})
      docker-re-release.pipeline(groovy.lang.Closure)
         docker-re-release.timeout({time=2, unit=HOURS})
         docker-re-release.echo(Executing on agent [label:none])
         docker-re-release.parameterizedCron(
            H 19 15 * * %PRODUCT=opensearch;TAG=1
            H 19 15 * * %PRODUCT=opensearch-dashboards;TAG=1
            H 19 15 * * %PRODUCT=opensearch;TAG=2
            H 19 15 * * %PRODUCT=opensearch-dashboards;TAG=2
        )
         docker-re-release.stage(Patch Docker Image, groovy.lang.Closure)
            docker-re-release.script(groovy.lang.Closure)
               docker-re-release.patchDockerImage({product=opensearch, tag=1})
                  patchDockerImage.legacySCM(groovy.lang.Closure)
                  patchDockerImage.library({identifier=jenkins@6.2.0, retriever=null})
                  patchDockerImage.sh(#!/bin/bash
    set -e
    set +x
    docker pull opensearchproject/opensearch:1
    docker pull opensearchproject/opensearch:latest
    )
                  patchDockerImage.sh({script=docker inspect --format '{{ index .Config.Labels "org.label-schema.version"}}' opensearchproject/opensearch:1, returnStdout=true})
                  patchDockerImage.sh({script=date +%Y%m%d, returnStdout=true})
                  patchDockerImage.sh({script=docker inspect --format '{{ index .Config.Labels "org.label-schema.description"}}' opensearchproject/opensearch:1, returnStdout=true})
                  patchDockerImage.sh({script=docker inspect --format '{{ index .Config.Labels "org.label-schema.version"}}' opensearchproject/opensearch:latest, returnStdout=true})
                  patchDockerImage.readYaml({file=manifests/1.3.0/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  patchDockerImage.buildDockerImage({inputManifest=manifests/1.3.0/opensearch-1.3.0.yml, buildNumber=7756, buildGitRef=1.3.0, buildDate=20230619, buildOption=re_release_docker_image, artifactUrlX64=https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/1.3.0/7756/linux/x64/tar/dist/opensearch/opensearch-1.3.0-linux-x64.tar.gz, artifactUrlArm64=https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/1.3.0/7756/linux/arm64/tar/dist/opensearch/opensearch-1.3.0-linux-arm64.tar.gz})
                     buildDockerImage.legacySCM(groovy.lang.Closure)
                     buildDockerImage.library({identifier=jenkins@6.2.0, retriever=null})
                     buildDockerImage.readYaml({file=manifests/1.3.0/opensearch-1.3.0.yml})
                     InputManifest.asBoolean()
                     buildDockerImage.echo(Triggering docker-build)
                     buildDockerImage.string({name=DOCKER_BUILD_GIT_REPOSITORY, value=https://github.com/opensearch-project/opensearch-build})
                     buildDockerImage.string({name=DOCKER_BUILD_GIT_REPOSITORY_REFERENCE, value=1.3.0})
                     buildDockerImage.string({name=DOCKER_BUILD_SCRIPT_WITH_COMMANDS, value=id && pwd && cd docker/release && curl -sSL https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/1.3.0/7756/linux/x64/tar/dist/opensearch/opensearch-1.3.0-linux-x64.tar.gz -o opensearch-x64.tgz && curl -sSL https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/1.3.0/7756/linux/arm64/tar/dist/opensearch/opensearch-1.3.0-linux-arm64.tar.gz -o opensearch-arm64.tgz && bash build-image-multi-arch.sh -v 1.3.0 -f ./dockerfiles/opensearch.al2.dockerfile -p opensearch -a 'x64,arm64' -r opensearchstaging/opensearch -t 'opensearch-x64.tgz,opensearch-arm64.tgz' -n 7756})
                     buildDockerImage.build({job=docker-build, propagate=true, wait=true, parameters=[null, null, null]})
                     buildDockerImage.echo(Triggering docker create tag with build number)
                     buildDockerImage.string({name=SOURCE_IMAGE_REGISTRY, value=opensearchstaging})
                     buildDockerImage.string({name=SOURCE_IMAGE, value=opensearch:1.3.0})
                     buildDockerImage.string({name=DESTINATION_IMAGE_REGISTRY, value=opensearchstaging})
                     buildDockerImage.string({name=DESTINATION_IMAGE, value=opensearch:1.3.0.7756.20230619})
                     buildDockerImage.build({job=docker-copy, propagate=true, wait=true, parameters=[null, null, null, null]})
                     buildDockerImage.echo(Triggering docker-scan for opensearch version 1.3.0)
                     buildDockerImage.string({name=IMAGE_FULL_NAME, value=opensearchstaging/opensearch:1.3.0})
                     buildDockerImage.build({job=docker-scan, propagate=true, wait=true, parameters=[null]})
                  patchDockerImage.echo(Triggering docker-promotion)
                  patchDockerImage.string({name=SOURCE_IMAGES, value=opensearch:1.3.0.7756.20230619})
                  patchDockerImage.string({name=RELEASE_VERSION, value=1.3.0})
                  patchDockerImage.booleanParam({name=TAG_LATEST, value=false})
                  patchDockerImage.build({job=docker-promotion, propagate=true, wait=true, parameters=[null, null, null]})
         docker-re-release.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
         docker-re-release.sh(docker image prune -f --all)

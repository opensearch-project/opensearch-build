   benchmark-pull-request.run()
      benchmark-pull-request.modernSCM({$class=GitSCMSource, remote=https://github.com/opensearch-project/opensearch-build-libraries.git})
      benchmark-pull-request.library({identifier=jenkins@6.6.0, retriever=null})
      benchmark-pull-request.pipeline(groovy.lang.Closure)
         benchmark-pull-request.timeout({time=24, unit=HOURS})
         benchmark-pull-request.logRotator({daysToKeepStr=30})
         benchmark-pull-request.buildDiscarder(null)
         benchmark-pull-request.echo(Executing on agent [label:none])
         benchmark-pull-request.GenericTrigger({genericVariables=[{key=pull_request_number, value=$.pull_request_number}, {key=repository, value=$.repository}, {key=DISTRIBUTION_URL, value=$.DISTRIBUTION_URL}, {key=DISTRIBUTION_VERSION, value=$.DISTRIBUTION_VERSION}, {key=TEST_WORKLOAD, value=$.TEST_WORKLOAD}, {key=SECURITY_ENABLED, value=$.SECURITY_ENABLED}, {key=SINGLE_NODE_CLUSTER, value=$.SINGLE_NODE_CLUSTER}, {key=MIN_DISTRIBUTION, value=$.MIN_DISTRIBUTION}, {key=MANAGER_NODE_COUNT, value=$.MANAGER_NODE_COUNT}, {key=DATA_NODE_COUNT, value=$.DATA_NODE_COUNT}, {key=CLIENT_NODE_COUNT, value=$.CLIENT_NODE_COUNT}, {key=INGEST_NODE_COUNT, value=$.INGEST_NODE_COUNT}, {key=ML_NODE_COUNT, value=$.ML_NODE_COUNT}, {key=DATA_INSTANCE_TYPE, value=$.DATA_INSTANCE_TYPE}, {key=DATA_NODE_STORAGE, value=$.DATA_NODE_STORAGE}, {key=ML_NODE_STORAGE, value=$.ML_NODE_STORAGE}, {key=JVM_SYS_PROPS, value=$.JVM_SYS_PROPS}, {key=ADDITIONAL_CONFIG, value=$.ADDITIONAL_CONFIG}, {key=USE_50_PERCENT_HEAP, value=$.USE_50_PERCENT_HEAP}, {key=USER_TAGS, value=$.USER_TAGS}, {key=WORKLOAD_PARAMS, value=$.WORKLOAD_PARAMS}, {key=TEST_PROCEDURE, value=$.TEST_PROCEDURE}, {key=EXCLUDE_TASKS, value=$.EXCLUDE_TASKS}, {key=INCLUDE_TASKS, value=$.INCLUDE_TASKS}, {key=CAPTURE_NODE_STAT, value=$.CAPTURE_NODE_STAT}, {key=TELEMETRY_PARAMS, value=$.TELEMETRY_PARAMS}], tokenCredentialId=jenkins-pr-benchmark-generic-webhook-token, causeString=Triggered by comment on PR on OpenSearch core repository, printContributedVariables=true, printPostContent=true})
         benchmark-pull-request.stage(validate-and-set-parameters, groovy.lang.Closure)
            benchmark-pull-request.echo(Executing on agent [label:Jenkins-Agent-AL2-X64-M52xlarge-Docker-Host-Benchmark-Test])
            benchmark-pull-request.script(groovy.lang.Closure)
               Messages.asBoolean()
               Messages.add(benchmark-test, Benchmark tests for https://artifacts.com/artifact.tar.gz)
                  benchmark-pull-request.writeFile({file=messages/benchmark-test.msg, text=Benchmark tests for https://artifacts.com/artifact.tar.gz})
                  benchmark-pull-request.stash({includes=messages/*, name=messages-benchmark-test})
         benchmark-pull-request.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
         benchmark-pull-request.stage(benchmark-pull-request, groovy.lang.Closure)
            benchmark-pull-request.echo(Executing on agent [label:Jenkins-Agent-AL2-X64-M52xlarge-Docker-Host-Benchmark-Test])
            benchmark-pull-request.script(groovy.lang.Closure)
               benchmark-pull-request.echo(security-enabled: false)
               benchmark-pull-request.runBenchmarkTestScript({distributionUrl=https://artifacts.com/artifact.tar.gz, distributionVersion=3.0.0, workload=nyc-taxis, insecure=true, singleNode=false, minDistribution=false, use50PercentHeap=true, managerNodeCount=3, dataNodeCount=3, clientNodeCount=, ingestNodeCount=, mlNodeCount=, dataInstanceType=r5-4xlarge, additionalConfig=, dataStorageSize=100, mlStorageSize=, jvmSysProps=, userTag=run-type:test,security-enabled:false, suffix=307, workloadParams=, testProcedure=append-no-conflicts, excludeTasks=, includeTasks=, captureNodeStat=false, telemetryParams=})
                  runBenchmarkTestScript.legacySCM(groovy.lang.Closure)
                  runBenchmarkTestScript.library({identifier=jenkins@6.6.0, retriever=null})
                  runBenchmarkTestScript.string({credentialsId=jenkins-aws-account-public, variable=AWS_ACCOUNT_PUBLIC})
                  runBenchmarkTestScript.string({credentialsId=jenkins-artifact-bucket-name, variable=ARTIFACT_BUCKET_NAME})
                  runBenchmarkTestScript.withCredentials([AWS_ACCOUNT_PUBLIC, ARTIFACT_BUCKET_NAME], groovy.lang.Closure)
                     runBenchmarkTestScript.withAWS({role=opensearch-test, roleAccount=AWS_ACCOUNT_PUBLIC, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        runBenchmarkTestScript.s3Download({file=config.yml, bucket=ARTIFACT_BUCKET_NAME, path=test_config/config.yml, force=true})
                        runBenchmarkTestScript.s3Download({file=benchmark.ini, bucket=ARTIFACT_BUCKET_NAME, path=test_config/benchmark.ini, force=true})
                  runBenchmarkTestScript.string({credentialsId=benchmark-metrics-datastore-user, variable=DATASTORE_USER})
                  runBenchmarkTestScript.string({credentialsId=benchmark-metrics-datastore-password, variable=DATASTORE_PASSWORD})
                  runBenchmarkTestScript.withCredentials([DATASTORE_USER, DATASTORE_PASSWORD], groovy.lang.Closure)
                     runBenchmarkTestScript.readFile({file=/tmp/workspace/benchmark.ini})
                     runBenchmarkTestScript.writeFile({file=/tmp/workspace/benchmark.ini, text=})
                  runBenchmarkTestScript.sh(set +x && ./test.sh benchmark-test  --distribution-url https://artifacts.com/artifact.tar.gz --distribution-version 3.0.0  --config /tmp/workspace/config.yml --workload nyc-taxis --benchmark-config /tmp/workspace/benchmark.ini --user-tag run-type:test,security-enabled:false --without-security     --use-50-percent-heap    --suffix 307 --manager-node-count 3 --data-node-count 3    --data-instance-type r5-4xlarge  --test-procedure append-no-conflicts    --data-node-storage 100)
               benchmark-pull-request.stash({includes=test_execution*.csv, name=benchmark})
               benchmark-pull-request.stash({includes=test_execution*.json, name=benchmark-json})
         benchmark-pull-request.node(Jenkins-Agent-AL2-X64-M52xlarge-Docker-Host-Benchmark-Test, groovy.lang.Closure)
            benchmark-pull-request.unstash(benchmark)
            benchmark-pull-request.unstash(benchmark-json)
            benchmark-pull-request.archiveArtifacts({artifacts=test_execution*.csv})
            benchmark-pull-request.sh(sed -i '1i\#### Benchmark Results for Job: test://artifact.url' final_result_307.md)
            benchmark-pull-request.script(groovy.lang.Closure)
               benchmark-pull-request.usernamePassword({credentialsId=jenkins-github-bot-token, passwordVariable=GITHUB_TOKEN, usernameVariable=GITHUB_USER})
               benchmark-pull-request.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                  benchmark-pull-request.sh(gh pr comment 1234 --repo opensearch-project/OpenSearch --body-file final_result_307.md)
            benchmark-pull-request.postCleanup()
               postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})

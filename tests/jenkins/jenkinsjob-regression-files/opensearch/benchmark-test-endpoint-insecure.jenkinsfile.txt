   benchmark-test-endpoint.run()
      benchmark-test-endpoint.modernSCM({$class=GitSCMSource, remote=https://github.com/opensearch-project/opensearch-build-libraries.git})
      benchmark-test-endpoint.library({identifier=jenkins@6.4.3, retriever=null})
      benchmark-test-endpoint.pipeline(groovy.lang.Closure)
         benchmark-test-endpoint.timeout({time=24, unit=HOURS})
         benchmark-test-endpoint.logRotator({daysToKeepStr=30})
         benchmark-test-endpoint.buildDiscarder(null)
         benchmark-test-endpoint.echo(Executing on agent [label:none])
         benchmark-test-endpoint.stage(validate-and-set-parameters, groovy.lang.Closure)
            benchmark-test-endpoint.echo(Executing on agent [label:Jenkins-Agent-AL2-X64-C54xlarge-Docker-Host])
            benchmark-test-endpoint.script(groovy.lang.Closure)
         benchmark-test-endpoint.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
         benchmark-test-endpoint.stage(benchmark-test-with-cluster, groovy.lang.Closure)
            benchmark-test-endpoint.echo(Executing on agent [label:Jenkins-Agent-AL2-X64-C54xlarge-Docker-Host])
            benchmark-test-endpoint.script(groovy.lang.Closure)
               benchmark-test-endpoint.echo(security-enabled: true)
               benchmark-test-endpoint.runBenchmarkTestScript({endpoint=opensearch-ABCxdfdfhyfk.com, insecure=false, username=, password=, workload=nyc-taxis, userTag=run-type:test,security-enabled:true, suffix=307, workloadParams=, testProcedure=append-no-conflicts, excludeTasks=, includeTasks=, captureNodeStat=false, captureSegmentReplicationStat=false, telemetryParams={"telemetry_setting":"value"}})
                  runBenchmarkTestScript.legacySCM(groovy.lang.Closure)
                  runBenchmarkTestScript.library({identifier=jenkins@6.4.3, retriever=null})
                  runBenchmarkTestScript.string({credentialsId=jenkins-aws-account-public, variable=AWS_ACCOUNT_PUBLIC})
                  runBenchmarkTestScript.string({credentialsId=jenkins-artifact-bucket-name, variable=ARTIFACT_BUCKET_NAME})
                  runBenchmarkTestScript.withCredentials([AWS_ACCOUNT_PUBLIC, ARTIFACT_BUCKET_NAME], groovy.lang.Closure)
                     runBenchmarkTestScript.withAWS({role=opensearch-test, roleAccount=AWS_ACCOUNT_PUBLIC, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        runBenchmarkTestScript.s3Download({file=benchmark.ini, bucket=ARTIFACT_BUCKET_NAME, path=test_config/benchmark.ini, force=true})
                  runBenchmarkTestScript.string({credentialsId=benchmark-metrics-datastore-user, variable=DATASTORE_USER})
                  runBenchmarkTestScript.string({credentialsId=benchmark-metrics-datastore-password, variable=DATASTORE_PASSWORD})
                  runBenchmarkTestScript.withCredentials([DATASTORE_USER, DATASTORE_PASSWORD], groovy.lang.Closure)
                     runBenchmarkTestScript.readFile({file=/tmp/workspace/benchmark.ini})
                     runBenchmarkTestScript.writeFile({file=/tmp/workspace/benchmark.ini, text=})
                  runBenchmarkTestScript.sh(set +x && ./test.sh benchmark-test    --cluster-endpoint opensearch-ABCxdfdfhyfk.com  --workload nyc-taxis --benchmark-config /tmp/workspace/benchmark.ini --user-tag run-type:test,security-enabled:true          --suffix 307        --test-procedure append-no-conflicts       --telemetry-params '{"telemetry_setting":"value"}')
               benchmark-test-endpoint.stash({includes=test_execution*.csv, name=benchmark})
         benchmark-test-endpoint.unstash(benchmark)
         benchmark-test-endpoint.archiveArtifacts({artifacts=test_execution*.csv})
         benchmark-test-endpoint.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})

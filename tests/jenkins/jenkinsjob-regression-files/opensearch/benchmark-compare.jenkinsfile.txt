   benchmark-compare.run()
      benchmark-compare.modernSCM({$class=GitSCMSource, remote=https://github.com/opensearch-project/opensearch-build-libraries.git})
      benchmark-compare.library({identifier=jenkins@11.0.1, retriever=null})
      benchmark-compare.pipeline(groovy.lang.Closure)
         benchmark-compare.timeout({time=1, unit=HOURS})
         benchmark-compare.logRotator({daysToKeepStr=30})
         benchmark-compare.buildDiscarder(null)
         benchmark-compare.throttleJobProperty({categories=[], limitOneJobWithMatchingParams=false, maxConcurrentPerNode=0, maxConcurrentTotal=20, paramsToUseForLimit=, throttleEnabled=true, throttleOption=project})
         benchmark-compare.echo(Executing on agent [label:Jenkins-Agent-AL2023-X64-M52xlarge-Benchmark-Test])
         benchmark-compare.stage(validate-and-set-parameters, groovy.lang.Closure)
            benchmark-compare.script(groovy.lang.Closure)
         benchmark-compare.stage(benchmark-pull-request, groovy.lang.Closure)
            benchmark-compare.script(groovy.lang.Closure)
               benchmark-compare.runBenchmarkTestScript({command=compare, baseline=baseline-id, contender=contender-id, suffix=307})
                  runBenchmarkTestScript.legacySCM(groovy.lang.Closure)
                  runBenchmarkTestScript.library({identifier=jenkins@11.0.1, retriever=null})
                  runBenchmarkTestScript.withSecrets({secrets=[{envVar=ARTIFACT_BUCKET_NAME, secretRef=op://opensearch-infra-secrets/aws-resource-arns/jenkins-artifact-bucket-name}, {envVar=AWS_ACCOUNT_PUBLIC, secretRef=op://opensearch-infra-secrets/aws-accounts/jenkins-aws-account-public}]}, groovy.lang.Closure)
                     runBenchmarkTestScript.withAWS({role=opensearch-test, roleAccount=dummy_account, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        runBenchmarkTestScript.s3Download({file=benchmark.ini, bucket=test_bucket, path=test_config/benchmark.ini, force=true})
                  runBenchmarkTestScript.withSecrets({secrets=[{envVar=DATASTORE_USER, secretRef=op://opensearch-infra-secrets/benchmark-metrics/benchmark-metrics-datastore-user}, {envVar=DATASTORE_PASSWORD, secretRef=op://opensearch-infra-secrets/benchmark-metrics/benchmark-metrics-datastore-password}]}, groovy.lang.Closure)
                     runBenchmarkTestScript.readFile({file=/tmp/workspace/benchmark.ini})
                     runBenchmarkTestScript.writeFile({file=/tmp/workspace/benchmark.ini, text=})
                  runBenchmarkTestScript.withSecrets({secrets=[{envVar=PERF_TEST_ACCOUNT_ID, secretRef=op://opensearch-infra-secrets/aws-accounts/perf-test-account-id}]}, groovy.lang.Closure)
                     runBenchmarkTestScript.withAWS({role=opensearch-full-access-nightlies, roleAccount=PERF_TEST_ACCOUNT_ID, duration=43200, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        runBenchmarkTestScript.sh(set +x && ./test.sh benchmark-test compare baseline-id contender-id --benchmark-config /tmp/workspace/benchmark.ini --suffix 307)
         benchmark-compare.sh(
                        echo '<details><summary>Benchmark Baseline Comparison Results</summary>' > temp_result_307.md
                        echo '' >> temp_result_307.md
                        echo '#### Benchmark Results for Job: test://artifact.url' >> temp_result_307.md
                        cat final_result_307.md >> temp_result_307.md
                        echo '</details>' >> temp_result_307.md
                        mv temp_result_307.md final_result_307.md
                    )
         benchmark-compare.script(groovy.lang.Closure)
            benchmark-compare.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}]}, groovy.lang.Closure)
               benchmark-compare.sh(gh pr comment 1234 --repo opensearch-project/OpenSearch --body-file final_result_307.md)
         benchmark-compare.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})

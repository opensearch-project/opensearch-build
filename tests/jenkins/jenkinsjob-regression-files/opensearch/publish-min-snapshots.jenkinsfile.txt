   publish-min-snapshots.run()
      publish-min-snapshots.modernSCM({$class=GitSCMSource, remote=https://github.com/opensearch-project/opensearch-build-libraries.git})
      publish-min-snapshots.library({identifier=jenkins@5.12.0, retriever=null})
      publish-min-snapshots.pipeline(groovy.lang.Closure)
         publish-min-snapshots.timeout({time=1, unit=HOURS})
         publish-min-snapshots.echo(Executing on agent [label:none])
         publish-min-snapshots.stage(Detect Docker-images, groovy.lang.Closure)
            publish-min-snapshots.echo(Executing on agent [docker:[alwaysPull:true, args:, containerPerStageRoot:false, label:Jenkins-Agent-AL2023-X64-C54xlarge-Docker-Host, image:docker/library/alpine:3, reuseNode:false, registryUrl:https://public.ecr.aws/, stages:[:]]])
            publish-min-snapshots.script(groovy.lang.Closure)
               publish-min-snapshots.detectDockerAgent()
                  detectDockerAgent.legacySCM(groovy.lang.Closure)
                  detectDockerAgent.library({identifier=jenkins@5.12.0, retriever=null})
                  detectDockerAgent.readYaml({file=manifests/3.0.0/opensearch-3.0.0.yml})
                  InputManifest.asBoolean()
                  detectDockerAgent.echo(Using Docker image opensearchstaging/ci-runner:ci-runner-centos7-v1 (null))
                  detectDockerAgent.echo(Using java version openjdk-17)
         publish-min-snapshots.stage(linux-x64-tar, groovy.lang.Closure)
            publish-min-snapshots.echo(Executing on agent [docker:[alwaysPull:true, args:-e JAVA_HOME=/opt/java/openjdk-20, containerPerStageRoot:false, label:Jenkins-Agent-AL2023-X64-C54xlarge-Docker-Host, image:opensearchstaging/ci-runner:ci-runner-centos7-opensearch-build-v3, reuseNode:false, registryUrl:https://public.ecr.aws/, stages:[:]]])
            publish-min-snapshots.script(groovy.lang.Closure)
               publish-min-snapshots.buildManifest({componentName=OpenSearch, inputManifest=manifests/3.0.0/opensearch-3.0.0.yml, platform=linux, architecture=x64, distribution=tar, snapshot=true})
                  buildManifest.sh(./build.sh manifests/3.0.0/opensearch-3.0.0.yml -d tar --component OpenSearch -p linux -a x64 --snapshot)
               publish-min-snapshots.echo(Uploading min snapshots to S3)
               publish-min-snapshots.createSha512Checksums()
               publish-min-snapshots.uploadMinSnapshotsToS3({fileActions=[groovy.lang.Closure], distribution=tar})
                  uploadMinSnapshotsToS3.legacySCM(groovy.lang.Closure)
                  uploadMinSnapshotsToS3.library({identifier=jenkins@5.12.0, retriever=null})
                  uploadMinSnapshotsToS3.readYaml({file=manifests/3.0.0/opensearch-3.0.0.yml})
                  InputManifest.asBoolean()
                  uploadMinSnapshotsToS3.echo(Retreving build manifest from: /tmp/workspace/tar/builds/opensearch/manifest.yml)
                  uploadMinSnapshotsToS3.readYaml({file=/tmp/workspace/tar/builds/opensearch/manifest.yml})
                  BuildManifest.asBoolean()
                  uploadMinSnapshotsToS3.echo(Create .sha512 for Min Snapshots Artifacts)
                  createSha512Checksums.sh({script=find /tmp/workspace/tar/builds/opensearch/dist -type f, returnStdout=true})
                  createSha512Checksums.echo(Not generating sha for bbb in /tmp/workspace/tar/builds/opensearch/dist, doesn't match allowed types [.tar.gz, .zip, .rpm, .deb])
                  createSha512Checksums.echo(Not generating sha for ccc in /tmp/workspace/tar/builds/opensearch/dist, doesn't match allowed types [.tar.gz, .zip, .rpm, .deb])
                  uploadMinSnapshotsToS3.echo(Start copying files: version-3.0.0-SNAPSHOT architecture-x64 platform-linux buildid-c1c835af3b9646868a9ac3f1e20a51de distribution-tar extension-tar.gz)
                  uploadMinSnapshotsToS3.sh(
        cp -v /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-x64.tar.gz /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-x64-latest.tar.gz
        cp -v /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-x64.tar.gz.sha512 /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-x64-latest.tar.gz.sha512
        cp -v /tmp/workspace/tar/builds/opensearch/dist/../manifest.yml /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-x64-latest.tar.gz.build-manifest.yml
        sed -i "s/.tar.gz/-latest.tar.gz/g" /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-x64-latest.tar.gz.sha512
    )
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-artifact-promotion-role, variable=ARTIFACT_PROMOTION_ROLE_NAME})
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-aws-production-account, variable=AWS_ACCOUNT_ARTIFACT})
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-artifact-production-bucket-name, variable=ARTIFACT_PRODUCTION_BUCKET_NAME})
                  uploadMinSnapshotsToS3.withCredentials([ARTIFACT_PROMOTION_ROLE_NAME, AWS_ACCOUNT_ARTIFACT, ARTIFACT_PRODUCTION_BUCKET_NAME], groovy.lang.Closure)
                     uploadMinSnapshotsToS3.withAWS({role=ARTIFACT_PROMOTION_ROLE_NAME, roleAccount=AWS_ACCOUNT_ARTIFACT, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-x64-latest.tar.gz, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-linux-x64-latest.tar.gz})
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-x64-latest.tar.gz.sha512, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-linux-x64-latest.tar.gz.sha512})
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-x64-latest.tar.gz.build-manifest.yml, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-linux-x64-latest.tar.gz.build-manifest.yml})
         publish-min-snapshots.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
         publish-min-snapshots.stage(linux-arm64-tar, groovy.lang.Closure)
            publish-min-snapshots.echo(Executing on agent [docker:[alwaysPull:true, args:-e JAVA_HOME=/opt/java/openjdk-20, containerPerStageRoot:false, label:Jenkins-Agent-AL2023-Arm64-C6g4xlarge-Docker-Host, image:opensearchstaging/ci-runner:ci-runner-centos7-opensearch-build-v3, reuseNode:false, registryUrl:https://public.ecr.aws/, stages:[:]]])
            publish-min-snapshots.script(groovy.lang.Closure)
               publish-min-snapshots.buildManifest({componentName=OpenSearch, inputManifest=manifests/3.0.0/opensearch-3.0.0.yml, platform=linux, architecture=arm64, distribution=tar, snapshot=true})
                  buildManifest.sh(./build.sh manifests/3.0.0/opensearch-3.0.0.yml -d tar --component OpenSearch -p linux -a arm64 --snapshot)
               publish-min-snapshots.echo(Uploading min snapshots to S3)
               publish-min-snapshots.createSha512Checksums()
               publish-min-snapshots.uploadMinSnapshotsToS3({fileActions=[groovy.lang.Closure], distribution=tar})
                  uploadMinSnapshotsToS3.legacySCM(groovy.lang.Closure)
                  uploadMinSnapshotsToS3.library({identifier=jenkins@5.12.0, retriever=null})
                  uploadMinSnapshotsToS3.readYaml({file=manifests/3.0.0/opensearch-3.0.0.yml})
                  InputManifest.asBoolean()
                  uploadMinSnapshotsToS3.echo(Retreving build manifest from: /tmp/workspace/tar/builds/opensearch/manifest.yml)
                  uploadMinSnapshotsToS3.readYaml({file=/tmp/workspace/tar/builds/opensearch/manifest.yml})
                  BuildManifest.asBoolean()
                  uploadMinSnapshotsToS3.echo(Create .sha512 for Min Snapshots Artifacts)
                  createSha512Checksums.sh({script=find /tmp/workspace/tar/builds/opensearch/dist -type f, returnStdout=true})
                  createSha512Checksums.echo(Not generating sha for bbb in /tmp/workspace/tar/builds/opensearch/dist, doesn't match allowed types [.tar.gz, .zip, .rpm, .deb])
                  createSha512Checksums.echo(Not generating sha for ccc in /tmp/workspace/tar/builds/opensearch/dist, doesn't match allowed types [.tar.gz, .zip, .rpm, .deb])
                  uploadMinSnapshotsToS3.echo(Start copying files: version-3.0.0-SNAPSHOT architecture-arm64 platform-linux buildid-629 distribution-tar extension-tar.gz)
                  uploadMinSnapshotsToS3.sh(
        cp -v /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-arm64.tar.gz /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-arm64-latest.tar.gz
        cp -v /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-arm64.tar.gz.sha512 /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-arm64-latest.tar.gz.sha512
        cp -v /tmp/workspace/tar/builds/opensearch/dist/../manifest.yml /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-arm64-latest.tar.gz.build-manifest.yml
        sed -i "s/.tar.gz/-latest.tar.gz/g" /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-arm64-latest.tar.gz.sha512
    )
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-artifact-promotion-role, variable=ARTIFACT_PROMOTION_ROLE_NAME})
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-aws-production-account, variable=AWS_ACCOUNT_ARTIFACT})
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-artifact-production-bucket-name, variable=ARTIFACT_PRODUCTION_BUCKET_NAME})
                  uploadMinSnapshotsToS3.withCredentials([ARTIFACT_PROMOTION_ROLE_NAME, AWS_ACCOUNT_ARTIFACT, ARTIFACT_PRODUCTION_BUCKET_NAME], groovy.lang.Closure)
                     uploadMinSnapshotsToS3.withAWS({role=ARTIFACT_PROMOTION_ROLE_NAME, roleAccount=AWS_ACCOUNT_ARTIFACT, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-arm64-latest.tar.gz, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-linux-arm64-latest.tar.gz})
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-arm64-latest.tar.gz.sha512, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-linux-arm64-latest.tar.gz.sha512})
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-linux-arm64-latest.tar.gz.build-manifest.yml, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-linux-arm64-latest.tar.gz.build-manifest.yml})
         publish-min-snapshots.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
         publish-min-snapshots.stage(macos-x64-tar, groovy.lang.Closure)
            publish-min-snapshots.echo(Executing on agent [label:Jenkins-Agent-MacOS12-X64-Mac1Metal-Multi-Host])
            publish-min-snapshots.script(groovy.lang.Closure)
               publish-min-snapshots.echo(Switching to Java 17 on MacOS)
               publish-min-snapshots.sh(/usr/local/bin/update-alternatives --set java `/usr/local/bin/update-alternatives --list java | grep openjdk-17`)
               publish-min-snapshots.sh(java -version)
               publish-min-snapshots.buildManifest({componentName=OpenSearch, inputManifest=manifests/3.0.0/opensearch-3.0.0.yml, platform=darwin, architecture=x64, distribution=tar, snapshot=true})
                  buildManifest.sh(./build.sh manifests/3.0.0/opensearch-3.0.0.yml -d tar --component OpenSearch -p darwin -a x64 --snapshot)
               publish-min-snapshots.echo(Uploading darwin min snapshots to S3)
               publish-min-snapshots.createSha512Checksums()
               publish-min-snapshots.uploadMinSnapshotsToS3({fileActions=[groovy.lang.Closure], distribution=tar})
                  uploadMinSnapshotsToS3.legacySCM(groovy.lang.Closure)
                  uploadMinSnapshotsToS3.library({identifier=jenkins@5.12.0, retriever=null})
                  uploadMinSnapshotsToS3.readYaml({file=manifests/3.0.0/opensearch-3.0.0.yml})
                  InputManifest.asBoolean()
                  uploadMinSnapshotsToS3.echo(Retreving build manifest from: /tmp/workspace/tar/builds/opensearch/manifest.yml)
                  uploadMinSnapshotsToS3.readYaml({file=/tmp/workspace/tar/builds/opensearch/manifest.yml})
                  BuildManifest.asBoolean()
                  uploadMinSnapshotsToS3.echo(Create .sha512 for Min Snapshots Artifacts)
                  createSha512Checksums.sh({script=find /tmp/workspace/tar/builds/opensearch/dist -type f, returnStdout=true})
                  createSha512Checksums.echo(Not generating sha for bbb in /tmp/workspace/tar/builds/opensearch/dist, doesn't match allowed types [.tar.gz, .zip, .rpm, .deb])
                  createSha512Checksums.echo(Not generating sha for ccc in /tmp/workspace/tar/builds/opensearch/dist, doesn't match allowed types [.tar.gz, .zip, .rpm, .deb])
                  uploadMinSnapshotsToS3.echo(Start copying files: version-3.0.0-SNAPSHOT architecture-x64 platform-darwin buildid-8469 distribution-tar extension-tar.gz)
                  uploadMinSnapshotsToS3.sh(
        cp -v /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-darwin-x64.tar.gz /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-darwin-x64-latest.tar.gz
        cp -v /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-darwin-x64.tar.gz.sha512 /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-darwin-x64-latest.tar.gz.sha512
        cp -v /tmp/workspace/tar/builds/opensearch/dist/../manifest.yml /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-darwin-x64-latest.tar.gz.build-manifest.yml
        sed -i "s/.tar.gz/-latest.tar.gz/g" /tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-darwin-x64-latest.tar.gz.sha512
    )
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-artifact-promotion-role, variable=ARTIFACT_PROMOTION_ROLE_NAME})
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-aws-production-account, variable=AWS_ACCOUNT_ARTIFACT})
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-artifact-production-bucket-name, variable=ARTIFACT_PRODUCTION_BUCKET_NAME})
                  uploadMinSnapshotsToS3.withCredentials([ARTIFACT_PROMOTION_ROLE_NAME, AWS_ACCOUNT_ARTIFACT, ARTIFACT_PRODUCTION_BUCKET_NAME], groovy.lang.Closure)
                     uploadMinSnapshotsToS3.withAWS({role=ARTIFACT_PROMOTION_ROLE_NAME, roleAccount=AWS_ACCOUNT_ARTIFACT, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-darwin-x64-latest.tar.gz, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-darwin-x64-latest.tar.gz})
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-darwin-x64-latest.tar.gz.sha512, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-darwin-x64-latest.tar.gz.sha512})
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/tar/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-darwin-x64-latest.tar.gz.build-manifest.yml, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-darwin-x64-latest.tar.gz.build-manifest.yml})
         publish-min-snapshots.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
         publish-min-snapshots.stage(windows-x64-zip, groovy.lang.Closure)
            publish-min-snapshots.echo(Executing on agent [docker:[alwaysPull:true, args:, containerPerStageRoot:false, label:Jenkins-Agent-Windows2019-X64-C54xlarge-Docker-Host, image:opensearchstaging/ci-runner:ci-runner-windows2019-opensearch-build-v1, reuseNode:false, registryUrl:https://public.ecr.aws/, stages:[:]]])
            publish-min-snapshots.script(groovy.lang.Closure)
               publish-min-snapshots.echo(Switching to Java 17 on Windows Docker Container)
               publish-min-snapshots.sh(scoop reset `scoop list jdk | cut -d ' ' -f1 | grep 17 | head -1`)
               publish-min-snapshots.buildManifest({componentName=OpenSearch, inputManifest=manifests/3.0.0/opensearch-3.0.0.yml, platform=windows, architecture=x64, distribution=zip, snapshot=true})
                  buildManifest.sh(./build.sh manifests/3.0.0/opensearch-3.0.0.yml -d zip --component OpenSearch -p windows -a x64 --snapshot)
               publish-min-snapshots.echo(Uploading windows min snapshots to S3)
               publish-min-snapshots.createSha512Checksums()
               publish-min-snapshots.uploadMinSnapshotsToS3({fileActions=[groovy.lang.Closure], distribution=zip})
                  uploadMinSnapshotsToS3.legacySCM(groovy.lang.Closure)
                  uploadMinSnapshotsToS3.library({identifier=jenkins@5.12.0, retriever=null})
                  uploadMinSnapshotsToS3.readYaml({file=manifests/3.0.0/opensearch-3.0.0.yml})
                  InputManifest.asBoolean()
                  uploadMinSnapshotsToS3.echo(Retreving build manifest from: /tmp/workspace/zip/builds/opensearch/manifest.yml)
                  uploadMinSnapshotsToS3.readYaml({file=/tmp/workspace/zip/builds/opensearch/manifest.yml})
                  BuildManifest.asBoolean()
                  uploadMinSnapshotsToS3.echo(Create .sha512 for Min Snapshots Artifacts)
                  createSha512Checksums.sh({script=find /tmp/workspace/zip/builds/opensearch/dist -type f, returnStdout=true})
                  createSha512Checksums.echo(Not generating sha for bbb in /tmp/workspace/zip/builds/opensearch/dist, doesn't match allowed types [.tar.gz, .zip, .rpm, .deb])
                  createSha512Checksums.echo(Not generating sha for ccc in /tmp/workspace/zip/builds/opensearch/dist, doesn't match allowed types [.tar.gz, .zip, .rpm, .deb])
                  uploadMinSnapshotsToS3.echo(Start copying files: version-3.0.0-SNAPSHOT architecture-x64 platform-windows buildid-8469 distribution-zip extension-zip)
                  uploadMinSnapshotsToS3.sh(
        cp -v /tmp/workspace/zip/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-windows-x64.zip /tmp/workspace/zip/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-windows-x64-latest.zip
        cp -v /tmp/workspace/zip/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-windows-x64.zip.sha512 /tmp/workspace/zip/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-windows-x64-latest.zip.sha512
        cp -v /tmp/workspace/zip/builds/opensearch/dist/../manifest.yml /tmp/workspace/zip/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-windows-x64-latest.zip.build-manifest.yml
        sed -i "s/.zip/-latest.zip/g" /tmp/workspace/zip/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-windows-x64-latest.zip.sha512
    )
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-artifact-promotion-role, variable=ARTIFACT_PROMOTION_ROLE_NAME})
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-aws-production-account, variable=AWS_ACCOUNT_ARTIFACT})
                  uploadMinSnapshotsToS3.string({credentialsId=jenkins-artifact-production-bucket-name, variable=ARTIFACT_PRODUCTION_BUCKET_NAME})
                  uploadMinSnapshotsToS3.withCredentials([ARTIFACT_PROMOTION_ROLE_NAME, AWS_ACCOUNT_ARTIFACT, ARTIFACT_PRODUCTION_BUCKET_NAME], groovy.lang.Closure)
                     uploadMinSnapshotsToS3.withAWS({role=ARTIFACT_PROMOTION_ROLE_NAME, roleAccount=AWS_ACCOUNT_ARTIFACT, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/zip/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-windows-x64-latest.zip, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-windows-x64-latest.zip})
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/zip/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-windows-x64-latest.zip.sha512, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-windows-x64-latest.zip.sha512})
                        uploadMinSnapshotsToS3.s3Upload({file=/tmp/workspace/zip/builds/opensearch/dist/opensearch-min-3.0.0-SNAPSHOT-windows-x64-latest.zip.build-manifest.yml, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=snapshots/core/opensearch/3.0.0-SNAPSHOT/opensearch-min-3.0.0-SNAPSHOT-windows-x64-latest.zip.build-manifest.yml})
         publish-min-snapshots.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
